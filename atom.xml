<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="noahsnail.com/"/>
  <updated>2017-03-14T06:52:42.000Z</updated>
  <id>noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode394——Decode String</title>
    <link href="noahsnail.com/2017/03/14/2017-3-14-Leetcode394%E2%80%94%E2%80%94Decode%20String/"/>
    <id>noahsnail.com/2017/03/14/2017-3-14-Leetcode394——Decode String/</id>
    <published>2017-03-14T06:30:08.000Z</published>
    <updated>2017-03-14T06:52:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p>Given an encoded string, return it’s decoded string.</p>
<p>The encoding rule is: k[encoded_string], where the encoded_string inside the square brackets is being repeated exactly k times. Note that k is guaranteed to be a positive integer.</p>
<p>You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.</p>
<p>Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, k. For example, there won’t be input like 3a or 2[4].</p>
<p>Examples:</p>
<p>s = “3[a]2[bc]”, return “aaabcbc”.<br>s = “3[a2[c]]”, return “accaccacc”.<br>s = “2[abc]3[cd]ef”, return “abcabccdcdcdef”.</p>
<p><strong>中文</strong></p>
<p>给定一个经过编码的字符串，返回其解码字符串。编码规则为：k[encoded_string]，其中中括号内的encoded_string被重复k次。注意k一定是正整数。</p>
<h2 id="2-求解"><a href="#2-求解" class="headerlink" title="2. 求解"></a>2. 求解</h2><p>本题中明显有括号的匹配问题，因此需要使用栈来求解。当碰到右括号（<code>]</code>）时，字符串出栈，碰到左括号（<code>[</code>）时，保存左右括号内的字符串（<code>[]</code>），继续出栈，保存字符串重复次数，直至栈为空或碰到非数字。要注意重复次数不是个位数，将字符串重复之后压入栈中。继续处理剩余字符串，同样执行上述过程，直至处理完字符串。然后将栈中所有的字符出栈构成结果字符串返回。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">	public String decodeString(String s) &#123;</div><div class="line">		int n = s.length();</div><div class="line">		Stack&lt;Character&gt; stack = new Stack&lt;Character&gt;();</div><div class="line">		String result = &quot;&quot;;</div><div class="line">		String temp = &quot;&quot;;</div><div class="line">		for (int i = 0; i &lt; n; i ++) &#123;</div><div class="line">			char str = s.charAt(i);</div><div class="line">			if (str != &apos;]&apos;) &#123;</div><div class="line">				stack.push(str);</div><div class="line">			&#125; else &#123;</div><div class="line">				char ch = stack.pop();</div><div class="line">				while (ch != &apos;[&apos;) &#123;</div><div class="line">					temp = ch + temp;</div><div class="line">					ch = stack.pop();</div><div class="line">				&#125;</div><div class="line">				//字符串重复次数</div><div class="line">				String times = &quot;&quot;;</div><div class="line">				while(!stack.isEmpty()) &#123;</div><div class="line">					ch = stack.pop();</div><div class="line">					if(Character.isDigit(ch)) &#123;</div><div class="line">						times = ch + times;</div><div class="line">					&#125;else &#123;</div><div class="line">						stack.push(ch);</div><div class="line">						break;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				//重复字符串，压入栈中</div><div class="line">				for(int j = 0; j &lt; Integer.parseInt(times); j++) &#123;</div><div class="line">					for(int k = 0; k &lt; temp.length(); k++) &#123;</div><div class="line">						stack.push(temp.charAt(k));</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				temp = &quot;&quot;;</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">		while(!stack.isEmpty()) &#123;</div><div class="line">			result = stack.pop() + result;</div><div class="line">		&#125; </div><div class="line">		return result;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Leetcode394——Decode String
    
    </summary>
    
      <category term="基础算法" scheme="noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux的tar命令</title>
    <link href="noahsnail.com/2017/03/13/2017-3-13-Linux%E7%9A%84tar%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/03/13/2017-3-13-Linux的tar命令/</id>
    <published>2017-03-13T02:48:58.000Z</published>
    <updated>2017-03-13T03:56:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>Linux下经常碰到需要解压文件的情况，需要用到<code>tar</code>命令，本文主要介绍一下<code>tar</code>命令。</p>
<h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>Linux tar命令用于备份文件。tar是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。我的直观印象就是压缩解压文件。其参数如下：</p>
<ul>
<li>-A或–catenate 新增文件到已存在的备份文件。</li>
<li>-b&lt;区块数目&gt;或–blocking-factor=&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为12Bytes。</li>
<li>-B或–read-full-records 读取数据时重设区块大小。</li>
<li>-c或–create 建立新的备份文件。</li>
<li>-C&lt;目的目录&gt;或–directory=&lt;目的目录&gt; 切换到指定的目录。</li>
<li>-d或–diff或–compare 对比备份文件内和文件系统上的文件的差异。</li>
<li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt; 指定备份文件。</li>
<li>-F<script文件>或–info-script=<script文件> 每次更换磁带时，就执行指定的Script文件。</script文件></script文件></li>
<li>-g或–listed-incremental 处理GNU格式的大量备份。</li>
<li>-G或–incremental 处理旧的GNU格式的大量备份。</li>
<li>-h或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</li>
<li>-i或–ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。</li>
<li>-k或–keep-old-files 解开备份文件时，不覆盖已有的文件。</li>
<li>-K&lt;文件&gt;或–starting-file=&lt;文件&gt; 从指定的文件开始还原。</li>
<li>-l或–one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。</li>
<li>-L&lt;媒体容量&gt;或-tape-length=&lt;媒体容量&gt; 设置存放每体的容量，单位以1024 Bytes计算。</li>
<li>-m或–modification-time 还原文件时，不变更文件的更改时间。</li>
<li>-M或–multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。</li>
<li>-N&lt;日期格式&gt;或–newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。</li>
<li>-o或–old-archive或–portability 将资料写入备份文件时使用V7格式。</li>
<li>-O或–stdout 把从备份文件里还原的文件输出到标准输出设备。</li>
<li>-p或–same-permissions 用原来的文件权限还原文件。</li>
<li>-P或–absolute-names 文件名使用绝对名称，不移除文件名称前的”/“号。</li>
<li>-r或–append 新增文件到已存在的备份文件的结尾部分。</li>
<li>-R或–block-number 列出每个信息在备份文件中的区块编号。</li>
<li>-s或–same-order 还原文件的顺序和备份文件内的存放顺序相同。</li>
<li>-S或–sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。</li>
<li>-t或–list 列出备份文件的内容。</li>
<li>-T&lt;范本文件&gt;或–files-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。</li>
<li>-u或–update 仅置换较备份文件内的文件更新的文件。</li>
<li>-U或–unlink-first 解开压缩文件还原文件之前，先解除文件的连接。</li>
<li>-v或–verbose 显示指令执行过程。</li>
<li>-V&lt;卷册名称&gt;或–label=&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。</li>
<li>-w或–interactive 遭遇问题时先询问用户。</li>
<li>-W或–verify 写入备份文件后，确认文件正确无误。</li>
<li>-x或–extract或–get 从备份文件中还原文件。</li>
<li>-X&lt;范本文件&gt;或–exclude-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。</li>
<li>-z或–gzip或–ungzip 通过gzip指令处理备份文件。</li>
<li>-Z或–compress或–uncompress 通过compress指令处理备份文件。</li>
<li>-&lt;设备编号&gt;&lt;存储密度&gt; 设置备份用的外围设备编号及存放数据的密度。</li>
<li>–after-date=&lt;日期时间&gt; 此参数的效果和指定”-N”参数相同。</li>
<li>–atime-preserve 不变更文件的存取时间。</li>
<li>–backup=&lt;备份方式&gt;或–backup 移除文件前先进行备份。</li>
<li>–checkpoint 读取备份文件时列出目录名称。</li>
<li>–concatenate 此参数的效果和指定”-A”参数相同。</li>
<li>–confirmation 此参数的效果和指定”-w”参数相同。</li>
<li>–delete 从备份文件中删除指定的文件。</li>
<li>–exclude=&lt;范本样式&gt; 排除符合范本样式的问家。</li>
<li>–group=&lt;群组名称&gt; 把加入设备文件中的文件的所属群组设成指定的群组。</li>
<li>–help 在线帮助。</li>
<li>–ignore-failed-read 忽略数据读取错误，不中断程序的执行。</li>
<li>–new-volume-script=<script文件> 此参数的效果和指定”-F”参数相同。</script文件></li>
<li>–newer-mtime 只保存更改过的文件。</li>
<li>–no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。</li>
<li>–null 从null设备读取文件名称。</li>
<li>–numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。</li>
<li>–owner=&lt;用户名称&gt; 把加入备份文件中的文件的拥有者设成指定的用户。</li>
<li>–posix 将数据写入备份文件时使用POSIX格式。</li>
<li>–preserve 此参数的效果和指定”-ps”参数相同。</li>
<li>–preserve-order 此参数的效果和指定”-A”参数相同。</li>
<li>–preserve-permissions 此参数的效果和指定”-p”参数相同。</li>
<li>–record-size=&lt;区块数目&gt; 此参数的效果和指定”-b”参数相同。</li>
<li>–recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。</li>
<li>–remove-files 文件加入备份文件后，就将其删除。</li>
<li>–rsh-command=&lt;执行指令&gt; 设置要在远端主机上执行的指令，以取代rsh指令。</li>
<li>–same-owner 尝试以相同的文件拥有者还原问家你。</li>
<li>–suffix=&lt;备份字尾字符串&gt; 移除文件前先行备份。</li>
<li>–totals 备份文件建立后，列出文件大小。</li>
<li>–use-compress-program=&lt;执行指令&gt; 通过指定的指令处理备份文件。</li>
<li>–version 显示版本信息。</li>
<li>–volno-file=&lt;编号文件&gt; 使用指定文件内的编号取代预设的卷册编号。</li>
</ul>
<h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h2><ul>
<li>查看压缩文件中的内容</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ tar -tvf inception-v3.tar.gz </div><div class="line">drwxrwxr-x  0 muli   muli        0 12 21  2015 model/</div><div class="line">-rw-rw-r--  0 muli   muli    31691 12 17  2015 model/synset.txt</div><div class="line">-rw-rw-r--  0 muli   muli 95575141 12 17  2015 model/Inception-7-0001.params</div><div class="line">-rw-rw-r--  0 muli   muli      879 12 17  2015 model/preprocessing.py</div><div class="line">-rw-rw-r--  0 muli   muli   134383 12 17  2015 model/Inception-7-symbol.json</div></pre></td></tr></table></figure>
<ul>
<li>解压文件</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ tar -xvf inception-v3.tar.gz </div><div class="line">x model/</div><div class="line">x model/synset.txt</div><div class="line">x model/Inception-7-0001.params</div><div class="line">x model/preprocessing.py</div><div class="line">x model/Inception-7-symbol.json</div></pre></td></tr></table></figure>
<ul>
<li>解压到指定目录</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ mkdir test</div><div class="line">$ tar xvf inception-v3.tar.gz -C ./test</div><div class="line">x model/</div><div class="line">x model/synset.txt</div><div class="line">x model/Inception-7-0001.params</div><div class="line">x model/preprocessing.py</div><div class="line">x model/Inception-7-symbol.json</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Linux的tar命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode53——最大子数组问题</title>
    <link href="noahsnail.com/2017/03/11/2017-3-11-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%BA%8F%E5%88%97%E9%97%AE%E9%A2%98/"/>
    <id>noahsnail.com/2017/03/11/2017-3-11-最大子序列问题/</id>
    <published>2017-03-11T13:29:22.000Z</published>
    <updated>2017-03-14T09:15:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要是对最大子数组（序列）问题求解的学习与总结，最大子数组问题是一道经典的算法题，这道题解法有很多，因此可以学习到很多求解问题的思路，并可以学习到算法的优化过程。</p>
<h2 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a>1. 问题描述</h2><p><strong>英文：</strong></p>
<p>Find the contiguous subarray within an array (containing at least one number) which has the largest sum.</p>
<p>For example, given the array [-2,1,-3,4,-1,2,1,-5,4],<br>the contiguous subarray [4,-1,2,1] has the largest sum = 6.</p>
<p><strong>中文：</strong></p>
<p>主要是给定一个数组，求解数组的子数组中，数组元素和最大的那一个子数组，返回的是最大子数组的和。</p>
<h2 id="2-求解"><a href="#2-求解" class="headerlink" title="2. 求解"></a>2. 求解</h2><p><strong>解法一</strong></p>
<p>最简单也是最容易想到的思路就是三层循环，对<code>(i,j),i&lt;=j</code>的情况进行遍历，这种情况下的算法复杂度为O($n^3$)。代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">    	<span class="comment">//如果需要节省空间，可将n替换</span></div><div class="line">        <span class="keyword">int</span> n = nums.length;</div><div class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</div><div class="line">                <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">                <span class="comment">//注意k的边界，存在i=j的情况</span></div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt;= j; k++) &#123;</div><div class="line">                    sum += nums[k];</div><div class="line">                    <span class="keyword">if</span>(sum &gt; max) &#123;</div><div class="line">                        max = sum;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Leetcode上的运行结果如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/max_subarray_1.png" alt="O(n^3)的情况"></p>
<p><strong>解法二</strong></p>
<p>从Leetcode结果可以看出，时间超时了，O($n^3$)的时间复杂度确实太高了，需要进行优化。分析上面的代码，在i不变的情况下，j每增加1，其和都是在上次求和基础上加上最新的元素，而在第三层循环中都是重新从i开始计算求和，因此存在数据冗余（求和的重复计算），因此需要需要去掉算法中的冗余部分。这种情况下的代码复杂度变为O($n^2$)，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.length;</div><div class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; n; j++)&#123;</div><div class="line">                sum += nums[j];</div><div class="line">                <span class="keyword">if</span>(sum &gt; max) &#123;</div><div class="line">                    max = sum;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Leetcode上运行结果如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/max_subarray_2.png" alt="O(n^2)的情况"></p>
<p><strong>解法三</strong></p>
<p>从Leetcode结果可以看出，时间还是超时了，但从执行的测试数据数量上来看，比第一次多执行了两个，但在最后一个测试数据上时间超时了。那么能不能有进一步的优化呢？答案是肯定有的。可以使用分治法来求解，算法复杂度为O(nlogn)，但是其实本题并不适合使用分治法，太复杂。虽然算法复杂度降低了一些，因此这里略过分治法，直接寻找更优解法。</p>
<p><strong>解法四</strong></p>
<p>还有没有更好的方法呢？答案也是肯定的。首先假设存在最大子数组X，则最大子数组X中的任意一个子数组x都不应该为负数，如果x为负数，则X必定不是最大子数组（可用反证法证明）。根据这个思想，我们只需要以此累加数组元素，并将和与0比较，如果小于0，则需要在剩下的元素中重新寻找是否存在最大子数组，如果不小于0，则与保存的最大子数组值进行比较，如果大于最大子数组值，则更新最大子数组值。这样只需要一次遍历就能找到最大子数组，这种解法的算法复杂度为O(n)。根据这个思路，解决这个问题的算法复杂度代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> n = nums.length;</div><div class="line">        <span class="keyword">int</span> max = nums[<span class="number">0</span>];</div><div class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">            sum += nums[i];</div><div class="line">            <span class="keyword">if</span>(sum &gt; max) &#123;</div><div class="line">                max = sum;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(sum &lt; <span class="number">0</span>) &#123;</div><div class="line">                sum = <span class="number">0</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> max;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Leetcode通过了。</p>
<p><strong>解法五</strong></p>
<p>还有没有别的方法呢？答案还是肯定的。使用动态规划求解。动态规划过程是：每次决策依赖于当前状态，又随即引起状态的转移。一个决策序列就是在变化的状态中产生出来的，所以，这种多阶段最优化决策解决问题的过程就称为动态规划。 使用动态规划求解问题，最重要的就是确定动态规划三要素：（1）问题的阶段；（2）每个阶段的状态；（3）从前一个阶段转化到后一个阶段之间的递推关系。</p>
<p>1.起始阶段<code>(i=0)</code>，<code>max = nums[0]</code>；2.第<code>i(i &gt; 0)</code>个阶段，<code>max = curMax[i]</code>，<code>curMax</code>是第i个阶段的最大子序列和；3.第<code>i-1</code>和第<code>i</code>个阶段的关系，<code>curMax[i] = Math.max(curMax[i - 1] + nums[i], nums[i])</code>；4.根据前面动态规划的定义，则最大子序列和<code>max = Math.max(max, curMax[i])</code>。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class Solution &#123;</div><div class="line">	public int maxSubArray(int[] nums) &#123;</div><div class="line">		int n = nums.length;</div><div class="line">		//curMax是当前的最大子序列和</div><div class="line">		int[] curMax = new int[n];</div><div class="line">		curMax[0] = nums[0];</div><div class="line">		int max = nums[0];</div><div class="line">		for (int i = 1; i &lt; n; i ++) &#123;</div><div class="line">			curMax[i] = Math.max(curMax[i - 1] + nums[i], nums[i]);</div><div class="line">			max = Math.max(max, curMax[i]);</div><div class="line">		&#125;</div><div class="line">		return max;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Leetcode通过了。</p>
<p><strong>分析解法四与解法五</strong></p>
<p>其实解法四与解法五是一致的，解法四中的sum等于解法五中的curMax[i]，解法五中如果<code>curMax[i-1]</code>小于0，则<code>curMax[i] = nums[i]</code>，而在解法四中由于第<code>i-1</code>次时<code>sum=curMax[i-1]</code>，因此需要将sum重置为0，则<code>sum + nums[i] = nums[i]</code>，与<code>curMax[i] = nums[i]</code>是一致的。如果解法五中<code>curMax[i-1]</code>大于等于0，则curMax[i] = <code>curMax[i - 1] + nums[i]</code>，此时方法四中<code>sum = sum + nums[i]</code>。而第<code>i-1</code>次时，<code>sum = curMax[i - 1]</code>，两者也是等价的。解法五中的curMax[0]替换为sum，curMax[i]替换为sum，将<code>curMax[i] = Math.max(curMax[i - 1] + nums[i], nums[i]);</code>变换为<code>sum  += nums[i];</code>和<code>if(sum &lt; 0) {    sum = 0; }</code>，即可将代码从解法五变换为解法四的代码。</p>
]]></content>
    
    <summary type="html">
    
      Leetcode53——最大子数组问题
    
    </summary>
    
      <category term="基础算法" scheme="noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux内存分析与清理</title>
    <link href="noahsnail.com/2017/03/09/2017-3-9-Linux%E5%86%85%E5%AD%98%E5%88%86%E6%9E%90%E4%B8%8E%E6%B8%85%E7%90%86/"/>
    <id>noahsnail.com/2017/03/09/2017-3-9-Linux内存分析与清理/</id>
    <published>2017-03-09T03:00:25.000Z</published>
    <updated>2017-03-09T09:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-free命令"><a href="#1-free命令" class="headerlink" title="1. free命令"></a>1. free命令</h2><p>Linux中查看内存的命令为<code>free</code>，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ free -h</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:            62G        4.9G        627M        520K         57G         57G</div><div class="line">Swap:          4.0G        335M        3.7G</div></pre></td></tr></table></figure>
<p>每一列的解释如下：</p>
<ul>
<li>total：内存总数</li>
<li>used：已经使用的内存数</li>
<li>free：空闲的内存数</li>
<li>shared：当前已经废弃不用</li>
<li>buffers Buffer：缓存内存数</li>
<li>cached Page：缓存内存数</li>
</ul>
<p>可以看出<code>buff/cache</code>占用的内存份额很大，有时候程序运行结束后，大量内存仍位于<code>buff/cache</code>中，有时运行程序会导致内存不足，因此需要将这部分内存释放出来。</p>
<h2 id="2-Linux中的缓存分类"><a href="#2-Linux中的缓存分类" class="headerlink" title="2. Linux中的缓存分类"></a>2. Linux中的缓存分类</h2><p>要清理Linux中的cache，首先要明白buff和cache的区别(free中的buff/cache)，以及pagecache，dentries和inodes的区别。</p>
<ul>
<li><p>buff<br>作为buffer cache的内存，是块设备的读写缓冲区</p>
</li>
<li><p>cache<br>作为page cache的内存，文件系统的cache。Buffer cache是针对磁盘块的缓存，也就是在没有文件系统的情况下，直接对磁盘进行操作的数据会缓存到buffer cache中。</p>
</li>
<li><p>pagecache</p>
</li>
</ul>
<p>页面缓存（pagecache）可以包含磁盘块的任何内存映射。这可以是缓冲I/O，内存映射文件，可执行文件的分页区域——操作系统可以从文件保存在内存中的任何内容。Page cache实际上是针对文件系统的，是文件的缓存，在文件层面上的数据会缓存到page cache。</p>
<ul>
<li><p>dentries<br>表示目录的数据结构</p>
</li>
<li><p>inodes<br>表示文件的数据结构 </p>
</li>
</ul>
<p><strong>总结：</strong>cached是cpu与内存间的，buffer是内存与磁盘间的，都是为了解决速度不对等的问题。buffer是即将要被写入磁盘的，而cache是被从磁盘中读出来的。</p>
<p>缓存（cached）是把读取过的数据保存起来，重新读取时若命中（找到需要的数据）就不要去读硬盘了，若没有命中就读硬盘。其中的数据会根据读取频率进行组织，把最频繁读取的内容放在最容易找到的位置，把不再读的内容不断往后排，直至从中删除。</p>
<p>缓冲（buffers）是根据磁盘的读写设计的，把分散的写操作集中进行，减少磁盘碎片和硬盘的反复寻道，从而提高系统性能。linux有一个守护进程定期清空缓冲内容（即写入磁盘），也可以通过sync命令手动清空缓冲。</p>
<h2 id="3-清理cache"><a href="#3-清理cache" class="headerlink" title="3. 清理cache"></a>3. 清理cache</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/proc/sys/vm/drop_caches (since Linux 2.6.16)</div><div class="line">Writing to this file causes the kernel to drop clean caches,dentries and inodes from memory, causing that memory to become free.</div><div class="line">To free pagecache, use echo 1 &gt; /proc/sys/vm/drop_caches;</div><div class="line">to free dentries and inodes, use echo 2 &gt; /proc/sys/vm/drop_caches;</div><div class="line">to free pagecache, dentries and inodes, use echo 3 &gt; /proc/sys/vm/drop_caches.</div><div class="line">Because this is a non-destructive operation and dirty objects are not freeable, the user should run sync first.</div></pre></td></tr></table></figure>
<p>/proc是一个虚拟文件系统，我们可以通过对它的读写操作做为与kernel实体间进行通信的一种手段。也就是说可以通过修改/proc中的文件，来对当前kernel的行为做出调整。那么我们可以通过调整/proc/sys/vm/drop_caches来释放内存。<code>/proc/sys/vm/drop_caches</code>中的默认值为0，值为1时表示可以释放pagecache缓存，值为2时可以释放pagecache和inode缓存，值为3时可以释放pagecache, dentries和inodes缓存。当然在释放内存之前需要执行<code>sync</code>命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sync &amp;&amp; echo 1 &gt; /proc/sys/vm/drop_caches</div><div class="line">sync &amp;&amp; echo 2 &gt; /proc/sys/vm/drop_caches</div><div class="line">sync &amp;&amp; echo 3 &gt; /proc/sys/vm/drop_caches</div></pre></td></tr></table></figure>
<p>参考资料</p>
<p>1.<a href="http://www.linuxde.net/2011/07/402.html" target="_blank" rel="external">http://www.linuxde.net/2011/07/402.html</a></p>
]]></content>
    
    <summary type="html">
    
      Linux内存分析与清理
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>统计学习方法(一)——统计学习方法概论</title>
    <link href="noahsnail.com/2017/03/08/2017-3-8-%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95(%E4%B8%80)%E2%80%94%E2%80%94%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95%E6%A6%82%E8%AE%BA/"/>
    <id>noahsnail.com/2017/03/08/2017-3-8-统计学习方法(一)——统计学习方法概论/</id>
    <published>2017-03-08T01:12:48.000Z</published>
    <updated>2017-03-14T03:00:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h1 id="1-统计学习方法概论"><a href="#1-统计学习方法概论" class="headerlink" title="1. 统计学习方法概论"></a>1. 统计学习方法概论</h1><p>本文是统计学习方法（李航）第一章的学习总结。</p>
<h2 id="1-1-统计学习"><a href="#1-1-统计学习" class="headerlink" title="1.1 统计学习"></a>1.1 统计学习</h2><p><strong>1.统计学习的特点</strong></p>
<p>统计学习（statistical learning）是关于计算机基于<strong>数据</strong>构建<strong>概率统计模型</strong>并运用模型对数据进行预测和分析的一门学科。统计学习也称为统计机器学习（statistical machine learning）。现在人们提到的机器学习往往是指统计机器学习。</p>
<p>统计学习的特点：(1)以计算机和网络为平台；(2)以数据为研究对象，是数据驱动的学科；(3)目的是对数据进行分析和预测；(4)以方法为中心，构建模型并应用模型进行分析和预测；(5)是概率论、统计学、信息论、优化理论和计算机科学等多个领域的交叉学科。</p>
<p><strong>2.统计学习的对象</strong></p>
<p>统计学习的对象是<strong>数据</strong>（data）。它从数据出发，提取数据特征，抽象出数据模型，根据模型对数据进行分析和预测。统计学习的前提是假设同类数据（具有某种共同性质）具有一定的统计规律性。统计学习过程中，以变量或变量组表示数据，数据分为连续变量和离散变量表示的类型。</p>
<p><strong>3.统计学习的目的</strong></p>
<p>统计学习总的目标就是考虑学习什么的模型和如何学习模型，以使模型能够对数据进行准确的预测和分析，同时也要考虑学习效率。</p>
<p><strong>4.统计学习的方法</strong></p>
<p>统计学习分为监督学习（supervised learning）、非监督学习（unsupervised learning）、半监督学习(semi-supervised learning)和强化学习(reinforcement learning)等。统计学习方法包括模型的假设空间、模型选择的准则及模型选择的算法，称为统计学习方法的三要素，简称模型（model）、策略（strategy）和算法（algorithm）。</p>
<p><strong>5.统计学习的研究</strong></p>
<p>统计学习的研究包括统计学习方法（算法创新）、统计学习理论（算法效率及有效性）及统计学习应用（解决问题）三个方面。</p>
<p><strong>6.统计学习的重要性</strong></p>
<p>统计学习的重要性体现在三个方面：（1）统计学习是处理海量数据的有效方法。（2）统计学习是计算机智能化的有效手段。（3）统计学习是计算机发展的重要组成部分。</p>
<h2 id="1-2-监督学习"><a href="#1-2-监督学习" class="headerlink" title="1.2 监督学习"></a>1.2 监督学习</h2><p>监督学习的任务是学习一个模型，使模型能够对任意给定的输入，对其相应的输出做出一个好的预测。</p>
<h3 id="1-2-1-基本概念"><a href="#1-2-1-基本概念" class="headerlink" title="1.2.1 基本概念"></a>1.2.1 基本概念</h3><p><strong>1.输入空间、特征空间与输出空间</strong></p>
<p>在监督学习中，输入与输出的所有可能的取值集合分别称为输入空间（input space）和输出空间（output space）。通常输出空间远远小于输入空间。</p>
<p>每个具体的输入是一个实例（instance），通常由特征向量（feature vector）表示。所有特征向量存在的空间称为特征空间（feature space）。特征空间的每一维对应一个特征。当输入空间与特征空间不同时，需要将实例从输入空间映射到特征空间，模型实际上都是定义在特征空间上的。</p>
<p>监督学习过程中，将输入和输出看作是定义在输入空间和输出空间上的<strong>随机变量</strong>的取值。习惯上输入变量写作<code>X</code>，其取值写作<code>x</code>，输出变量写作<code>Y</code>，其取值写作<code>y</code>。输入实例的<code>x</code>的特征向量记作</p>
<p>$$x = (x^{(1)}, x^{(2)},…, x^{(i)} ,…,x^{(n)})^T$$</p>
<p>$x^{(i)}$表示向量<code>x</code>的第<code>i</code>个特征，而$x_i$表示第<code>i</code>个输入变量。</p>
<p>$$x_i = (x_i^{(1)}, x_i^{(2)},…, x_i^{(i)} ,…,x_i^{(n)})^T$$</p>
<p>监督学习从训练数据中学习模型，对测试数据进行预测。训练集通常表示为</p>
<p>$$T = {(x_1,y_1),(x_2,y_2),…,(x_N,y_N)}$$</p>
<p>$(x_i,y_i)$表示样本或样本点。</p>
<p>输入变量和输出变量可以是离散型的，也可以是连续型的。输入变量和输出变量都是连续型变量的预测问题称为回归问题；输出变量为有限个离散型变量的预测问题称为分类问题；输入变量和输出变量均为变量序列的预测问题称为标注问题。</p>
<p><strong>2.联合概率分布</strong></p>
<p>监督学习假设输入与输出的随机变量X和Y遵循联合概率分布<code>P(X,Y)</code>，<code>P(X,Y)</code>表示分布函数或分布密度函数。训练数据和测试数据被看作是依联合概率分布<code>P(X,Y)</code>独立同分布产生的。统计学习假设数据存在一定的统计规律。</p>
<p><strong>3.假设空间</strong></p>
<p>监督学习的目的在于学习一个由输入到输出的映射，映射关系用模型表示。输入到输出的映射集合就是假设空间（hypothesis space）。简单学习的模型可以是概率模型或非概率模型。由条件概率分布<code>P(Y|X)</code>或决策函数<code>Y=f(X)</code>表示。对具体的输入进行输出预测时，写作<code>P(y|x)</code>或<code>y=f(x)</code>。</p>
<h3 id="1-2-2-问题的形式化"><a href="#1-2-2-问题的形式化" class="headerlink" title="1.2.2 问题的形式化"></a>1.2.2 问题的形式化</h3><p>监督学习利用训练数据学习模型，再用模型对测试数据进行预测。学习过程中的训练数据往往是人工给出的，因此称为监督学习。监督学习分为学习和预测两个过程，如下图：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/supervised-learning.png" alt="监督学习"></p>
<p>首先给定数据集$T={(x_1,y_1),(x_3,y_2),…,(x_N,y_N)}$，其中$(x_i,y_i)，i=1,2,…,N$，称为样本或样本点，$x_i \in X \subseteq R^n$是输入的观测值，称为输入或实例，$y_i \in Y$是输出的观测值，也称为输出。通过学习得到的模型表示为条件概率分布$P(Y|X)$和决策函数$Y=f(X)$，模型表示的是输入与输出之间的映射关系。</p>
<p>预测过程中，对于测试数据中的输入$x<em>{N+1}$,由模型$y</em>{N+1}=argmax P(y<em>{N+1}|x</em>{N+1})$或$y<em>{N+1}=f(x</em>{N+1})$给出对应的输出$y_{N+1}$。</p>
<h2 id="1-3-统计学习三要素"><a href="#1-3-统计学习三要素" class="headerlink" title="1.3 统计学习三要素"></a>1.3 统计学习三要素</h2>]]></content>
    
    <summary type="html">
    
      统计学习方法(一)——统计学习方法概论
    
    </summary>
    
      <category term="机器学习" scheme="noahsnail.com/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="统计学习方法" scheme="noahsnail.com/tags/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E4%B9%A0%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Linux查询CPU信息</title>
    <link href="noahsnail.com/2017/03/06/2017-3-6-Linux%E6%9F%A5%E8%AF%A2CPU%E4%BF%A1%E6%81%AF/"/>
    <id>noahsnail.com/2017/03/06/2017-3-6-Linux查询CPU信息/</id>
    <published>2017-03-06T05:44:15.000Z</published>
    <updated>2017-03-06T10:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h2><ul>
<li><p>物理CPU数<br>主板上实际插入的CPU数量，可以数不重复的physical id 有几个（physical id）</p>
</li>
<li><p>CPU核数<br>单块CPU上面能处理数据的芯片组的数量，如双核、四核等（CPU cores）</p>
</li>
<li><p>逻辑CPU数<br>一般情况下，逻辑CPU数=物理CPU个数<em>每颗核数，如果不相等的话，则表示服务器的CPU支持超线程技术（简单来说，它可使处理器中的1颗内核如2颗内核那样在操作系统中发挥作用。这样一来，操作系统可使用的执行资源扩大了一倍，大幅提高了系统的整体性能，此时逻辑CPU=物理CPU个数</em>每颗核数*2）</p>
</li>
<li><p>它们之间的关系<br>总核数 = 物理CPU个数 <em> 每颗物理CPU的核数<br>总逻辑CPU数 = 物理CPU个数 </em> 每颗物理CPU的核数 * 超线程数</p>
</li>
</ul>
<h2 id="2-查看物理CPU的个数"><a href="#2-查看物理CPU的个数" class="headerlink" title="2.查看物理CPU的个数"></a>2.查看物理CPU的个数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/cpuinfo |grep &quot;physical id&quot;|sort |uniq|wc -l</div><div class="line">2</div></pre></td></tr></table></figure>
<h2 id="3-查看逻辑CPU个数"><a href="#3-查看逻辑CPU个数" class="headerlink" title="3.查看逻辑CPU个数"></a>3.查看逻辑CPU个数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/cpuinfo |grep &quot;processor&quot;|wc -l</div><div class="line">24</div></pre></td></tr></table></figure>
<h2 id="4-查看CPU核数"><a href="#4-查看CPU核数" class="headerlink" title="4.查看CPU核数"></a>4.查看CPU核数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/cpuinfo |grep &quot;cores&quot;|uniq</div><div class="line">cpu cores       : 6</div></pre></td></tr></table></figure>
<h2 id="5-查看CPU型号信息"><a href="#5-查看CPU型号信息" class="headerlink" title="5.查看CPU型号信息"></a>5.查看CPU型号信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c</div><div class="line">     24  Intel(R) Xeon(R) CPU E5-2630L v2 @ 2.40GHz</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux查询CPU信息
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>LeNet神经网络</title>
    <link href="noahsnail.com/2017/03/02/2017-3-2-LeNet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>noahsnail.com/2017/03/02/2017-3-2-LeNet神经网络/</id>
    <published>2017-03-02T05:50:43.000Z</published>
    <updated>2017-03-09T02:59:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-LeNet神经网络介绍"><a href="#1-LeNet神经网络介绍" class="headerlink" title="1. LeNet神经网络介绍"></a>1. LeNet神经网络介绍</h2><p>LeNet神经网络由深度学习三巨头之一的Yan LeCun提出，他同时也是卷积神经网络 (CNN，Convolutional Neural Networks)之父。LeNet主要用来进行手写字符的识别与分类，并在美国的银行中投入了使用。LeNet的实现确立了CNN的结构，现在神经网络中的许多内容在LeNet的网络结构中都能看到，例如卷积层，Pooling层，ReLU层。虽然LeNet早在20世纪90年代就已经提出了，但由于当时缺乏大规模的训练数据，计算机硬件的性能也较低，因此LeNet神经网络在处理复杂问题时效果并不理想。虽然LeNet网络结构比较简单，但是刚好适合神经网络的入门学习。</p>
<h2 id="2-LeNet神经网络结构"><a href="#2-LeNet神经网络结构" class="headerlink" title="2. LeNet神经网络结构"></a>2. LeNet神经网络结构</h2><p>LeNet的神经网络结构图如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/LeNet_1.jpg" alt="LeNet网络图"></p>
<p><img src="http://ocs628urt.bkt.clouddn.com/LeNet_2.png" alt="LeNet网络拓扑图"></p>
<p><img src="http://ocs628urt.bkt.clouddn.com/LeNet.png" alt="LeNet网络结构图"></p>
<p>LeNet网络的执行流程图如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/conv_all.png" alt="LeNet图像处理流程"></p>
<h3 id="2-1-LeNet第一层（卷积运算）"><a href="#2-1-LeNet第一层（卷积运算）" class="headerlink" title="2.1 LeNet第一层（卷积运算）"></a>2.1 LeNet第一层（卷积运算）</h3><p>接下来我们来具体的一层层的分析LeNet的网络结构。首先要了解图像（输入数据）的表示。在LeNet网络中，输入图像是手写字符，图像的表示形式为二维数据矩阵，如下图所示：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/8-gif.gif" alt="图像的表示"></p>
<p>LeNet网络除去输入输出层总共有六层网络。第一层是卷积层（C1层），卷积核的大小为<code>5*5</code>，卷积核数量为<code>6</code>个，输入图像的大小为<code>32*32</code>，因此输入数据在进行第一层卷积之后，输出结果为大小为<code>28*28</code>，数量为<code>6</code>个的feature map。卷积操作如下面两幅图所示：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/conv.gif" alt="卷积演示"></p>
<p><img src="http://ocs628urt.bkt.clouddn.com/giphy.gif" alt="卷积演示"></p>
<p>卷积操作的过程可描述为：卷积核在图像上滑动，滑动步长为1（即每次移动一格，水平方向从左到右，到最右边之后再从最左边开始，向下移动一格，重复从左到右滑动），当卷积核与图像的一个局部块重合时进行卷积运行，卷积计算方式为图像块对应位置的数与卷积核对应位置的数相乘，然后将所有相乘结果相加即为feature map的值，<strong>相乘累加之后的结果位于卷积核中心点的位置</strong>，因此如果是<code>3*3</code>的卷积核，feature map比原图像在水平和垂直方向上分别减少两行（上下各一行）和两列（左右各一列），因此上面图像原图为<code>5*5</code>，卷积核为<code>3*3</code>，卷积结果大小为<code>3*3</code>，即<code>(5-2)*(5-2)</code>，如果卷积核为<code>5*5</code>，则卷积结果大小为<code>(5-4)*(5-4)</code>。上图中的卷积核为：<br><img src="http://ocs628urt.bkt.clouddn.com/conv_kernel.png" alt="卷积核"></p>
<p>由于神经网络层与层的结构是通过连接来实现的，因此输入层与第一个卷积层的连接数量应为<code>(32-2-2)*(32-2-2)*(5*5+1)= 28*28*156 =122304</code>。</p>
<p>卷积的作用主要是：通过卷积运算，可以使原信号特征增强，并且降低噪音。在图像上卷积之后主要是减少图像噪声，提取图像的特征。例如sobel算子就是一种卷积运算，主要是提取图像的边缘特征。卷积网络能很好地适应图像的平移不变性：例如稍稍移动一幅猫的图像，它仍然是一幅猫的图像。卷积操作保留了图像块之间的空间信息，进行卷积操作的图像块之间的相对位置关系没有改变。图像在不同卷积核上进行卷积之后的效果图如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/screen-shot.png" alt="同一幅图像用不同卷积核处理的效果"></p>
<h3 id="2-2-LeNet第二层（pooling运算）"><a href="#2-2-LeNet第二层（pooling运算）" class="headerlink" title="2.2 LeNet第二层（pooling运算）"></a>2.2 LeNet第二层（pooling运算）</h3><p>图像在LeNet网络上进行第一层卷积之后，结果为大小为<code>28*28</code>，数量为<code>6</code>个的feature map。LeNet网络的第二层为pooling层（S2层），也称为下采样。在图像处理中，下采样之后，图像的大小会变为原来的<code>1/4</code>，即水平方向和垂直方向上图像大小分别减半。Pooling有多种，这里主要介绍两种，max-pooling和average-pooling。max-pooling即为从四个元素中选取一个最大的来表示这四个元素，average-pooling则用四个元素的平均值来表示这四个元素。Pooling示意图如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/Pooling.png" alt="Pooling示意图"></p>
<p><img src="http://ocs628urt.bkt.clouddn.com/screen-shot-am.png" alt="Pooling示意图"></p>
<p>在LeNet在进行第二层Pooling运算后，输出结果为<code>14*14</code>的<code>6</code>个feature map。其连接数为<code>(2*2+1) * 14 * 14 *6 = 5880</code>。Pooling层的主要作用就是减少数据，降低数据纬度的同时保留最重要的信息。在数据减少后，可以减少神经网络的纬度和计算量，可以防止参数太多过拟合。</p>
<h3 id="2-3-LeNet第三层（卷积运算）"><a href="#2-3-LeNet第三层（卷积运算）" class="headerlink" title="2.3 LeNet第三层（卷积运算）"></a>2.3 LeNet第三层（卷积运算）</h3><p>LeNet第三层（C3层）也是卷积层，卷积核大小仍为<code>5*5</code>，不过卷积核的数量变为<code>16</code>个。第三层的输入为<code>14*14</code>的<code>6</code>个feature map，卷积核大小为<code>5*5</code>，因此卷积之后输出的feature map大小为<code>10*10</code>，由于卷积核有<code>16</code>个，因此希望输出的feature map也为<code>16</code>个，但由于输入有<code>6</code>个feature map，因此需要进行额外的处理。输入的<code>6</code>个feature map与输出的<code>16</code>个feature map的关系图如下：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/lenet-c3table.png" alt="S2层与C3层的关系图"></p>
<p>如上图所示，第一个卷积核处理前三幅输入的feature map，得出一个新的feature map。</p>
<h3 id="2-4-LeNet第四层（Pooling运算）"><a href="#2-4-LeNet第四层（Pooling运算）" class="headerlink" title="2.4 LeNet第四层（Pooling运算）"></a>2.4 LeNet第四层（Pooling运算）</h3><p>上一层卷积运算之后，结果为大小为<code>10*10</code>的<code>16</code>个feature map，因此在第四层（S4层）进行pooling运算之后，输出结果为<code>16</code>个大小为<code>10*10</code>的feature map。</p>
<h3 id="2-5-LeNet第五层"><a href="#2-5-LeNet第五层" class="headerlink" title="2.5 LeNet第五层"></a>2.5 LeNet第五层</h3><p>在描述LeNet第五层之前，先要了解ReLU的概念，因为在第五层卷积之后，卷积结果需要进行ReLU操作。</p>
<p><strong>ReLU介绍：</strong></p>
<p>ReLU，全称Rectified Linear Unit，它是一个非线性操作，主要是将卷积之后feature map中的负数，变为0，公式为<code>Output = max(0, Input)</code>，对feature map中的每个值都进行这个操作。卷积操作是线性操作，而我们希望卷积神经网络除了能进行线性操作之外，也能进行非线性操作。此外，因为正常情况下图像像素值的变化范围为<code>0~255</code>，不应该出现负数。ReLU操作效果如图：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/screen-shot-pm.png" alt="ReLU操作"></p>
<p>当然除了，ReLU操作，还有一些其它操作，例如tanh或sigmoid，但实践证明，ReLU在大多数情况下比其它的表现更好。</p>
<p>LeNet神经网络结构在Caffe中的配置文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div></pre></td><td class="code"><pre><div class="line">name: &quot;LeNet&quot;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;mnist&quot;</div><div class="line">  type: &quot;Data&quot;</div><div class="line">  top: &quot;data&quot;</div><div class="line">  top: &quot;label&quot;</div><div class="line">  include &#123;</div><div class="line">    phase: TRAIN</div><div class="line">  &#125;</div><div class="line">  transform_param &#123;</div><div class="line">    scale: 0.00390625</div><div class="line">  &#125;</div><div class="line">  data_param &#123;</div><div class="line">    source: &quot;examples/mnist/mnist_train_lmdb&quot;</div><div class="line">    batch_size: 64</div><div class="line">    backend: LMDB</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;mnist&quot;</div><div class="line">  type: &quot;Data&quot;</div><div class="line">  top: &quot;data&quot;</div><div class="line">  top: &quot;label&quot;</div><div class="line">  include &#123;</div><div class="line">    phase: TEST</div><div class="line">  &#125;</div><div class="line">  transform_param &#123;</div><div class="line">    scale: 0.00390625</div><div class="line">  &#125;</div><div class="line">  data_param &#123;</div><div class="line">    source: &quot;examples/mnist/mnist_test_lmdb&quot;</div><div class="line">    batch_size: 100</div><div class="line">    backend: LMDB</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;conv1&quot;</div><div class="line">  type: &quot;Convolution&quot;</div><div class="line">  bottom: &quot;data&quot;</div><div class="line">  top: &quot;conv1&quot;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 1</div><div class="line">  &#125;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 2</div><div class="line">  &#125;</div><div class="line">  convolution_param &#123;</div><div class="line">    num_output: 20</div><div class="line">    kernel_size: 5</div><div class="line">    stride: 1</div><div class="line">    weight_filler &#123;</div><div class="line">      type: &quot;xavier&quot;</div><div class="line">    &#125;</div><div class="line">    bias_filler &#123;</div><div class="line">      type: &quot;constant&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;pool1&quot;</div><div class="line">  type: &quot;Pooling&quot;</div><div class="line">  bottom: &quot;conv1&quot;</div><div class="line">  top: &quot;pool1&quot;</div><div class="line">  pooling_param &#123;</div><div class="line">    pool: MAX</div><div class="line">    kernel_size: 2</div><div class="line">    stride: 2</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;conv2&quot;</div><div class="line">  type: &quot;Convolution&quot;</div><div class="line">  bottom: &quot;pool1&quot;</div><div class="line">  top: &quot;conv2&quot;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 1</div><div class="line">  &#125;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 2</div><div class="line">  &#125;</div><div class="line">  convolution_param &#123;</div><div class="line">    num_output: 50</div><div class="line">    kernel_size: 5</div><div class="line">    stride: 1</div><div class="line">    weight_filler &#123;</div><div class="line">      type: &quot;xavier&quot;</div><div class="line">    &#125;</div><div class="line">    bias_filler &#123;</div><div class="line">      type: &quot;constant&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;pool2&quot;</div><div class="line">  type: &quot;Pooling&quot;</div><div class="line">  bottom: &quot;conv2&quot;</div><div class="line">  top: &quot;pool2&quot;</div><div class="line">  pooling_param &#123;</div><div class="line">    pool: MAX</div><div class="line">    kernel_size: 2</div><div class="line">    stride: 2</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;ip1&quot;</div><div class="line">  type: &quot;InnerProduct&quot;</div><div class="line">  bottom: &quot;pool2&quot;</div><div class="line">  top: &quot;ip1&quot;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 1</div><div class="line">  &#125;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 2</div><div class="line">  &#125;</div><div class="line">  inner_product_param &#123;</div><div class="line">    num_output: 500</div><div class="line">    weight_filler &#123;</div><div class="line">      type: &quot;xavier&quot;</div><div class="line">    &#125;</div><div class="line">    bias_filler &#123;</div><div class="line">      type: &quot;constant&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;relu1&quot;</div><div class="line">  type: &quot;ReLU&quot;</div><div class="line">  bottom: &quot;ip1&quot;</div><div class="line">  top: &quot;ip1&quot;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;ip2&quot;</div><div class="line">  type: &quot;InnerProduct&quot;</div><div class="line">  bottom: &quot;ip1&quot;</div><div class="line">  top: &quot;ip2&quot;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 1</div><div class="line">  &#125;</div><div class="line">  param &#123;</div><div class="line">    lr_mult: 2</div><div class="line">  &#125;</div><div class="line">  inner_product_param &#123;</div><div class="line">    num_output: 10</div><div class="line">    weight_filler &#123;</div><div class="line">      type: &quot;xavier&quot;</div><div class="line">    &#125;</div><div class="line">    bias_filler &#123;</div><div class="line">      type: &quot;constant&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;accuracy&quot;</div><div class="line">  type: &quot;Accuracy&quot;</div><div class="line">  bottom: &quot;ip2&quot;</div><div class="line">  bottom: &quot;label&quot;</div><div class="line">  top: &quot;accuracy&quot;</div><div class="line">  include &#123;</div><div class="line">    phase: TEST</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">layer &#123;</div><div class="line">  name: &quot;loss&quot;</div><div class="line">  type: &quot;SoftmaxWithLoss&quot;</div><div class="line">  bottom: &quot;ip2&quot;</div><div class="line">  bottom: &quot;label&quot;</div><div class="line">  top: &quot;loss&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>参考资料：</p>
<p>1.<a href="https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/" target="_blank" rel="external">https://ujjwalkarn.me/2016/08/11/intuitive-explanation-convnets/</a></p>
]]></content>
    
    <summary type="html">
    
      LeNet神经网络
    
    </summary>
    
      <category term="深度学习" scheme="noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>AlexNet神经网络</title>
    <link href="noahsnail.com/2017/03/01/2017-3-1-AlexNet%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%88%86%E6%9E%90/"/>
    <id>noahsnail.com/2017/03/01/2017-3-1-AlexNet神经网络分析/</id>
    <published>2017-03-01T11:02:40.000Z</published>
    <updated>2017-03-02T05:51:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-AlexNet神经网络介绍"><a href="#1-AlexNet神经网络介绍" class="headerlink" title="1. AlexNet神经网络介绍"></a>1. AlexNet神经网络介绍</h2>]]></content>
    
    <summary type="html">
    
      AlexNet神经网络
    
    </summary>
    
      <category term="深度学习" scheme="noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Caffe的solver参数介绍</title>
    <link href="noahsnail.com/2017/02/23/2017-2-23-Caffe%E7%9A%84solver%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D/"/>
    <id>noahsnail.com/2017/02/23/2017-2-23-Caffe的solver参数介绍/</id>
    <published>2017-02-23T06:41:45.000Z</published>
    <updated>2017-03-01T07:42:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Parameters"><a href="#1-Parameters" class="headerlink" title="1. Parameters"></a>1. Parameters</h2><p><code>solver.prototxt</code>文件是用来告诉caffe如何训练网络的。<code>solver.prototxt</code>的各个参数的解释如下：</p>
<ul>
<li>base_lr<br>这个参数是用来表示网络的初始学习率的。这个值是一个浮点型实数。</li>
<li>lr_policy<br>这个参数是用来表示学习率随着时间是如何变化的。值是字符串，需要加<code>&quot;&quot;</code>。学习率变化的可选参数有：<br>“step”——需要设置<code>stepsize</code>。根据<code>gamma</code>参数和<code>stepsize</code>参数来降低学习率，<code>base_lr * gamma ^ (floor(iter / stepsize))</code>。<code>iter</code>是当前迭代次数。学习率每迭代<code>stepsize</code>次变化一次。<br>“multistep”——与<code>step</code>类似，需要设置<code>stepvalue</code>，学习率根据<code>stepvalue</code>进行变化。<br>“fixed”——学习率<code>base_lr</code>保持不变。<br>“inv”——学习率变化公式为<code>base_lr * (1 + gamma * iter) ^ (- power)</code><br>“exp”——学习率变化公式为<code>base_lr * gamma ^ iter}</code><br>“poly”——学习率以多项式形式衰减，到最大迭代次数时降为0。学习率变化公式为<code>base_lr * (1 - iter/max_iter) ^ (power)</code>。<br>“sigmoid”——学习率以S型曲线形式衰减，学习率变化公式为<code>base_lr * (1 / (1 + exp(-gamma * (iter - stepsize))))</code>。</li>
<li>gamma<br>这个参数表示学习率每次的变化程度，值为实数。</li>
<li>stepsize<br>这个参数表示什么时候应该进行训练的下一过程，值为正整数。主要用在<code>lr_policy</code>为<code>step</code>的情况。</li>
<li>stepvalue<br>这个参数表示什么时候应该进行训练的下一过程，值为正整数。主要用在<code>lr_policy</code>为<code>multistep</code>的情况。</li>
<li>max_iter<br>这个参数表示训练神经网络迭代的最大次数，值为正整数。</li>
<li>momentum<br>这个参数表示在新的计算中要保留的前面的权重数量，值为真分数，通常设为0.9。</li>
<li>weight_decay<br>这个参数表示对较大权重的惩罚（正则化）因子。值为真分数。<br>This parameter indicates the factor of (regularization) penalization of large weights. This value is a often a real fraction.</li>
<li>solver_mode<br>这个参数用来表示求解神经网络的模式——值为CPU or GPU。</li>
<li>snapshot<br>这个参数用来表示每迭代多少次就应该保存snapshot的<code>model</code>和<code>solverstate</code>，值为正整数。</li>
<li>snapshot_prefix:<br>这个参数用来表示保存snapshot时<code>model</code>和<code>solverstate</code>的前缀，值为带引号的字符串。</li>
<li>net:<br>这个参数表示训练网络所在的位置，值为带引号的字符串。</li>
<li>test_iter<br>这个参数表示<br>这个参数表示每个test_interval进行多少次test迭代，值为正整数。</li>
<li>test_interval<br>这个参数表示什么时候进行数据的测试，值为正整数。</li>
<li>display<br>这个参数用来表示什么时候将输出结果打印到屏幕上，值为正整数，表示迭代次数。</li>
<li>type<br>这个参数表示训练神经网络采用的反向传播算法，值为带引号的字符串。可选的值有：<br>Stochastic Gradient Descent “SGD”——随机梯度下降，默认值。<br>AdaDelta “AdaDelta”——一种”鲁棒的学习率方法“，是基于梯度的优化方法。<br>Adaptive Gradient “AdaGrad”——自适应梯度方法。<br>Adam “Adam”——一种基于梯度的优化方法。<br>Nesterov’s Accelerated Gradient “Nesterov”——Nesterov的加速梯度法，作为凸优化中最理想的方法，其收敛速度非常快。<br>RMSprop “RMSProp”——一种基于梯度的优化方法。</li>
</ul>
<h2 id="2-Demo"><a href="#2-Demo" class="headerlink" title="2. Demo"></a>2. Demo</h2><ul>
<li><p>lr_policy</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># lr_policy为multisetp</div><div class="line">base_lr: 0.01</div><div class="line">momentum: 0.9</div><div class="line">lr_policy: &quot;multistep&quot;</div><div class="line">gamma: 0.9</div><div class="line">stepvalue: 1000</div><div class="line">stepvalue: 2000</div><div class="line">stepvalue: 3000</div><div class="line">stepvalue: 4000</div><div class="line">stepvalue: 5000</div><div class="line"></div><div class="line"># lr_policy为step</div><div class="line">base_lr: 0.01</div><div class="line">momentum: 0.9</div><div class="line">lr_policy: &quot;step&quot;</div><div class="line">gamma: 0.9</div><div class="line">stepsize: 1000</div></pre></td></tr></table></figure>
</li>
<li><p>solver.prototxt</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">net: &quot;models/bvlc_alexnet/train_val.prototxt&quot;</div><div class="line"># 每次测试时进行1000次迭代</div><div class="line">test_iter: 1000</div><div class="line"># 每进行1000次训练执行一次测试</div><div class="line">test_interval: 1000</div><div class="line">base_lr: 0.01</div><div class="line">lr_policy: &quot;step&quot;</div><div class="line">gamma: 0.1</div><div class="line">stepsize: 100000</div><div class="line">display: 20</div><div class="line">max_iter: 450000</div><div class="line">momentum: 0.9</div><div class="line">weight_decay: 0.0005</div><div class="line">snapshot: 10000</div><div class="line">snapshot_prefix: &quot;models/bvlc_alexnet/caffe_alexnet_train&quot;</div><div class="line">solver_mode: GPU</div></pre></td></tr></table></figure>
<p>参考资料</p>
<ol>
<li><a href="http://www.cnblogs.com/denny402/p/5074049.html" target="_blank" rel="external">http://www.cnblogs.com/denny402/p/5074049.html</a></li>
<li><a href="https://github.com/BVLC/caffe/wiki/Solver-Prototxt" target="_blank" rel="external">https://github.com/BVLC/caffe/wiki/Solver-Prototxt</a></li>
<li><a href="http://stackoverflow.com/questions/30033096/what-is-lr-policy-in-caffe" target="_blank" rel="external">http://stackoverflow.com/questions/30033096/what-is-lr-policy-in-caffe</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Caffe的solver参数介绍
    
    </summary>
    
      <category term="Caffe" scheme="noahsnail.com/categories/Caffe/"/>
    
    
      <category term="Caffe" scheme="noahsnail.com/tags/Caffe/"/>
    
  </entry>
  
  <entry>
    <title>Linux的ps命令</title>
    <link href="noahsnail.com/2017/02/21/2017-2-21-Linux%E7%9A%84ps%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/02/21/2017-2-21-Linux的ps命令/</id>
    <published>2017-02-21T09:09:49.000Z</published>
    <updated>2017-02-21T14:14:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-ps命令介绍及Linux进程状态介绍"><a href="#1-ps命令介绍及Linux进程状态介绍" class="headerlink" title="1. ps命令介绍及Linux进程状态介绍"></a>1. ps命令介绍及Linux进程状态介绍</h2><p>Linux中的<code>ps</code>命令是Process Status的缩写，<code>ps</code>命令用来列出系统中当前运行的那些进程。<code>ps</code>命令可以列出当前进程的运行情况（状态、时间等信息）。在Linux系统中，进程有5中状态，在<code>ps</code>命令中分别用5个大写字母表示：</p>
<ul>
<li>R (TASK_RUNNING)，可执行状态。<br>runnable (on run queue)，正在运行或在运行队列中等待的进程 </li>
<li>S (TASK_INTERRUPTIBLE)，可中断的睡眠状态。<br>sleeping，处于这个状态的进程因为等待某某事件的发生（比如等待socket连接、等待信号量），而被挂起。</li>
<li>D (TASK_UNINTERRUPTIBLE)，不可中断的睡眠状态。<br>uninterruptible sleep (usually IO)，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号。</li>
<li>T (TASK_STOPPED or TASK_TRACED)，暂停状态或跟踪状态。<br>traced or stopped，进程处于睡眠状态，但是此刻进程是不可中断的。不可中断，指的并不是CPU不响应外部硬件的中断，而是指进程不响应异步信号。(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行)。 </li>
<li>Z (TASK_DEAD - EXIT_ZOMBIE)，退出状态，进程成为僵尸进程。<br>a defunct process，在这个退出过程中，进程占有的所有资源将被回收，除了task_struct结构（以及少数资源）。</li>
</ul>
<p>除此之外，还有<code>ps</code>命令还有一些进程状态信息：</p>
<ul>
<li>&lt; 优先级高的进程</li>
<li>l 多线程状态</li>
<li><ul>
<li>前台进程</li>
</ul>
</li>
<li>L 锁定状态</li>
<li>N 优先级低的进程</li>
</ul>
<h2 id="2-ps命令用法"><a href="#2-ps命令用法" class="headerlink" title="2. ps命令用法"></a>2. ps命令用法</h2><p>默认情况下，ps命令只会显示运行在当前控制台下的属于当前用户的进程。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$ ps</div><div class="line">  PID TTY           TIME CMD</div><div class="line">50498 ttys000    0:00.02 -bash</div><div class="line"></div><div class="line">$ ps -f</div><div class="line">  UID   PID  PPID   C STIME   TTY           TIME CMD</div><div class="line">  501 50498 50497   0  9:27下午 ttys000    0:00.08 -bash</div><div class="line"></div><div class="line">$ ps -l</div><div class="line">  UID   PID  PPID        F CPU PRI NI       SZ    RSS WCHAN     S             ADDR TTY           TIME CMD</div><div class="line">  501 50498 50497     4006   0  31  0  2466156   1648 -      S                   0 ttys000    0:00.08 -bash</div></pre></td></tr></table></figure>
<p><code>ps</code>命令的结果列信息表示如下：</p>
<ul>
<li>UID 启动进程的用户</li>
<li>PID 进程ID</li>
<li>PPID 进程的父进程ID</li>
<li>C 进程生命周期中的CPU利用率</li>
<li>TTY 运行在哪个终端</li>
<li>TIME 进程已用CPU时间</li>
<li>CMD 进程的命令</li>
<li>F 内核分配给进程的标记</li>
<li>PRI 进程的优先级</li>
<li>NI 谦让度值用来参与决定优先级</li>
<li>SZ 如果进程被换出，所需要的空间大小</li>
<li>WCHAN 进程休眠的内核函数的地址</li>
<li>ADDR 进程的内存地址</li>
<li>S 进程的状态，（O表示正在运行，S表示休眠，R表示运行，Z代表僵化，T代表停止）</li>
</ul>
<p>ps命令的常用参数有：</p>
<ul>
<li>-e，-A 显示所有进程</li>
<li>-f 显示完整格式的输出</li>
<li>-l 显示长列表</li>
<li>-a，所有进程，加上-x参数会显示没有控制终端的进程</li>
<li>-u username，显示指定用户的进程，例如<code>ps -u ltc</code></li>
<li>-aux 按照CPU或者内存用量来筛选进程，例如<code>ps -aux --sort -pcpu</code>或<code>ps -aux --sort -pmem</code></li>
<li>-C cmdlist，显示包含在cmdlist列表中的进程，例如<code>ps -C test</code></li>
<li>-L 显示进程中的线程，例如<code>ps -L 123</code>，123为进程ID</li>
<li>-j 显示任务信息</li>
<li>-H 用层级显示进程，树状结构</li>
</ul>
<p>ps命令参数还有很多，根据需要自己查询吧。</p>
]]></content>
    
    <summary type="html">
    
      Linux的ps命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>spark-submit介绍</title>
    <link href="noahsnail.com/2017/02/21/2017-2-21-spark-submit%E4%BB%8B%E7%BB%8D/"/>
    <id>noahsnail.com/2017/02/21/2017-2-21-spark-submit介绍/</id>
    <published>2017-02-21T03:28:56.000Z</published>
    <updated>2017-02-22T07:09:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-spark-submit介绍"><a href="#1-spark-submit介绍" class="headerlink" title="1. spark-submit介绍"></a>1. spark-submit介绍</h2><p><code>spark-submit</code>脚本通常位于<code>/usr/local/spark/bin</code>目录下，可以用<code>which spark-submit</code>来查看它所在的位置，<code>spark-submit</code>用来启动集群中的应用，它使用统一的提交接口支持各种类型的集群服务器。为了将应用发布到集群中，通常会将应用打成<code>.jar</code>包，在运行<code>spark-submit</code>时将<code>jar</code>包当做参数提交。</p>
<h2 id="2-spark-submit参数"><a href="#2-spark-submit参数" class="headerlink" title="2. spark-submit参数"></a>2. spark-submit参数</h2><p><code>spark-submit</code>脚本使用时有很多启动参数，启动参数说明如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">Parameters</th>
<th style="text-align:left">Description</th>
<th style="text-align:left">Demo</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--master</td>
<td style="text-align:left">集群master的URL，可以是spark://host:port, mesos://host:port, yarn, yarn-cluster,yarn-client, local</td>
<td style="text-align:left"><code>--master yarn</code></td>
</tr>
<tr>
<td style="text-align:left">--class</td>
<td style="text-align:left">主类的名称，包括完整的包路径。</td>
<td style="text-align:left"><code>--class com.ltc.test /home/ltc/spark-test.jar</code></td>
</tr>
<tr>
<td style="text-align:left">--conf</td>
<td style="text-align:left">任意的Spark配置属性，格式<code>key=value</code>，如果值包含空格，可以加引号<code>“key=value”</code>。</td>
<td style="text-align:left"><code>--conf spark.cores.max=2</code></td>
</tr>
<tr>
<td style="text-align:left">--num-executors</td>
<td style="text-align:left">该参数用于设置Spark作业总共要用多少个Executor进程来执行。Driver在向YARN集群管理器申请资源时，YARN集群管理器会尽可能按照你的设置来在集群的各个工作节点上，启动相应数量的Executor进程。</td>
<td style="text-align:left"><code>--num-executors 100</code></td>
</tr>
<tr>
<td style="text-align:left">--executor-memory</td>
<td style="text-align:left">该参数用于设置每个Executor进程的内存。Executor内存的大小，很多时候直接决定了Spark作业的性能，而且跟常见的JVM OOM异常，也有直接的关联。建议每个Executor进程的内存设置4G~8G较为合适。看看资源队列的最大内存限制是多少，num-executors乘以executor-memory，就代表了你的Spark作业申请到的总内存量</td>
<td style="text-align:left"><code>--executor-memory 4G</code></td>
</tr>
<tr>
<td style="text-align:left">--executor-cores</td>
<td style="text-align:left">该参数用于设置每个Executor进程的CPU core数量。这个参数决定了每个Executor进程并行执行task线程的能力。因为每个CPU core同一时间只能执行一个task线程，因此每个Executor进程的CPU core数量越多，越能够快速地执行完分配给自己的所有task线程。Executor的CPU core数量设置为2~4个较为合适。</td>
<td style="text-align:left"><code>--executor-cores 4</code></td>
</tr>
<tr>
<td style="text-align:left">--driver-memory</td>
<td style="text-align:left">Driver 程序运行时需要的内存， 默认为512M。</td>
<td style="text-align:left"><code>--driver-memory 1G</code></td>
</tr>
<tr>
<td style="text-align:left">--name</td>
<td style="text-align:left">应用名称</td>
<td style="text-align:left"><code>--name application</code></td>
</tr>
<tr>
<td style="text-align:left">--conf spark.default.parallelism</td>
<td style="text-align:left">该参数用于设置每个stage的默认task数量。这个参数极为重要，如果不设置可能会直接影响你的Spark作业性能。建议：Spark作业的默认task数量多一点。不设置这个参数是个错误，默认情况下，Spark根据底层HDFS的block数量来设置task的数量，默认是一个HDFS block对应一个task。通常来说，Spark默认设置的数量是偏少的（比如就几十个task），如果task数量偏少的话，就会导致前面设置的Executor参数作用不大。无论Executor进程有多少个，内存和CPU有多大，但是task只有1个或者10个，那么90%的Executor进程可能根本就没有task执行，会白白浪费了资源！Spark官网建议的设置原则是，设置该参数为num-executors * executor-cores的2~3倍较为合适，比如Executor的总CPU core数量为300个，那么设置1000个task是可以的，此时可以充分地利用Spark集群的资源。</td>
<td style="text-align:left"><code>--conf spark.default.parallelism=100</code></td>
</tr>
<tr>
<td style="text-align:left">--conf spark.storage.memoryFraction</td>
<td style="text-align:left">该参数用于设置RDD持久化数据在Executor内存中能占的比例，默认是0.6。也就是说，默认Executor 60%的内存，可以用来保存持久化的RDD数据。根据你选择的不同的持久化策略，如果内存不够时，可能数据就不会持久化，或者数据会写入磁盘。建议：如果Spark作业中，有较多的RDD持久化操作，该参数的值可以适当提高一些，保证持久化的数据能够容纳在内存中。避免内存不够缓存所有的数据，导致数据只能写入磁盘中，降低了性能。但是如果Spark作业中的shuffle类操作比较多，而持久化操作比较少，那么这个参数的值适当降低一些比较合适。此外，如果发现作业由于频繁的gc导致运行缓慢（通过spark web ui可以观察到作业的gc耗时），意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</td>
<td style="text-align:left"><code>--conf spark.storage.memoryFraction=0.5</code></td>
</tr>
<tr>
<td style="text-align:left">--conf spark.shuffle.memoryFraction</td>
<td style="text-align:left">该参数用于设置shuffle过程中一个task拉取到上个stage的task的输出后，进行聚合操作时能够使用的Executor内存的比例，默认是0.2。也就是说，Executor默认只有20%的内存用来进行该操作。shuffle操作在进行聚合时，如果发现使用的内存超出了这个20%的限制，那么多余的数据就会溢写到磁盘文件中去，此时就会极大地降低性能。建议：如果Spark作业中的RDD持久化操作较少，shuffle操作较多时，建议降低持久化操作的内存占比，提高shuffle操作的内存占比比例，避免shuffle过程中数据过多时内存不够用，必须溢写到磁盘上，降低了性能。此外，如果发现作业由于频繁的gc导致运行缓慢，意味着task执行用户代码的内存不够用，那么同样建议调低这个参数的值。</td>
<td style="text-align:left"><code>--conf spark.shuffle.memoryFraction=0.3</code></td>
</tr>
</tbody>
</table>
<p>参考资料：</p>
<ol>
<li><a href="http://www.jianshu.com/p/9d5234185d68" target="_blank" rel="external">http://www.jianshu.com/p/9d5234185d68</a></li>
<li><a href="http://colobu.com/2014/12/09/spark-submitting-applications/" target="_blank" rel="external">http://colobu.com/2014/12/09/spark-submitting-applications/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      spark-submit介绍
    
    </summary>
    
      <category term="Spark" scheme="noahsnail.com/categories/Spark/"/>
    
    
      <category term="Spark" scheme="noahsnail.com/tags/Spark/"/>
    
  </entry>
  
  <entry>
    <title>使用Python合并lmdb文件</title>
    <link href="noahsnail.com/2017/02/21/2017-2-21-%E4%BD%BF%E7%94%A8Python%E5%90%88%E5%B9%B6lmdb%E6%96%87%E4%BB%B6/"/>
    <id>noahsnail.com/2017/02/21/2017-2-21-使用Python合并lmdb文件/</id>
    <published>2017-02-21T03:11:49.000Z</published>
    <updated>2017-02-21T03:23:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>由于Caffe使用的存储图像的数据库是lmdb，因此有时候需要对lmdb文件进行操作，本文主要讲解如何用Python合并lmdb文件。没有lmdb支持的，需要用pip命令安装。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pip install lmdb</div></pre></td></tr></table></figure>
<p>代码及注释如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># coding=utf-8</span></div><div class="line"><span class="comment"># filename: merge_lmdb.py</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> lmdb</div><div class="line"></div><div class="line"><span class="comment"># 将两个lmdb文件合并成一个新的lmdb</span></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">merge_lmdb</span><span class="params">(lmdb1, lmdb2, result_lmdb)</span>:</span></div><div class="line"></div><div class="line">	<span class="keyword">print</span> <span class="string">'Merge start!'</span></div><div class="line"></div><div class="line">	<span class="comment"># env代表Environment, txn代表Transaction</span></div><div class="line"></div><div class="line">	<span class="comment"># 打开lmdb文件，读模式</span></div><div class="line">	env_1 = lmdb.open(lmdb1)</div><div class="line">	env_2 = lmdb.open(lmdb2)</div><div class="line"></div><div class="line">	<span class="comment"># 创建事务</span></div><div class="line">	txn_1 = env_1.begin()</div><div class="line">	txn_2 = env_2.begin()</div><div class="line"></div><div class="line">	<span class="comment"># 打开数据库</span></div><div class="line">	database_1 = txn_1.cursor()</div><div class="line">	database_2 = txn_2.cursor()</div><div class="line"></div><div class="line">	<span class="comment"># 打开lmdb文件，写模式，</span></div><div class="line">	env_3 = lmdb.open(result_lmdb, map_size=int(<span class="number">1e12</span>))</div><div class="line">	txn_3 = env_3.begin(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">	count = <span class="number">0</span></div><div class="line">	<span class="comment"># 遍历数据库</span></div><div class="line">	<span class="keyword">for</span> (key, value) <span class="keyword">in</span> database_1:</div><div class="line">		<span class="comment"># 将数据放到结果数据库事务中</span></div><div class="line">	    txn_3.put(key, value)</div><div class="line">	    count++</div><div class="line">	    <span class="keyword">if</span>(count % <span class="number">1000</span> == <span class="number">0</span>):</div><div class="line">	    	<span class="comment"># 将数据写入数据库，必须的，否则数据不会写入到数据库中</span></div><div class="line">	    	txn_3.commit()</div><div class="line">	    	count = <span class="number">0</span></div><div class="line">	    	txn_3 = env_3.begin(write=<span class="keyword">True</span>)</div><div class="line">	</div><div class="line">	<span class="keyword">if</span>(count % <span class="number">1000</span> != <span class="number">0</span>):</div><div class="line">		txn_3.commit()</div><div class="line">	    count = <span class="number">0</span></div><div class="line">	    txn_3 = env_3.begin(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">	<span class="keyword">for</span> (key, value) <span class="keyword">in</span> database_2:</div><div class="line">	    txn_3.put(key, value)</div><div class="line">	    <span class="keyword">if</span>(count % <span class="number">1000</span> == <span class="number">0</span>):</div><div class="line">	    	txn_3.commit()</div><div class="line">	    	count = <span class="number">0</span></div><div class="line">	    	txn_3 = env_3.begin(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">	<span class="keyword">if</span>(count % <span class="number">1000</span> != <span class="number">0</span>):</div><div class="line">		txn_3.commit()</div><div class="line">	    count = <span class="number">0</span></div><div class="line">	    txn_3 = env_3.begin(write=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">	<span class="comment"># 关闭lmdb</span></div><div class="line">	env_1.close()</div><div class="line">	env_2.close()</div><div class="line">	env_3.close()</div><div class="line"></div><div class="line">	<span class="keyword">print</span> <span class="string">'Merge success!'</span></div><div class="line"></div><div class="line">	<span class="comment"># 输出结果lmdb的状态信息，可以看到数据是否合并成功</span></div><div class="line">	<span class="keyword">print</span> env_3.stat()</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></div><div class="line">    fr = open(<span class="string">'lmdb.txt'</span>)</div><div class="line">    <span class="comment"># lmdb1的目录</span></div><div class="line">    lmdb1 = fr.readline().strip()</div><div class="line">    <span class="comment"># lmdb2的目录</span></div><div class="line">    lmdb2 = fr.readline().strip()</div><div class="line">    <span class="comment"># result lmdb的目录</span></div><div class="line">    result_lmdb = fr.readline().strip()</div><div class="line">    fr.close()</div><div class="line">    merge_lmdb(lmdb1, lmdb2, result_lmdb)</div><div class="line"></div><div class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</div><div class="line">    main()</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      使用Python合并lmdb文件
    
    </summary>
    
      <category term="Python" scheme="noahsnail.com/categories/Python/"/>
    
    
      <category term="lmdb" scheme="noahsnail.com/tags/lmdb/"/>
    
  </entry>
  
  <entry>
    <title>Linux的du命令</title>
    <link href="noahsnail.com/2017/02/20/2017-2-20-Linux%E7%9A%84du%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/02/20/2017-2-20-Linux的du命令/</id>
    <published>2017-02-20T10:09:21.000Z</published>
    <updated>2017-02-21T02:55:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p><code>du</code>命令可以显示某个特定的目录的磁盘使用情况。可以用来判断系统某个目录下是否存在超大文件。默认情况下，<code>du</code>命令会显示当前目录下所有的文件、目录和子目录的磁盘使用情况，它以磁盘的块为单位来显示每个文件或目录占了多大存储。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ du</div><div class="line">264	./Chapter14</div><div class="line">16	./Chapter15/dir.C7JEUx</div><div class="line">224	./Chapter15</div><div class="line">136	./Chapter16</div><div class="line">96	./Chapter17</div><div class="line">792	.</div></pre></td></tr></table></figure>
<p>每行开始的地方是文件或目录所占的磁盘块数，列表目录层级是自底向上，按文件、子目录、目录逐级向上。<code>du</code>命令的参数如下：</p>
<ul>
<li>-c，显示所有已列出文件的大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ du -c</div><div class="line">264	./Chapter14</div><div class="line">16	./Chapter15/dir.C7JEUx</div><div class="line">224	./Chapter15</div><div class="line">136	./Chapter16</div><div class="line">96	./Chapter17</div><div class="line">792	.</div><div class="line">792	total</div></pre></td></tr></table></figure>
<ul>
<li>-h，按人类可读的格式输出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ du -h</div><div class="line">132K	./Chapter14</div><div class="line">8.0K	./Chapter15/dir.C7JEUx</div><div class="line">112K	./Chapter15</div><div class="line"> 68K	./Chapter16</div><div class="line"> 48K	./Chapter17</div><div class="line">396K	.</div></pre></td></tr></table></figure>
<ul>
<li>-s，显示每个输出参数的总计</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ du -s</div><div class="line">792	.</div></pre></td></tr></table></figure>
<ul>
<li>查看当前目录各个文件所占的大小，不递归子目录，<code>*</code>是通配符，即显示当前目录下每个文件的大小</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ du -sh *</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux的du命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的free命令</title>
    <link href="noahsnail.com/2017/02/20/2017-2-20-Linux%E7%9A%84free%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/02/20/2017-2-20-Linux的free命令/</id>
    <published>2017-02-20T09:45:09.000Z</published>
    <updated>2017-02-21T09:07:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p><code>free</code>命令可以显示当前系统的内存使用状况，还可以显示内核使用的内存缓冲区的状况。<code>free</code>命令的参数如下：</p>
<ul>
<li>-b：以Byte为单位显示内存使用情况</li>
<li>-k：以KB为单位显示内存使用情况</li>
<li>-m：以MB为单位显示内存使用情况</li>
<li>-o：不显示缓冲区调节列</li>
<li>-s：持续观察内存使用状况</li>
<li>-t：显示内存总和列</li>
<li>-V：显示版本信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ free</div><div class="line">			  total        used        free      shared  buff/cache   available</div><div class="line">Mem:        1016100      472864      134896        4356      408340      371844</div><div class="line">Swap:             0           0           </div><div class="line"></div><div class="line"></div><div class="line">$ free -m</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:            992         461         131           4         398         363</div><div class="line">Swap:             0           0           0</div><div class="line"></div><div class="line">$ free -h</div><div class="line">              total        used        free      shared  buff/cache   available</div><div class="line">Mem:           992M        461M        131M        4.3M        398M        363M</div><div class="line">Swap:            0B          0B          0B</div></pre></td></tr></table></figure>
<p>每一列的解释如下：</p>
<ul>
<li>total：内存总数</li>
<li>used：已经使用的内存数</li>
<li>free：空闲的内存数</li>
<li>shared：当前已经废弃不用</li>
<li>buffers Buffer：缓存内存数</li>
<li>cached Page：缓存内存数</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Linux的free命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的df命令</title>
    <link href="noahsnail.com/2017/02/20/2017-2-20-Linux%E7%9A%84df%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/02/20/2017-2-20-Linux的df命令/</id>
    <published>2017-02-20T09:44:37.000Z</published>
    <updated>2017-02-20T10:04:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>有时候需要知道某个设备上还有多少磁盘空间，<code>df</code>命令就是用来查看所有磁盘的使用情况的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ df</div><div class="line">Filesystem    512-blocks      Used Available Capacity  iused    ifree %iused  Mounted on</div><div class="line">/dev/disk1     487849984 213179440 274158544    44% 26711428 34269818   44%   /</div><div class="line">devfs                363       363         0   100%      628        0  100%   /dev</div><div class="line">map -hosts             0         0         0   100%        0        0  100%   /net</div><div class="line">map auto_home          0         0         0   100%        0        0  100%   /home</div></pre></td></tr></table></figure>
<p>df命令会显示每个有数据的已挂载文件系统。命令输出如下：</p>
<ul>
<li>设备的设备文件位置</li>
<li>能容纳多少个1024字节的块(Linux)</li>
<li>已用了多少个1024字节的块(Linux)</li>
<li>还有多少个1024字节的块可用(Linux)</li>
<li>已有空间所占的比例</li>
<li>挂载点</li>
</ul>
<p><code>dh</code>命令的一个常用参数是<code>-h</code>，它会将输出中的磁盘空间按照人类可读的形式显示。</p>
]]></content>
    
    <summary type="html">
    
      Linux的df命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux统计文件夹下的文件数目</title>
    <link href="noahsnail.com/2017/02/07/2017-2-7-Linux%E7%BB%9F%E8%AE%A1%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%8B%E7%9A%84%E6%96%87%E4%BB%B6%E6%95%B0%E7%9B%AE/"/>
    <id>noahsnail.com/2017/02/07/2017-2-7-Linux统计文件夹下的文件数目/</id>
    <published>2017-02-07T01:32:21.000Z</published>
    <updated>2017-02-20T10:06:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>Linux下有三个命令：<code>ls</code>、<code>grep</code>、<code>wc</code>。通过这三个命令的组合可以统计目录下文件及文件夹的个数。</p>
<ul>
<li>统计当前目录下文件的个数（不包括目录）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -l | grep &quot;^-&quot; | wc -l</div></pre></td></tr></table></figure>
<ul>
<li>统计当前目录下文件的个数（包括子目录）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -lR| grep &quot;^-&quot; | wc -l</div></pre></td></tr></table></figure>
<ul>
<li>查看某目录下文件夹(目录)的个数（包括子目录）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ls -lR | grep &quot;^d&quot; | wc -l</div></pre></td></tr></table></figure>
<p><strong>命令解析：</strong></p>
<ul>
<li><code>ls -l</code></li>
</ul>
<p>长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录，<code>ls -lR</code>是列出所有文件，包括子目录。</p>
<ul>
<li><p><code>grep &quot;^-&quot;</code><br>过滤<code>ls</code>的输出信息，只保留一般文件，只保留目录是<code>grep &quot;^d&quot;</code>。</p>
</li>
<li><p><code>wc -l</code><br>统计输出信息的行数，统计结果就是输出信息的行数，一行信息对应一个文件，所以就是文件的个数。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      Linux统计文件夹下的文件数目
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>感知机模型</title>
    <link href="noahsnail.com/2017/02/04/2017-2-4-%E6%84%9F%E7%9F%A5%E6%9C%BA%E6%A8%A1%E5%9E%8B/"/>
    <id>noahsnail.com/2017/02/04/2017-2-4-感知机模型/</id>
    <published>2017-02-04T03:51:42.000Z</published>
    <updated>2017-02-04T05:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h1 id="1-感知机模型历史"><a href="#1-感知机模型历史" class="headerlink" title="1. 感知机模型历史"></a>1. 感知机模型历史</h1><p>Perceptron，中文翻译为感知机或感知器，是Frank Rosenblatt在1957年就职于Cornell航空实验室（Cornell Aeronautical Laboratory）时所发明的一种人工神经网络。它可以被视为一种最简单形式的前馈神经网络，是一种二元线性分类器。尽管结构简单，但感知机能够学习并解决相当复杂的问题。感知机主要的本质缺陷是它不能处理线性不可分问题。</p>
<h1 id="2-感知机定义"><a href="#2-感知机定义" class="headerlink" title="2. 感知机定义"></a>2. 感知机定义</h1><h1 id="3-感知机模型的实现"><a href="#3-感知机模型的实现" class="headerlink" title="3. 感知机模型的实现"></a>3. 感知机模型的实现</h1><h1 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h1>]]></content>
    
    <summary type="html">
    
      感知机模型
    
    </summary>
    
      <category term="Machine Learning" scheme="noahsnail.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="noahsnail.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Mysql碰到的一些命令与错误</title>
    <link href="noahsnail.com/2017/01/13/2017-1-13-Mysql%E7%A2%B0%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%91%BD%E4%BB%A4%E4%B8%8E%E9%94%99%E8%AF%AF/"/>
    <id>noahsnail.com/2017/01/13/2017-1-13-Mysql碰到的一些命令与错误/</id>
    <published>2017-01-13T07:05:31.000Z</published>
    <updated>2017-01-13T08:03:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-更新数据出错"><a href="#1-更新数据出错" class="headerlink" title="1. 更新数据出错"></a>1. 更新数据出错</h2><p>错误信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error Code: 1175. You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column To disable safe mode, toggle the option in Preferences -&gt; SQL Editor and reconnect.</div></pre></td></tr></table></figure>
<p>解决方案：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">set SQL_SAFE_UPDATES = 0;</div></pre></td></tr></table></figure>
<p>原因： Mysql有个叫SQL_SAFE_UPDATES的变量，为了数据库更新操作的安全性，此值默认为1。</p>
<h2 id="2-导入CSV文件"><a href="#2-导入CSV文件" class="headerlink" title="2. 导入CSV文件"></a>2. 导入CSV文件</h2><p>导入CSV文件的命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">load data local infile &apos;/Users/ltc/Downloads/test.csv&apos; </div><div class="line">into table `test` </div><div class="line">fields terminated by &apos;,&apos; optionally enclosed by &apos;&quot;&apos; escaped by &apos;&quot;&apos; </div><div class="line">lines terminated by &apos;\n&apos;;</div></pre></td></tr></table></figure>
<p>碰到的错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Error Code: 13. Can&apos;t get stat of &apos;/Users/ltc/Downloads/test.csv&apos; (Errcode: 13 - Permission denied)</div></pre></td></tr></table></figure>
<p><code>infile</code>前面缺少<code>local</code>，因为导入的是本地文件。</p>
<h2 id="3-清空某个table"><a href="#3-清空某个table" class="headerlink" title="3. 清空某个table"></a>3. 清空某个table</h2><p>命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">truncate table tablename;</div></pre></td></tr></table></figure>
<p>上面的命令特别之处在于能清理含有自增主键的数据库表。</p>
]]></content>
    
    <summary type="html">
    
      Mysql碰到的一些命令与错误
    
    </summary>
    
    
      <category term="Mysql" scheme="noahsnail.com/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot的应用启动与关闭</title>
    <link href="noahsnail.com/2017/01/13/2017-1-13-Spring%20Boot%E7%9A%84%E5%BA%94%E7%94%A8%E5%90%AF%E5%8A%A8%E4%B8%8E%E5%85%B3%E9%97%AD/"/>
    <id>noahsnail.com/2017/01/13/2017-1-13-Spring Boot的应用启动与关闭/</id>
    <published>2017-01-13T02:32:11.000Z</published>
    <updated>2017-01-13T08:04:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Spring-Boot应用打包"><a href="#1-Spring-Boot应用打包" class="headerlink" title="1. Spring Boot应用打包"></a>1. Spring Boot应用打包</h2><p>Spring Boot应用可以打成jar包，其中内嵌tomcat，因此可以直接启动使用。但是在Spring Boot应用启动之前，首先需要进行打包，本文讲述的是Maven工程的打包，打包需要的前提条件(pom.xml文件中的内容)是：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&lt;packaging&gt;jar&lt;/packaging&gt;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">&lt;build&gt;</div><div class="line">	&lt;plugins&gt;</div><div class="line">		&lt;plugin&gt;</div><div class="line">			&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">			&lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</div><div class="line">			&lt;configuration&gt;</div><div class="line">				&lt;mainClass&gt;com.***.Application&lt;/mainClass&gt;</div><div class="line">			&lt;/configuration&gt;</div><div class="line">			&lt;executions&gt;</div><div class="line">				&lt;execution&gt;</div><div class="line">					&lt;goals&gt;</div><div class="line">						&lt;goal&gt;repackage&lt;/goal&gt;</div><div class="line">					&lt;/goals&gt;</div><div class="line">				&lt;/execution&gt;</div><div class="line">			&lt;/executions&gt;</div><div class="line">		&lt;/plugin&gt;</div><div class="line">	&lt;/plugins&gt;</div><div class="line">&lt;/build&gt;</div><div class="line"></div><div class="line">...</div></pre></td></tr></table></figure>
<p>打包命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">mvn clean package -Dmaven.test.skip=true</div><div class="line"></div><div class="line"></div><div class="line"># Demo</div><div class="line"></div><div class="line">$ mvn clean package -Dmaven.test.skip=true</div><div class="line">[INFO] Scanning for projects...</div><div class="line">[WARNING] </div><div class="line">[WARNING] Some problems were encountered while building the effective model for com.example:myproject:jar:0.0.1-SNAPSHOT</div><div class="line">[WARNING] &apos;build.plugins.plugin.version&apos; for org.springframework.boot:spring-boot-maven-plugin is missing. @ line 38, column 17</div><div class="line">[WARNING] </div><div class="line">[WARNING] It is highly recommended to fix these problems because they threaten the stability of your build.</div><div class="line">[WARNING] </div><div class="line">[WARNING] For this reason, future Maven versions might no longer support building such malformed projects.</div><div class="line">[WARNING] </div><div class="line">[INFO]                                                                         </div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Building myproject 0.0.1-SNAPSHOT</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ myproject ---</div><div class="line">[INFO] Deleting /Users/ltc/Spring Boot Demo/target</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ myproject ---</div><div class="line">[WARNING] Using platform encoding (UTF-8 actually) to copy filtered resources, i.e. build is platform dependent!</div><div class="line">[INFO] Copying 1 resource</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-compiler-plugin:3.1:compile (default-compile) @ myproject ---</div><div class="line">[INFO] Changes detected - recompiling the module!</div><div class="line">[WARNING] File encoding has not been set, using platform encoding UTF-8, i.e. build is platform dependent!</div><div class="line">[INFO] Compiling 1 source file to /Users/ltc/Spring Boot Demo/target/classes</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ myproject ---</div><div class="line">[INFO] Not copying test resources</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-compiler-plugin:3.1:testCompile (default-testCompile) @ myproject ---</div><div class="line">[INFO] Not compiling test sources</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ myproject ---</div><div class="line">[INFO] Tests are skipped.</div><div class="line">[INFO] </div><div class="line">[INFO] --- maven-jar-plugin:2.4:jar (default-jar) @ myproject ---</div><div class="line">[INFO] Building jar: /Users/ltc/Spring Boot Demo/target/myproject-0.0.1-SNAPSHOT.jar</div><div class="line">[INFO] </div><div class="line">[INFO] --- spring-boot-maven-plugin:1.5.0.RC1:repackage (default) @ myproject ---</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] BUILD SUCCESS</div><div class="line">[INFO] ------------------------------------------------------------------------</div><div class="line">[INFO] Total time: 1.861 s</div><div class="line">[INFO] Finished at: 2017-01-13T15:31:32+08:00</div><div class="line">[INFO] Final Memory: 26M/308M</div><div class="line">[INFO] ------------------------------------------------------------------------</div></pre></td></tr></table></figure>
<p>或在eclipse中运行<code>run -&gt; Maven build...</code>，在Goals中填写<code>clean package -Dmaven.test.skip=true</code>，运行，打包完成。</p>
<h2 id="2-Spring-Boot应用启动"><a href="#2-Spring-Boot应用启动" class="headerlink" title="2. Spring Boot应用启动"></a>2. Spring Boot应用启动</h2><p>Spring Boot的启动命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">java -jar application.jar</div><div class="line"></div><div class="line"></div><div class="line"># Demo</div><div class="line"></div><div class="line">$ java -jar target/myproject-0.0.1-SNAPSHOT.jar </div><div class="line"></div><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___&apos;_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | &apos;_ | &apos;_| | &apos;_ \/ _` | \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  &apos;  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.4.3.RELEASE)</div><div class="line"></div><div class="line">2017-01-13 15:31:36.911  INFO 62119 --- [           main] com.test.Example                         : Starting Example on CN40723-N.local with PID 62119 (/Users/ltc/Spring Boot Demo/target/myproject-0.0.1-SNAPSHOT.jar started by liutianchi in /Users/ltc/Spring Boot Demo)</div><div class="line">2017-01-13 15:31:36.916  INFO 62119 --- [           main] com.test.Example                         : No active profile set, falling back to default profiles: default</div><div class="line">2017-01-13 15:31:36.981  INFO 62119 --- [           main] ationConfigEmbeddedWebApplicationContext : Refreshing org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@b1a58a3: startup date [Fri Jan 13 15:31:36 CST 2017]; root of context hierarchy</div><div class="line">2017-01-13 15:31:38.602  INFO 62119 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat initialized with port(s): 8080 (http)</div><div class="line">2017-01-13 15:31:38.615  INFO 62119 --- [           main] o.apache.catalina.core.StandardService   : Starting service Tomcat</div><div class="line">2017-01-13 15:31:38.616  INFO 62119 --- [           main] org.apache.catalina.core.StandardEngine  : Starting Servlet Engine: Apache Tomcat/8.5.6</div><div class="line">2017-01-13 15:31:38.718  INFO 62119 --- [ost-startStop-1] o.a.c.c.C.[Tomcat].[localhost].[/]       : Initializing Spring embedded WebApplicationContext</div><div class="line">2017-01-13 15:31:38.718  INFO 62119 --- [ost-startStop-1] o.s.web.context.ContextLoader            : Root WebApplicationContext: initialization completed in 1740 ms</div><div class="line">2017-01-13 15:31:38.927  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.ServletRegistrationBean  : Mapping servlet: &apos;dispatcherServlet&apos; to [/]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;metricsFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;characterEncodingFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;hiddenHttpMethodFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;httpPutFormContentFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;requestContextFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;webRequestLoggingFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:38.932  INFO 62119 --- [ost-startStop-1] o.s.b.w.servlet.FilterRegistrationBean   : Mapping filter: &apos;applicationContextIdFilter&apos; to: [/*]</div><div class="line">2017-01-13 15:31:39.217  INFO 62119 --- [           main] s.w.s.m.m.a.RequestMappingHandlerAdapter : Looking for @ControllerAdvice: org.springframework.boot.context.embedded.AnnotationConfigEmbeddedWebApplicationContext@b1a58a3: startup date [Fri Jan 13 15:31:36 CST 2017]; root of context hierarchy</div><div class="line">2017-01-13 15:31:39.310  INFO 62119 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/]&#125;&quot; onto java.lang.String com.test.Example.home()</div><div class="line">2017-01-13 15:31:39.313  INFO 62119 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error]&#125;&quot; onto public org.springframework.http.ResponseEntity&lt;java.util.Map&lt;java.lang.String, java.lang.Object&gt;&gt; org.springframework.boot.autoconfigure.web.BasicErrorController.error(javax.servlet.http.HttpServletRequest)</div><div class="line">2017-01-13 15:31:39.313  INFO 62119 --- [           main] s.w.s.m.m.a.RequestMappingHandlerMapping : Mapped &quot;&#123;[/error],produces=[text/html]&#125;&quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)</div><div class="line">2017-01-13 15:31:39.338  INFO 62119 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-01-13 15:31:39.338  INFO 62119 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-01-13 15:31:39.378  INFO 62119 --- [           main] o.s.w.s.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**/favicon.ico] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]</div><div class="line">2017-01-13 15:31:39.665  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/metrics/&#123;name:.*&#125;],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.MetricsMvcEndpoint.value(java.lang.String)</div><div class="line">2017-01-13 15:31:39.665  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/metrics || /manage/metrics.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.666  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/mappings || /manage/mappings.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.667  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/trace || /manage/trace.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.667  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/info || /manage/info.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.668  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/configprops || /manage/configprops.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.669  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/heapdump || /manage/heapdump.json],methods=[GET],produces=[application/octet-stream]&#125;&quot; onto public void org.springframework.boot.actuate.endpoint.mvc.HeapdumpMvcEndpoint.invoke(boolean,javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse) throws java.io.IOException,javax.servlet.ServletException</div><div class="line">2017-01-13 15:31:39.669  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/autoconfig || /manage/autoconfig.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.673  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/env/&#123;name:.*&#125;],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EnvironmentMvcEndpoint.value(java.lang.String)</div><div class="line">2017-01-13 15:31:39.673  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/env || /manage/env.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.674  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/health || /manage/health.json],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.HealthMvcEndpoint.invoke(java.security.Principal)</div><div class="line">2017-01-13 15:31:39.675  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/dump || /manage/dump.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.677  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/shutdown || /manage/shutdown.json],methods=[POST]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.ShutdownMvcEndpoint.invoke()</div><div class="line">2017-01-13 15:31:39.678  INFO 62119 --- [           main] o.s.b.a.e.mvc.EndpointHandlerMapping     : Mapped &quot;&#123;[/manage/beans || /manage/beans.json],methods=[GET],produces=[application/json]&#125;&quot; onto public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()</div><div class="line">2017-01-13 15:31:39.799  INFO 62119 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup</div><div class="line">2017-01-13 15:31:39.809  INFO 62119 --- [           main] o.s.c.support.DefaultLifecycleProcessor  : Starting beans in phase 0</div><div class="line">2017-01-13 15:31:39.944  INFO 62119 --- [           main] s.b.c.e.t.TomcatEmbeddedServletContainer : Tomcat started on port(s): 8080 (http)</div><div class="line">2017-01-13 15:31:39.949  INFO 62119 --- [           main] com.test.Example                         : Started Example in 4.292 seconds (JVM running for 4.726)</div></pre></td></tr></table></figure>
<h2 id="3-Spring-Boot应用关闭"><a href="#3-Spring-Boot应用关闭" class="headerlink" title="3. Spring Boot应用关闭"></a>3. Spring Boot应用关闭</h2><p>Spring Boot应用关闭的前提条件是<code>POM.xml</code>添加以下内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p><code>application.properties</code>中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#启用shutdown</div><div class="line">endpoints.shutdown.enabled=true</div><div class="line">#禁用密码验证</div><div class="line">endpoints.shutdown.sensitive=false</div></pre></td></tr></table></figure>
<p>关闭命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">curl -X POST host:port/shutdown</div><div class="line"></div><div class="line"></div><div class="line"># Demo</div><div class="line"></div><div class="line">$ curl -X POST http://localhost:8080/shutdown</div><div class="line">&#123;&quot;message&quot;:&quot;Shutting down, bye...&quot;&#125;</div><div class="line"></div><div class="line"></div><div class="line">$ curl -X POST http://localhost:8080/manage/shutdown</div><div class="line">&#123;&quot;message&quot;:&quot;Shutting down, bye...&quot;&#125;</div></pre></td></tr></table></figure>
<p>如果要配置路径，需要在<code>application.properties</code>中添加<code>management.context-path=/manage</code>，则关闭命令变为<code>curl -X POST host:port/manage/shutdown</code>。</p>
<h2 id="4-安全验证"><a href="#4-安全验证" class="headerlink" title="4. 安全验证"></a>4. 安全验证</h2><p>如果在关闭时需要安全验证，则在<code>pom.xml</code>文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
<p><code>application.properties</code>中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">#开启shutdown的安全验证</div><div class="line">endpoints.shutdown.sensitive=true</div><div class="line"></div><div class="line">#验证用户名</div><div class="line">security.user.name=admin</div><div class="line"></div><div class="line">#验证密码</div><div class="line">security.user.password=admin</div><div class="line">#角色</div><div class="line">management.security.role=SUPERUSER</div><div class="line"></div><div class="line"># 指定端口</div><div class="line">management.port=8081</div><div class="line"></div><div class="line"># 指定地址</div><div class="line">management.address=127.0.0.1</div></pre></td></tr></table></figure>
<p>关闭命令为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">curl -u admin:admin -X POST http://127.0.0.1:8081/manage/shutdown</div><div class="line"></div><div class="line"># Demo</div><div class="line"></div><div class="line">$ curl -u admin:admin -X POST http://127.0.0.1:8081/manage/shutdown</div><div class="line">&#123;&quot;message&quot;:&quot;Shutting down, bye...&quot;&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Spring Boot的应用启动与关闭
    
    </summary>
    
      <category term="Spring Boot 2.0.0" scheme="noahsnail.com/categories/Spring-Boot-2-0-0/"/>
    
    
      <category term="Spring Boot" scheme="noahsnail.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Linux sed编辑器</title>
    <link href="noahsnail.com/2017/01/11/2017-1-11-Linux%20sed%E7%BC%96%E8%BE%91%E5%99%A8/"/>
    <id>noahsnail.com/2017/01/11/2017-1-11-Linux sed编辑器/</id>
    <published>2017-01-11T13:42:39.000Z</published>
    <updated>2017-01-11T14:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-sed编辑器"><a href="#1-sed编辑器" class="headerlink" title="1. sed编辑器"></a>1. sed编辑器</h2><p>sed编辑器中是Linux世界中最广泛使用的两个命令行编辑器之一。sed编辑器被称作流编辑器（stream editor），流编辑器在编辑器处理数据之前基于预先提供的一组规则来编辑数据流。sed编辑器可以根据命令来处理数据流中的数据。sed编辑器会执行以下操作：</p>
<ol>
<li>一次从输入中读取一行数据。</li>
<li>根据所提供的编辑器命令匹配数据。</li>
<li>按照命令修改流中的数据。</li>
<li>将新的数据输出到STDOUT。</li>
</ol>
<p>在流编辑器将所有命令和一行数据匹配完毕后，它会读取下一行数据重复这个过程。</p>
<h2 id="2-命令形式"><a href="#2-命令形式" class="headerlink" title="2. 命令形式"></a>2. 命令形式</h2><p>sed命令的格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sed options script file</div></pre></td></tr></table></figure>
<h2 id="3-Demo"><a href="#3-Demo" class="headerlink" title="3. Demo"></a>3. Demo</h2><ul>
<li>基本处理</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ echo &quot;This is a test&quot; | sed &apos;s/test/big test/&apos;</div><div class="line">This is a big test</div></pre></td></tr></table></figure>
<p>上面的例子中使用了<code>s</code>命令，<code>s</code>命令会用斜线中的第二个文本来替换第一个文本。处理文件如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"># test文件内容</div><div class="line"></div><div class="line">$ cat test</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line"></div><div class="line"></div><div class="line"># sed处理</div><div class="line">$ sed &apos;s/test/demo/&apos; test</div><div class="line">This is a demo.</div><div class="line">This is a demo.</div><div class="line">This is a demo.</div><div class="line">This is a demo.</div><div class="line">This is a demo.</div><div class="line"></div><div class="line"># test文件内容</div><div class="line">$ cat test</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div><div class="line">This is a test.</div></pre></td></tr></table></figure>
<p><strong>注：</strong>sed编辑器不会修改文本文件的数据，它只会将处理后的数据发送到STDOUT。</p>
<ul>
<li>执行多个命令</li>
</ul>
<p><code>-e</code>选项可以执行多个命令，多个命令用<code>;</code>隔开。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sed -e &apos;s/a/an/; s/test/egg/&apos; test</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div></pre></td></tr></table></figure>
<ul>
<li>从文件中读取命令</li>
</ul>
<p><code>-f</code>选项可以让sed执行文件中的命令。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ cat script.sed </div><div class="line">s/a/an/</div><div class="line">s/test/egg/</div><div class="line"></div><div class="line">$ sed -f script.sed test</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div><div class="line">This is an egg.</div></pre></td></tr></table></figure>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ol>
<li>Linux命令行与shell脚本编程</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Linux sed编辑器
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
</feed>
