<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noahsnail.com/"/>
  <updated>2021-02-05T03:06:18.724Z</updated>
  <id>http://noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 278. First Bad Version</title>
    <link href="http://noahsnail.com/2021/02/05/2021-02-05-Leetcode-278-First-Bad-Version/"/>
    <id>http://noahsnail.com/2021/02/05/2021-02-05-Leetcode-278-First-Bad-Version/</id>
    <published>2021-02-05T03:00:37.689Z</published>
    <updated>2021-02-05T03:06:18.724Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/First_Bad_Version.png" alt="First Bad Version"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p>解析：问题变为给定有序数组[1, 2, 2]，找出第一个2的问题，最容易想到的就是二分查找。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">firstBadVersion</span><span class="params">(self, n)</span>:</span></div><div class="line">        left = <span class="number">1</span></div><div class="line">        right = n</div><div class="line">        <span class="keyword">while</span> left &lt;= right:</div><div class="line">            mid = (left + right) // <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> isBadVersion(mid):</div><div class="line">                <span class="keyword">if</span> mid == <span class="number">1</span> <span class="keyword">or</span> <span class="keyword">not</span> isBadVersion(mid - <span class="number">1</span>):</div><div class="line">                    <span class="keyword">return</span> mid</div><div class="line">                right = mid - <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                left = mid + <span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/first-bad-version/" target="_blank" rel="external">https://leetcode.com/problems/first-bad-version/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 278. First Bad Version
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 34. Find First and Last Position of Element in Sorted Array</title>
    <link href="http://noahsnail.com/2021/02/05/2021-02-05-Leetcode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/"/>
    <id>http://noahsnail.com/2021/02/05/2021-02-05-Leetcode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array/</id>
    <published>2021-02-05T01:25:54.247Z</published>
    <updated>2021-02-05T03:07:36.616Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Find_First_and_Last_Position_of_Element_in_Sorted_Array.png" alt="Find First and Last Position of Element in Sorted Array"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p>解析：最容易想到的就是二分查找，只是要进行一些修改，另一个方法是分别从前往后找以及从后往前找，满足条件就退出。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        length = len(nums)</div><div class="line">        start = <span class="number">-1</span></div><div class="line">        end = <span class="number">-1</span></div><div class="line">        left = <span class="number">0</span></div><div class="line">        right = length - <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">while</span> left &lt;= right:</div><div class="line">            mid = (left + right) // <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</div><div class="line">                right = mid - <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</div><div class="line">                left = mid + <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> mid == <span class="number">0</span> <span class="keyword">or</span> nums[mid - <span class="number">1</span>] &lt; target:</div><div class="line">                    start = mid</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                right = mid - <span class="number">1</span></div><div class="line"></div><div class="line">        left = <span class="number">0</span></div><div class="line">        right = length - <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> left &lt;= right:</div><div class="line">            mid = (left + right) // <span class="number">2</span></div><div class="line">            <span class="keyword">if</span> nums[mid] &gt; target:</div><div class="line">                right = mid - <span class="number">1</span></div><div class="line">            <span class="keyword">elif</span> nums[mid] &lt; target:</div><div class="line">                left = mid + <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                <span class="keyword">if</span> mid == length - <span class="number">1</span> <span class="keyword">or</span> nums[mid + <span class="number">1</span>] &gt; target:</div><div class="line">                    end = mid</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                left = mid + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> [start, end]</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">searchRange</span><span class="params">(self, nums, target)</span>:</span></div><div class="line">        length = len(nums)</div><div class="line">        start = <span class="number">-1</span></div><div class="line">        end = <span class="number">-1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length):</div><div class="line">            <span class="keyword">if</span> nums[i] == target:</div><div class="line">                start = i</div><div class="line">                <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> nums[i] &gt; target:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> start == <span class="number">-1</span>:</div><div class="line">            <span class="keyword">return</span> [start, end]</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length <span class="number">-1</span> , <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> nums[i] == target:</div><div class="line">                end = i</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> nums[i] &lt; target:</div><div class="line">                <span class="keyword">break</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> [start, end]</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="external">https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 34. Find First and Last Position of Element in Sorted Array
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 322. Coin Change</title>
    <link href="http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-322-Coin-Change/"/>
    <id>http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-322-Coin-Change/</id>
    <published>2021-02-04T05:25:38.656Z</published>
    <updated>2021-02-04T07:43:36.515Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Coin_Change.png" alt="Coin Change"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></div><div class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        stat = [<span class="number">0</span>] * (amount + <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</div><div class="line">                <span class="keyword">if</span> i - coin &gt; <span class="number">0</span> <span class="keyword">and</span> stat[i - coin] &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> stat[i] &gt; <span class="number">0</span>:</div><div class="line">                        stat[i] = min(<span class="number">1</span> + stat[i - coin], stat[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        stat[i] = <span class="number">1</span> + stat[i - coin]</div><div class="line">                <span class="keyword">elif</span> i - coin == <span class="number">0</span>:</div><div class="line">                    stat[i] = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> stat[amount] <span class="keyword">if</span> stat[amount] &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></div><div class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        stat = [<span class="number">0</span> <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> coins <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>)]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</div><div class="line">                <span class="keyword">if</span> i - coin &gt; <span class="number">0</span> <span class="keyword">and</span> stat[i - coin] &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> stat[i] &gt; <span class="number">0</span>:</div><div class="line">                        stat[i] = min(<span class="number">1</span> + stat[i - coin], stat[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        stat[i] = <span class="number">1</span> + stat[i - coin]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> stat[amount] <span class="keyword">if</span> stat[amount] &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/coin-change/" target="_blank" rel="external">https://leetcode.com/problems/coin-change/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 322. Coin Change
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 997. Find the Town Judge</title>
    <link href="http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-997-Find-the-Town-Judge/"/>
    <id>http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-997-Find-the-Town-Judge/</id>
    <published>2021-02-04T01:10:51.331Z</published>
    <updated>2021-02-04T01:29:43.272Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Find_the_Town_Judge.png" alt="Find the Town Judge"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N, trust)</span>:</span></div><div class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> len(trust) &lt; N - <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        judge = &#123;&#125;</div><div class="line">        people = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> trust:</div><div class="line">            people[pair[<span class="number">0</span>]] = people.get(pair[<span class="number">0</span>], <span class="number">0</span>) + <span class="number">1</span></div><div class="line">            judge[pair[<span class="number">1</span>]] = judge.get(pair[<span class="number">1</span>], <span class="number">0</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> judge.items():</div><div class="line">            <span class="keyword">if</span> value == N - <span class="number">1</span> <span class="keyword">and</span> key <span class="keyword">not</span> <span class="keyword">in</span> people:</div><div class="line">                <span class="keyword">return</span> key</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N, trust)</span>:</span></div><div class="line">        count = [<span class="number">0</span>] * (N + <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> trust:</div><div class="line">            count[pair[<span class="number">0</span>]] -= <span class="number">1</span></div><div class="line">            count[pair[<span class="number">1</span>]] += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(count)):</div><div class="line">            <span class="keyword">if</span> count[i] == N - <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> i</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/find-the-town-judge/submissions/" target="_blank" rel="external">https://leetcode.com/problems/find-the-town-judge/submissions/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 997. Find the Town Judge
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 171. Excel Sheet Column Number</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-171-Excel-Sheet-Column-Number/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-171-Excel-Sheet-Column-Number/</id>
    <published>2021-02-03T09:35:44.554Z</published>
    <updated>2021-02-03T09:40:26.053Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Excel_Sheet_Column_Number.png" alt="Excel Sheet Column Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">        result = <span class="number">0</span></div><div class="line">        mapping = &#123;chr(<span class="number">64</span>+i): i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">27</span>)&#125;</div><div class="line">        s = list(s)</div><div class="line">        s.reverse()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> index, ch <span class="keyword">in</span> enumerate(s):</div><div class="line">            result = result + mapping[ch] * math.pow(<span class="number">26</span>, index)</div><div class="line">        <span class="keyword">return</span> int(result)</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">        result = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</div><div class="line">            result = result * <span class="number">26</span> + ord(ch) - <span class="number">64</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">https://leetcode.com/problems/excel-sheet-column-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 171. Excel Sheet Column Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 168. Excel Sheet Column Title</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-168-Excel-Sheet-Column-Title/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-168-Excel-Sheet-Column-Title/</id>
    <published>2021-02-03T09:19:43.693Z</published>
    <updated>2021-02-03T09:23:41.442Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Excel_Sheet_Column_Title.png" alt="Excel Sheet Column Title"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line"></div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            remainder = n % <span class="number">26</span></div><div class="line">            quotient = n // <span class="number">26</span></div><div class="line">            result = mapping[remainder - <span class="number">1</span>] + result</div><div class="line">            <span class="keyword">if</span> remainder == <span class="number">0</span>:</div><div class="line">                quotient -= <span class="number">1</span></div><div class="line">            n = quotient</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            remainder = n % <span class="number">26</span></div><div class="line">            n = (n - <span class="number">1</span>) // <span class="number">26</span></div><div class="line">            result = mapping[remainder - <span class="number">1</span>] + result</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            result = mapping[n % <span class="number">26</span> - <span class="number">1</span>] + result</div><div class="line">            n = (n - <span class="number">1</span>) // <span class="number">26</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">https://leetcode.com/problems/excel-sheet-column-title/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 168. Excel Sheet Column Title
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 228. Summary Ranges</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-228-Summary-Ranges/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-228-Summary-Ranges/</id>
    <published>2021-02-03T06:52:53.399Z</published>
    <updated>2021-02-03T07:03:29.209Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Summary_Ranges.png" alt="Maximum Swap"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summaryRanges</span><span class="params">(self, nums)</span>:</span></div><div class="line">        result = []</div><div class="line">        length = len(nums)</div><div class="line"></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; length:</div><div class="line">            <span class="keyword">if</span> i == length - <span class="number">1</span> <span class="keyword">or</span> nums[i] + <span class="number">1</span> != nums[i + <span class="number">1</span>]:</div><div class="line">                result.append(str(nums[i]))</div><div class="line">                i += <span class="number">1</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            start = nums[i]</div><div class="line">            <span class="keyword">while</span> i + <span class="number">1</span> &lt; length <span class="keyword">and</span> nums[i] + <span class="number">1</span> == nums[i + <span class="number">1</span>]:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            end = nums[i]</div><div class="line">            result.append(str(start) + <span class="string">'-&gt;'</span> + str(end))</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summaryRanges</span><span class="params">(self, nums)</span>:</span></div><div class="line">        result = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums <span class="keyword">and</span> num + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                result.append(str(num))</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                start = num</div><div class="line"></div><div class="line">            <span class="keyword">if</span> num + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                end = num</div><div class="line">                result.append(str(start) + <span class="string">'-&gt;'</span> + str(end))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/summary-ranges/" target="_blank" rel="external">https://leetcode.com/problems/summary-ranges/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 228. Summary Ranges
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 670. Maximum Swap</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-670-Maximum-Swap/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-670-Maximum-Swap/</id>
    <published>2021-02-02T09:56:47.361Z</published>
    <updated>2021-02-03T06:07:18.089Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Maximum_Swap.png" alt="Maximum Swap"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(self, num)</span>:</span></div><div class="line">        s = list(str(num))</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - <span class="number">1</span>):</div><div class="line">            max_index = i</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</div><div class="line">                <span class="keyword">if</span> s[j] &gt;= s[max_index] <span class="keyword">and</span> s[i] != s[j]:</div><div class="line">                    max_index = j</div><div class="line">            <span class="keyword">if</span> max_index != i:</div><div class="line">                temp = s[i]</div><div class="line">                s[i] = s[max_index]</div><div class="line">                s[max_index] = temp</div><div class="line">                <span class="keyword">break</span> </div><div class="line"></div><div class="line">        <span class="keyword">return</span> int(<span class="string">''</span>.join(s))</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(self, num)</span>:</span></div><div class="line">        s = list(str(num))</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line"></div><div class="line">        pre = <span class="number">0</span></div><div class="line">        post = <span class="number">0</span></div><div class="line">        max_index = length - <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> s[i] &gt; s[max_index]:</div><div class="line">                max_index = i</div><div class="line">            <span class="keyword">elif</span> s[i] &lt; s[max_index]:</div><div class="line">                pre = i</div><div class="line">                post = max_index</div><div class="line"></div><div class="line"></div><div class="line">        temp = s[pre]</div><div class="line">        s[pre] = s[post]</div><div class="line">        s[post] = temp</div><div class="line">        </div><div class="line"></div><div class="line">        <span class="keyword">return</span> int(<span class="string">''</span>.join(s))</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/maximum-swap/" target="_blank" rel="external">https://leetcode.com/problems/maximum-swap/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 670. Maximum Swap
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 321. Create Maximum Number</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-321-Create-Maximum-Number/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-321-Create-Maximum-Number/</id>
    <published>2021-02-02T07:20:53.355Z</published>
    <updated>2021-02-02T09:16:14.954Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Create_Maximum_Number.png" alt="Create Maximum Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析</strong>：</p>
<ol>
<li>首先将问题分解为两个子问题，即分别求两个序列的最大值，得到两个子序列（保留顺序），两个子序列的长度和为<code>k</code>。</li>
<li>合并两个子序列</li>
<li>比较所有合并后的序列，返回值最大的序列</li>
</ol>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> nums1 <span class="keyword">or</span> nums2:</div><div class="line">            <span class="keyword">if</span> self.compare(nums1, nums2):</div><div class="line">                result.append(nums1.pop(<span class="number">0</span>))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result.append(nums2.pop(<span class="number">0</span>))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        min_value = min(m, n)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_value):</div><div class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[i]:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[i]:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> m &gt;= n:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> a <span class="keyword">or</span> b:</div><div class="line">            <span class="keyword">if</span> self.compare(a, b):</div><div class="line">                result.append(a.pop(<span class="number">0</span>))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result.append(b.pop(<span class="number">0</span>))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        <span class="keyword">if</span> max(a, b) == a:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        <span class="keyword">return</span> [max(a, b).pop(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a) + len(b))]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/create-maximum-number/" target="_blank" rel="external">https://leetcode.com/problems/create-maximum-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 321. Create Maximum Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 435. Non-overlapping Intervals</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-435-Non-overlapping-Intervals/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-435-Non-overlapping-Intervals/</id>
    <published>2021-02-02T01:32:55.919Z</published>
    <updated>2021-02-02T01:34:44.802Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Non-overlapping-Intervals.png" alt="Non-overlapping Intervals"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eraseOverlapIntervals</span><span class="params">(self, intervals)</span>:</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> len(intervals) &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> count</div><div class="line">        intervals.sort(key=<span class="keyword">lambda</span> interval: interval[<span class="number">1</span>])</div><div class="line">        overlap = intervals[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, len(intervals)):</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &gt; intervals[index][<span class="number">0</span>]:</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                overlap = intervals[index]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/non-overlapping-intervals/" target="_blank" rel="external">https://leetcode.com/problems/non-overlapping-intervals/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 435. Non-overlapping Intervals
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 452. Minimum Number of Arrows to Burst Balloons</title>
    <link href="http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-452-Minimum-Number-of-Arrows-to-Burst-Balloons/"/>
    <id>http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-452-Minimum-Number-of-Arrows-to-Burst-Balloons/</id>
    <published>2021-02-01T09:58:10.569Z</published>
    <updated>2021-02-01T10:06:51.185Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Minimum_Number_of_Arrows_to_Burst Balloons.png" alt="Minimum Number of Arrows to Burst Balloons"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(points) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        points.sort(key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>])</div><div class="line">        total = <span class="number">1</span></div><div class="line">        overlap = points[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &lt; point[<span class="number">0</span>]:</div><div class="line">                total += <span class="number">1</span></div><div class="line">                overlap = point</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                overlap[<span class="number">0</span>] = point[<span class="number">0</span>]</div><div class="line">                overlap[<span class="number">1</span>] = min(overlap[<span class="number">1</span>], point[<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> total</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(points) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        points.sort(key=<span class="keyword">lambda</span> p: p[<span class="number">1</span>])</div><div class="line">        total = <span class="number">1</span></div><div class="line">        overlap = points[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &lt; point[<span class="number">0</span>]:</div><div class="line">                total += <span class="number">1</span></div><div class="line">                overlap = point</div><div class="line"></div><div class="line">        <span class="keyword">return</span> total</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="external">https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 452. Minimum Number of Arrows to Burst Balloons
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 179. Largest Number</title>
    <link href="http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-179-Largest-Number/"/>
    <id>http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-179-Largest-Number/</id>
    <published>2021-02-01T06:32:47.783Z</published>
    <updated>2021-02-01T10:06:23.548Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Largest_Number.png" alt="Largest Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p>解析：这道题的关键在于想到需要编写一个比较函数来比较两个数字的“大小”，即两个数字排列的先后顺序。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">        nums_str = [str(num) <span class="keyword">for</span> num <span class="keyword">in</span> nums]</div><div class="line">        nums_str = sorted(nums_str, key=functools.cmp_to_key(self.compare), reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        result = <span class="string">''</span>.join(nums_str)</div><div class="line">        <span class="keyword">if</span> result[<span class="number">0</span>] == <span class="string">'0'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'0'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        s1 = x + y</div><div class="line">        s2 = y + x</div><div class="line"></div><div class="line">        <span class="keyword">if</span> s1 &gt; s2:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> s1 &lt; s2:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">        nums_str = list(map(str, nums))</div><div class="line">        cmp = <span class="keyword">lambda</span> x, y: <span class="number">1</span> <span class="keyword">if</span> x + y &gt; y + x <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">if</span> x + y &lt; y + x <span class="keyword">else</span> <span class="number">0</span></div><div class="line">        nums_str = sorted(nums_str, key=functools.cmp_to_key(cmp), reverse=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> str(int(<span class="string">''</span>.join(nums_str)))</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/largest-number/" target="_blank" rel="external">https://leetcode.com/problems/largest-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 179. Largest Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vim移除自动添加的换行符</title>
    <link href="http://noahsnail.com/2020/12/18/2020-12-18-vim%E7%A7%BB%E9%99%A4%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://noahsnail.com/2020/12/18/2020-12-18-vim移除自动添加的换行符/</id>
    <published>2020-12-18T06:22:18.270Z</published>
    <updated>2020-12-18T09:27:58.184Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在使用vim编辑文件时，默认情况下，vim会在文件末尾自动添加换行符(<code>endofline</code>)。如果需要移除文件末尾自动添加的换行符，就需要对文件重新编辑设置一下。</p>
<h2 id="2-移除换行符"><a href="#2-移除换行符" class="headerlink" title="2. 移除换行符"></a>2. 移除换行符</h2><p>使用vim编辑<code>test.txt</code>，文件内容为<code>abc</code>，保存。测试如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 统计文件行数</div><div class="line">root@ec18cf9b6d75:/workspace# wc -l test.txt</div><div class="line">1 test.txt</div><div class="line"></div><div class="line"># 统计文件字符数</div><div class="line">root@ec18cf9b6d75:/workspace# wc -m test.txt</div><div class="line">4 test.txt</div></pre></td></tr></table></figure>
<p>移除文件的自动换行符的vim命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:set binary</div><div class="line">:set noendofline</div><div class="line">:wq</div><div class="line"></div><div class="line"># or</div><div class="line"></div><div class="line">:set bin noeol</div></pre></td></tr></table></figure>
<p>重新进行测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ec18cf9b6d75:/workspace# wc -l test.txt</div><div class="line">0 test.txt</div><div class="line">root@ec18cf9b6d75:/workspace# wc -m test.txt</div><div class="line">3 test.txt</div></pre></td></tr></table></figure>
<h2 id="3-测试结果解析"><a href="#3-测试结果解析" class="headerlink" title="3. 测试结果解析"></a>3. 测试结果解析</h2><p><code>wc -m</code>命令在统计文件的字符个数时会统计换行符，因此文件有换行符时字符统计数量为4，没有时为3。</p>
<p><code>wc -l</code>命令统计文件的行数时是统计换行符的个数，因此文件有换行符时行数统计数量为1，没有时为0。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://stackoverflow.com/questions/23488655/how-does-the-wc-c-in-linux-work" target="_blank" rel="external">https://stackoverflow.com/questions/23488655/how-does-the-wc-c-in-linux-work</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      vim移除自动添加的换行符
    
    </summary>
    
    
      <category term="Linux" scheme="http://noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch中的model.zero_grad() vs optimizer.zero_grad()</title>
    <link href="http://noahsnail.com/2020/09/29/2020-09-29-PyTorch%E4%B8%AD%E7%9A%84Model.zero_grad()%20vs%20optimizer.zero_grad()/"/>
    <id>http://noahsnail.com/2020/09/29/2020-09-29-PyTorch中的Model.zero_grad() vs optimizer.zero_grad()/</id>
    <published>2020-09-29T02:16:38.000Z</published>
    <updated>2020-09-29T03:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在PyTorch中，对模型参数的梯度置0时通常使用两种方式：<code>model.zero_grad()</code>和<code>optimizer.zero_grad()</code>。二者在训练代码都很常见，那么二者的区别在哪里呢？</p>
<h2 id="2-model-zero-grad"><a href="#2-model-zero-grad" class="headerlink" title="2. model.zero_grad()"></a>2. model.zero_grad()</h2><p><code>model.zero_grad()</code>的作用是将所有模型参数的梯度置为0。其源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> self.parameters():</div><div class="line">    <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        p.grad.detach_()</div><div class="line">        p.grad.zero_()</div></pre></td></tr></table></figure>
<h2 id="3-optimizer-zero-grad"><a href="#3-optimizer-zero-grad" class="headerlink" title="3. optimizer.zero_grad()"></a>3. optimizer.zero_grad()</h2><p><code>optimizer.zero_grad()</code>的作用是清除所有优化的<code>torch.Tensor</code>的梯度。其源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> group[<span class="string">'params'</span>]:</div><div class="line">        <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            p.grad.detach_()</div><div class="line">            p.grad.zero_()</div></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul>
<li><p>当使用<code>optimizer = optim.Optimizer(net.parameters())</code>设置优化器时，此时优化器中的<code>param_groups</code>等于模型中的<code>parameters()</code>，此时，二者是等效的，从二者的源码中也可以看出来。</p>
</li>
<li><p>当多个模型使用同一个优化器时，二者是不同的，此时需要根据实际情况选择梯度的清除方式。</p>
</li>
<li><p>当一个模型使用多个优化器时，二者是不同的，此时需要根据实际情况选择梯度的清除方式。</p>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://discuss.pytorch.org/t/model-zero-grad-or-optimizer-zero-grad/28426" target="_blank" rel="external">https://discuss.pytorch.org/t/model-zero-grad-or-optimizer-zero-grad/28426</a></p>
</li>
<li><p><a href="https://discuss.pytorch.org/t/whats-the-difference-between-optimizer-zero-grad-vs-nn-module-zero-grad/59233" target="_blank" rel="external">https://discuss.pytorch.org/t/whats-the-difference-between-optimizer-zero-grad-vs-nn-module-zero-grad/59233</a></p>
</li>
<li><p><a href="https://discuss.pytorch.org/t/zero-grad-optimizer-or-net/1887" target="_blank" rel="external">https://discuss.pytorch.org/t/zero-grad-optimizer-or-net/1887</a></p>
</li>
<li><p><a href="https://pytorch.org/docs/stable/optim.html" target="_blank" rel="external">https://pytorch.org/docs/stable/optim.html</a></p>
</li>
<li><p><a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module" target="_blank" rel="external">https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      PyTorch中的model.zero_grad() vs optimizer.zero_grad()
    
    </summary>
    
      <category term="Deep Learning" scheme="http://noahsnail.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python格式化字符串format</title>
    <link href="http://noahsnail.com/2020/06/18/2020-06-18-Python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2format/"/>
    <id>http://noahsnail.com/2020/06/18/2020-06-18-Python格式化字符串format/</id>
    <published>2020-06-18T02:02:14.000Z</published>
    <updated>2020-06-18T06:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>Python中格式化字符串的方式有，一种是用<code>%</code>操作符来进行字符串格式化，一种是使用<code>str.format()</code>来进行字符串格式化，本文主要介绍<code>str.format()</code>方式，这种方式更主流，也是官方推荐的方式，<code>%</code>的方式后面会逐渐淘汰。</p>
<h2 id="2-格式化字符串"><a href="#2-格式化字符串" class="headerlink" title="2. 格式化字符串"></a>2. 格式化字符串</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p>格式化字符串包含用大括号<code>{}</code>括起来的“替换字段”，。大括号中不包含的内容被视为正常文本，会原样输出。注意：如果要在文本中输出大括号，需要使用<code></code>来转义，不是使用场景的转义字符<code>\</code>。示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'This is a format &#123;&#125;.'</span>.format(<span class="string">'test'</span>)</div><div class="line"><span class="string">'This is a format test.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'This is &#123;&#123;&#125;&#125; test.'</span>.format()</div><div class="line"><span class="string">'This is &#123;&#125; test.'</span></div></pre></td></tr></table></figure>
<p>下面是“替换字段”的语法，后面的示例中会具体讲到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">replacement_field ::=  <span class="string">"&#123;"</span> [field_name] [<span class="string">"!"</span> conversion] [<span class="string">":"</span> format_spec] <span class="string">"&#125;"</span></div><div class="line">field_name        ::=  arg_name (<span class="string">"."</span> attribute_name | <span class="string">"["</span> element_index <span class="string">"]"</span>)*</div><div class="line">arg_name          ::=  [identifier | digit+]</div><div class="line">attribute_name    ::=  identifier</div><div class="line">element_index     ::=  digit+ | index_string</div><div class="line">index_string      ::=  &lt;any source character <span class="keyword">except</span> <span class="string">"]"</span>&gt; +</div><div class="line">conversion        ::=  <span class="string">"r"</span> | <span class="string">"s"</span> | <span class="string">"a"</span></div><div class="line">format_spec       ::=  &lt;described <span class="keyword">in</span> the next section&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-位置参数标识符"><a href="#2-2-位置参数标识符" class="headerlink" title="2.2 位置参数标识符"></a>2.2 位置参数标识符</h3><p>格式化字符串中，默认情况下<code>{}</code>中可以不加位置标识符，即<code>&#39;{} {}&#39;.format(a, b)</code>与<code>&#39;{0} {1}&#39;.format(a, b)</code>是等价的，但如果位置标识符在字符串中不是按参数顺序出现的，则需要显示的指明位置标识符。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'two one'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two one'</span></div></pre></td></tr></table></figure>
<h3 id="2-3-设置参数"><a href="#2-3-设置参数" class="headerlink" title="2.3 设置参数"></a>2.3 设置参数</h3><p>格式化字符串中可以使用变量、字典、列表索引、类的属性等来设置参数。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(name=<span class="string">'Tyan'</span>, url=<span class="string">'http://noahsnail.com'</span>))</div><div class="line"></div><div class="line">name = <span class="string">'Tyan'</span></div><div class="line">url = <span class="string">'http://noahsnail.com'</span></div><div class="line">print(<span class="string">'Name: &#123;&#125;, URL: &#123;&#125;'</span>.format(name, url))</div><div class="line"></div><div class="line">site = &#123;<span class="string">'name'</span> : <span class="string">'Tyan'</span>, <span class="string">'url'</span> : <span class="string">'http://noahsnail.com'</span>&#125;</div><div class="line">print(<span class="string">'Name: &#123;site[name]&#125;, URL: &#123;site[url]&#125;'</span>.format(site=site))</div><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(**site))</div><div class="line"></div><div class="line">site = [<span class="string">'Tyan'</span>, <span class="string">'http://noahsnail.com'</span>]</div><div class="line">print(<span class="string">'Name: &#123;0[0]&#125;, URL: &#123;0[1]&#125;'</span>.format(site))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Tyan'</span></div><div class="line">        self.url = <span class="string">'http://noahsnail.com'</span></div><div class="line"></div><div class="line">print(<span class="string">'Name: &#123;0.name&#125;, URL: &#123;0.url&#125;'</span>.format(Test()))</div><div class="line"></div><div class="line">site = &#123;<span class="string">'name'</span> : <span class="string">'Tyan'</span>, <span class="string">'url'</span> : <span class="string">'http://noahsnail.com'</span>&#125;</div><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(**site))</div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div></pre></td></tr></table></figure>
<h3 id="2-3-转换标志-conversion"><a href="#2-3-转换标志-conversion" class="headerlink" title="2.3 转换标志(conversion)"></a>2.3 转换标志(conversion)</h3><p>转换标志以<code>!</code>开始，主要有三种<code>!s</code>、<code>!r</code>、<code>!a</code>，分别会调用参数对象的<code>__str__</code>，<code>__repr__</code>，<code>__ascii__</code>方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test str function.'</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test repr function.'</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ascii__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test ascii function.'</span></div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">'str: &#123;t!s&#125;, repr: &#123;t!r&#125;, ascii: &#123;t!a&#125;'</span>.format(t=Test()))</div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">str: Test str function., repr: Test repr function., ascii: Test repr function.</div></pre></td></tr></table></figure>
<h3 id="2-4-格式化说明-format-spec"><a href="#2-4-格式化说明-format-spec" class="headerlink" title="2.4 格式化说明(format_spec)"></a>2.4 格式化说明(format_spec)</h3><p>格式化说明包含了值表示的说明，包括字段宽度、对其方式、填充、小数准确率等，其以<code>:</code>开头。标准格式化说明符的一般形式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]</div><div class="line">fill            ::=  &lt;any character&gt;</div><div class="line">align           ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;</div><div class="line">sign            ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;</div><div class="line">width           ::=  digit+</div><div class="line">grouping_option ::=  &quot;_&quot; | &quot;,&quot;</div><div class="line">precision       ::=  digit+</div><div class="line">type            ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;</div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;</code>表示输出结果左对齐，<code>&gt;</code>是右对齐，<code>^</code>是居中对其，<code>=</code>表示填充值在符号之后数字之前，例如<code>+00001234</code>。</li>
<li><code>+</code>表示正负数字都要带符号，<code>-</code>表示只有负数需要带负号，<code> </code>表示正数前面带空格，负数前面带负号。</li>
<li>数字表示。<code>b</code>表示二进制格式，<code>c</code>表示将整数转换为字符，<code>d</code>表示十进制整数，<code>o</code>表示八进制格式，<code>x，X</code>表示十六进制格式，<code>x</code>大于9的字母为小写，<code>X</code>大于9的字母为大写。默认为<code>d</code>。</li>
<li>其它说明符的具体解释可参考文档[1]。</li>
</ul>
<p>示例及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'&#123;:&lt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:&gt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:^8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:*&gt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:*&lt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:*^8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:+f&#125;; &#123;:+f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line">print(<span class="string">'&#123;: f&#125;; &#123;: f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line">print(<span class="string">'&#123;:-f&#125;; &#123;:-f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line"></div><div class="line">print(<span class="string">'int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;'</span>.format(<span class="number">100</span>))</div><div class="line">print(<span class="string">'int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;'</span>.format(<span class="number">100</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:,&#125;'</span>.format(<span class="number">100000000</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:.2e&#125;'</span>.format(<span class="number">100000000</span>))</div><div class="line"></div><div class="line">print(<span class="string">'percentage: &#123;:.2%&#125;'</span>.format(<span class="number">1</span> / <span class="number">3</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line">print(<span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(datetime.datetime.now()))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line"><span class="number">1234</span>    </div><div class="line">    <span class="number">1234</span></div><div class="line">  <span class="number">1234</span>  </div><div class="line">****<span class="number">1234</span></div><div class="line"><span class="number">1234</span>****</div><div class="line">**<span class="number">1234</span>**</div><div class="line">+<span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line"> <span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line"><span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line">int: <span class="number">100</span>;  hex: <span class="number">64</span>;  oct: <span class="number">144</span>;  bin: <span class="number">1100100</span></div><div class="line">int: <span class="number">100</span>;  hex: <span class="number">0x64</span>;  oct: <span class="number">0o144</span>;  bin: <span class="number">0b1100100</span></div><div class="line"><span class="number">100</span>,<span class="number">000</span>,<span class="number">000</span></div><div class="line"><span class="number">1.00e+08</span></div><div class="line">percentage: <span class="number">33.33</span>%</div><div class="line"><span class="number">2020</span><span class="number">-06</span><span class="number">-18</span> <span class="number">19</span>:<span class="number">36</span>:<span class="number">38</span></div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://docs.python.org/3.8/library/string.html#format-string-syntax" target="_blank" rel="external">https://docs.python.org/3.8/library/string.html#format-string-syntax</a></p>
</li>
<li><p><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="external">https://www.runoob.com/python/att-string-format.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr/1436756" target="_blank" rel="external">https://stackoverflow.com/questions/1436703/difference-between-str-and-repr/1436756</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/9196066/what-does-a-double-colon-followed-by-an-equals-sign-mean-in-programming-do" target="_blank" rel="external">https://stackoverflow.com/questions/9196066/what-does-a-double-colon-followed-by-an-equals-sign-mean-in-programming-do</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python格式化字符串format
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中list的append, extend, +=, +区别</title>
    <link href="http://noahsnail.com/2020/06/17/2020-06-17-python%E4%B8%ADlist%E7%9A%84append,%20extend%E5%8C%BA%E5%88%AB/"/>
    <id>http://noahsnail.com/2020/06/17/2020-06-17-python中list的append, extend区别/</id>
    <published>2020-06-17T01:48:53.000Z</published>
    <updated>2020-06-18T02:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9，<code>dis</code>库是Python自带的一个库，可以用来分析字节码，而字节码是CPython解释器的实现细节。</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在Python中，扩展<code>list</code>的方法有多种，<code>append</code>，<code>extend</code>，<code>+=</code>，<code>+</code>都是列表扩展的方式，但它们的使用又有些许不同，需要根据具体情况来选择，本文主要分析它们的差异。</p>
<h2 id="2-对比与分析"><a href="#2-对比与分析" class="headerlink" title="2. 对比与分析"></a>2. 对比与分析</h2><h3 id="2-1-list的函数方法"><a href="#2-1-list的函数方法" class="headerlink" title="2.1 list的函数方法"></a>2.1 <code>list</code>的函数方法</h3><ul>
<li>list.append(x)</li>
</ul>
<p><code>append</code>方法会将<code>x</code>作为<code>list</code>的一项添加到末尾。等价于<code>a[len(a):] = [x]</code>。</p>
<ul>
<li>list.extend(iterable)</li>
</ul>
<p><code>extend</code>方法会将后面的可迭代对象的所有项添加到列表中。</p>
<h3 id="2-2-代码测试"><a href="#2-2-代码测试" class="headerlink" title="2.2 代码测试"></a>2.2 代码测试</h3><ul>
<li>Test Case 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a += b</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a.append(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a.extend(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">c = a + b</div><div class="line">print(a)</div><div class="line">print(c)</div><div class="line"></div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a += b</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a.append(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a.extend(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">c = a + b</div><div class="line">print(a)</div><div class="line">print(c)</div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'ef'</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"list_test.py"</span>, line <span class="number">40</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    c = a + b</div><div class="line">TypeError: can only concatenate list (<span class="keyword">not</span> <span class="string">"str"</span>) to list</div></pre></td></tr></table></figure>
<p>从输出结果来看，<code>extend</code>与<code>+=</code>是等价的，会扩展原有的列表，<code>+</code>只能用来连接列表，且不改变原有的列表，会返回一个新列表，<code>append</code>会往原有列表中添加一个新的元素。</p>
<ul>
<li>Test Case 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test +'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a + b)</div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test extend'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a.extend(b))</div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test append'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a.append(b))</div><div class="line"></div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test +='</span>)</div><div class="line"><span class="comment">#dis.dis(lambda : a += b)</span></div><div class="line"></div><div class="line">print(<span class="string">'Test extend'</span>)</div><div class="line">dis.dis(compile(<span class="string">"s = []; s.extend('abc')"</span>, <span class="string">''</span>, <span class="string">'exec'</span>))</div><div class="line">print(<span class="string">'Test +='</span>)</div><div class="line">dis.dis(compile(<span class="string">"s = []; s += 'abc'"</span>, <span class="string">''</span>, <span class="string">'exec'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">Test +</div><div class="line">  <span class="number">6</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_GLOBAL              <span class="number">1</span> (b)</div><div class="line">              <span class="number">4</span> BINARY_ADD</div><div class="line">              <span class="number">6</span> RETURN_VALUE</div><div class="line">Test extend</div><div class="line"> <span class="number">10</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_ATTR                <span class="number">1</span> (extend)</div><div class="line">              <span class="number">4</span> LOAD_GLOBAL              <span class="number">2</span> (b)</div><div class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">              <span class="number">8</span> RETURN_VALUE</div><div class="line">Test append</div><div class="line"> <span class="number">14</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_ATTR                <span class="number">1</span> (append)</div><div class="line">              <span class="number">4</span> LOAD_GLOBAL              <span class="number">2</span> (b)</div><div class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">              <span class="number">8</span> RETURN_VALUE</div><div class="line">Test +=</div><div class="line">Test extend</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">              <span class="number">4</span> LOAD_NAME                <span class="number">0</span> (s)</div><div class="line">              <span class="number">6</span> LOAD_ATTR                <span class="number">1</span> (extend)</div><div class="line">              <span class="number">8</span> LOAD_CONST               <span class="number">0</span> (<span class="string">'abc'</span>)</div><div class="line">             <span class="number">10</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">             <span class="number">12</span> POP_TOP</div><div class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">1</span> (<span class="keyword">None</span>)</div><div class="line">             <span class="number">16</span> RETURN_VALUE</div><div class="line">Test +=</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">              <span class="number">4</span> LOAD_NAME                <span class="number">0</span> (s)</div><div class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">0</span> (<span class="string">'abc'</span>)</div><div class="line">              <span class="number">8</span> INPLACE_ADD</div><div class="line">             <span class="number">10</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">1</span> (<span class="keyword">None</span>)</div><div class="line">             <span class="number">14</span> RETURN_VALUE</div><div class="line"></div><div class="line"><span class="comment"># Errors</span></div><div class="line">  File <span class="string">"dis_test.py"</span>, line <span class="number">20</span></div><div class="line">    dis.dis(<span class="keyword">lambda</span> : a += b)</div><div class="line">                        ^</div><div class="line">SyntaxError: invalid syntax</div></pre></td></tr></table></figure>
<p>从输出结果来看，<code>+</code>，<code>+=</code>操作不会进行函数调用，而<code>extend</code>、<code>append</code>执行过程中会进行函数调用，当不注释<code>dis.dis(lambda : a += b)</code>时，执行会报错，虽然<code>extend</code>效果与<code>+=</code>是等价的，但<code>+=</code>在函数中不能使用非局部变量，而<code>extend</code>方法可以。</p>
<ul>
<li>Test case 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.a</div><div class="line"></div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">temp = Test()</div><div class="line">print(<span class="string">'Before extend'</span>)</div><div class="line">print(temp.a)</div><div class="line">temp.get().extend(b)</div><div class="line">print(<span class="string">'After extend'</span>)</div><div class="line">print(temp.a)</div><div class="line"></div><div class="line">print(<span class="string">'+= ok'</span>)</div><div class="line">print(<span class="string">'Before +='</span>)</div><div class="line">print(temp.a)</div><div class="line">temp.a += b</div><div class="line">print(<span class="string">'After +='</span>)</div><div class="line">print(temp.a)</div><div class="line"></div><div class="line">print(<span class="string">'+= error'</span>)</div><div class="line"><span class="comment">#temp.get() += b</span></div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">Before extend</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">After extend</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">+= ok</div><div class="line">Before +=</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">After +=</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">+= error</div><div class="line"></div><div class="line"><span class="comment"># Error</span></div><div class="line">    temp.get() += b</div><div class="line">    ^</div><div class="line">SyntaxError: can<span class="string">'t assign to function call</span></div></pre></td></tr></table></figure>
<p>上面这个例子是对<code>+=</code>与<code>extend</code>使用范围的对比。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul>
<li><code>extend</code>效果与<code>+=</code>是等价的，主要差异在于字节码执行的方式不同，<code>extend</code>方法涉及了函数调用，开销更大一些。<code>extend</code>比<code>+=</code>应用范围更广，某些情况下只能使用<code>extend</code>。</li>
<li><code>+=</code>会将后面的数据添加到原有的列表中，而<code>+</code>会返回一个新的列表，不改变原有列表。<code>+</code>只能连接列表。</li>
<li><code>append</code>方式会将参数作为列表的一项添加到原有的列表中。</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/725782/in-python-what-is-the-difference-between-append-and/725882" target="_blank" rel="external">https://stackoverflow.com/questions/725782/in-python-what-is-the-difference-between-append-and/725882</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend" target="_blank" rel="external">https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend</a></p>
</li>
<li><p><a href="https://docs.python.org/3.6/tutorial/datastructures.html" target="_blank" rel="external">https://docs.python.org/3.6/tutorial/datastructures.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/3653298/concatenating-two-lists-difference-between-and-extend" target="_blank" rel="external">https://stackoverflow.com/questions/3653298/concatenating-two-lists-difference-between-and-extend</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/39689099/can-someone-explain-this-expression-alena-x-equivalent-to-list-append" target="_blank" rel="external">https://stackoverflow.com/questions/39689099/can-someone-explain-this-expression-alena-x-equivalent-to-list-append</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python中list的append, extend, +=, +区别
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的import vs from ... import</title>
    <link href="http://noahsnail.com/2020/06/17/2020-06-17-Python%E7%9A%84import%20vs%20from%20...%20import/"/>
    <id>http://noahsnail.com/2020/06/17/2020-06-17-Python的import vs from ... import/</id>
    <published>2020-06-17T01:09:06.000Z</published>
    <updated>2020-06-19T06:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>Python代码中，既可以导入模块，也可以导入模块中的对象，导入方式主要分为两种：<code>import &lt;module_name&gt;</code>和<code>from &lt;module_name&gt; import &lt;name(s)&gt;</code>。本文主要对二者进行比较。为了之后测试，定义了一个<code>module</code>模块，<code>module.py</code>文件定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = <span class="string">'abc'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.desc = <span class="string">'Test'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_desc</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.desc)</div></pre></td></tr></table></figure>
<h2 id="2-两种方式对比"><a href="#2-两种方式对比" class="headerlink" title="2. 两种方式对比"></a>2. 两种方式对比</h2><h3 id="2-1-import"><a href="#2-1-import" class="headerlink" title="2.1 import "></a>2.1 import <module_name></module_name></h3><p>Python模块导入的命令之一是<code>import &lt;module_name&gt;</code>，执行了<code>import &lt;module_name&gt;</code>命令之后，Python的运行过程如下：</p>
<ol>
<li>首先在<code>sys.modules</code>中查找<code>module_name</code>，<code>sys.modules</code>中包含所有之前导入模块的缓存。</li>
<li>如果在模块缓存中没找到<code>module_name</code>，Python会继续查找内置模块列表，这些是Python预先安装的模块，可以在Python标准库中找到。</li>
<li>如果还没找到，Python会在<code>sys.path</code>定义的目录列表中查找。这个列表中通常包含当前目录，会首先查找当前目录。</li>
<li>如果找到了<code>module_name</code>，会将其绑定到局部命名空间中，后面可以使用。如果没找到，则会抛出<code>ModuleNotFoundError</code>。</li>
</ol>
<p><strong>注：</strong>导入模块之后，可以通过模块的<code>__file__</code>属性来获取模块所在的目录，其是<code>sys.path</code>中的目录之一。<code>sys.path[0]</code>为空，表示当前目录。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import module</div><div class="line">&gt;&gt;&gt; module.__file__</div><div class="line">&apos;/workspace/heatmap/module.py&apos;</div><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; re.__file__</div><div class="line">&apos;/usr/lib/python3.6/re.py&apos;</div><div class="line">&gt;&gt;&gt; sys.path</div><div class="line">[&apos;&apos;, &apos;/usr/lib/python36.zip&apos;, &apos;/usr/lib/python3.6&apos;, &apos;/usr/lib/python3.6/lib-dynload&apos;, &apos;/usr/local/lib/python3.6/dist-packages&apos;, &apos;/usr/local/lib/python3.6/dist-packages/warpctc_pytorch-0.1-py3.6-linux-x86_64.egg&apos;, &apos;/usr/lib/python3/dist-packages&apos;]</div><div class="line">&gt;&gt;&gt; import os</div><div class="line">&gt;&gt;&gt; os.getcwd()</div><div class="line">&apos;/workspace/heatmap&apos;</div><div class="line">&gt;&gt;&gt; import mod</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ModuleNotFoundError: No module named &apos;mod&apos;</div></pre></td></tr></table></figure>
<p><code>import &lt;module_name&gt;</code>导入模块之后，并不可以直接访问模块中的内容，每个模块都有自己的私有符号表，其是模块中定义的所有对象的全局符号表，模块创建了一个单独的命名空间。执行<code>import &lt;module_name&gt;</code>之后，<code>&lt;module_name&gt;</code>放到了调用者的局部符号表里，但模块中定义的对象仍在模块的私有符号表里。访问模块中定义的对象需要使用<code>.</code>符号。示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> module</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">&lt;module <span class="string">'module'</span> <span class="keyword">from</span> <span class="string">'/workspace/heatmap/module.py'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.b</div><div class="line"><span class="string">'abc'</span></div></pre></td></tr></table></figure>
<p><code>import</code>导入模块时，有时候模块的名字非常长，每次访问模块的内容都很不方便，因此可以使用<code>import ... as ...</code>的方式为模块重命名，便于使用，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> module <span class="keyword">as</span> mod</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mod</div><div class="line">&lt;module <span class="string">'module'</span> <span class="keyword">from</span> <span class="string">'/workspace/heatmap/module.py'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.a</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mod.a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h3 id="2-2-from-import"><a href="#2-2-from-import" class="headerlink" title="2.2 from  import "></a>2.2 from <module_name> import <name(s)></name(s)></module_name></h3><p><code>from &lt;module_name&gt; import &lt;name(s)&gt;</code>命令可以直接导入模块中的对象，命令执行之后，模块中的对象被引用到调用者的环境中，可以直接对其访问，而不需要添加模块前缀。这是方式的导入会将模块中的对象直接添加到调用者的符合表里，并会覆盖调用者符号表里的同名对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> abc</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> Test</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t.print_desc()</div><div class="line">Test</div></pre></td></tr></table></figure>
<p>针对导入对象名称较长问题，也可以使用<code>from ... import ... as ...</code>对导入的对象进行重命名，这种方式也可以用来解决导入对象带来的名称冲突。</p>
<h3 id="2-3-from-import"><a href="#2-3-from-import" class="headerlink" title="2.3 from  import *"></a>2.3 from <module_name> import *</module_name></h3><p><code>from &lt;module_name&gt; import *</code>命令可以无差别导入模块中的大部分对象（下划线开头的部分除外），风险较高且代码阅读不直观，因此这里不对其进行详细介绍，也不推荐这种使用方式。</p>
<h3 id="2-4-dir"><a href="#2-4-dir" class="headerlink" title="2.4 dir()"></a>2.4 dir()</h3><p>Python内置函数<code>dir()</code>会返回命名空间定义的名称列表，通过<code>dir()</code>函数可以查看导入声明前后局部符号表的变化情况，也可以用来查看模块中定义的对象，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;]</div><div class="line">&gt;&gt;&gt; a = [1, 2]</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;]</div><div class="line">&gt;&gt;&gt; from module import b</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;]</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;, &apos;module&apos;]</div><div class="line">&gt;&gt;&gt; from module import Test as t</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;, &apos;module&apos;, &apos;t&apos;]</div><div class="line">&gt;&gt;&gt; dir(module)</div><div class="line">[&apos;Test&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;]</div><div class="line">&gt;&gt;&gt; dir(module.Test)</div><div class="line">[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;print_desc&apos;]</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://realpython.com/absolute-vs-relative-python-imports/" target="_blank" rel="external">https://realpython.com/absolute-vs-relative-python-imports/</a></p>
</li>
<li><p><a href="https://realpython.com/python-modules-packages/" target="_blank" rel="external">https://realpython.com/python-modules-packages/</a></p>
</li>
<li><p><a href="https://docs.python.org/3/reference/import.html" target="_blank" rel="external">https://docs.python.org/3/reference/import.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import" target="_blank" rel="external">https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python的import vs from ... import
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>玩转pytorch中的torchvision.transforms</title>
    <link href="http://noahsnail.com/2020/06/12/2020-06-12-%E7%8E%A9%E8%BD%ACpytorch%E4%B8%AD%E7%9A%84torchvision.transforms/"/>
    <id>http://noahsnail.com/2020/06/12/2020-06-12-玩转pytorch中的torchvision.transforms/</id>
    <published>2020-06-12T01:54:25.000Z</published>
    <updated>2020-06-15T08:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-运行环境"><a href="#0-运行环境" class="headerlink" title="0. 运行环境"></a>0. 运行环境</h2><p>python 3.6.8, pytorch 1.5.0</p>
<h2 id="1-torchvision-transforms"><a href="#1-torchvision-transforms" class="headerlink" title="1. torchvision.transforms"></a>1. torchvision.transforms</h2><p>在深度学习中，计算机视觉(CV)是其中的一大方向，而在CV任务中，图像变换(Image Transform)通常是必不可少的一环，其可以用来对图像进行预处理，数据增强等。本文主要整理PyTorch中<code>torchvision.transforms</code>提供的一些功能(代码加示例)。具体定义及参数可参考<a href="https://pytorch.org/docs/stable/torchvision/transforms.html" target="_blank" rel="external">PyTorch文档</a>。</p>
<h3 id="1-1-torchvision-transforms-Compose"><a href="#1-1-torchvision-transforms-Compose" class="headerlink" title="1.1 torchvision.transforms.Compose"></a>1.1 torchvision.transforms.Compose</h3><p><code>Compose</code>的主要作用是将多个变换组合在一起，具体用法可参考2.5。下面的示例结果左边为原图，右边为保存的结果。</p>
<h2 id="2-Transforms-on-PIL-Image"><a href="#2-Transforms-on-PIL-Image" class="headerlink" title="2. Transforms on PIL Image"></a>2. Transforms on PIL Image</h2><p>这部分主要是对Python最常用的图像处理库Pillow中Image的处理。基本环境及图像如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'tina.jpg'</span>)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment"># Save image</span></div><div class="line">img.save(<span class="string">'image.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/tina.jpg" alt="Demo"></p>
<h3 id="2-1-torchvision-transforms-CenterCrop-size"><a href="#2-1-torchvision-transforms-CenterCrop-size" class="headerlink" title="2.1 torchvision.transforms.CenterCrop(size)"></a>2.1 torchvision.transforms.CenterCrop(size)</h3><p><code>CenterCrop</code>的作用是从图像的中心位置裁剪指定大小的图像。例如一些神经网络的输入图像大小为<code>224*224</code>，而训练图像的大小为<code>256*256</code>，此时就需要对训练图像进行裁剪。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.CenterCrop(size)</div><div class="line">center_crop = transform(img)</div><div class="line">center_crop.save(<span class="string">'center_crop.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/center_crop.jpg" alt="CenterCrop"></p>
<h3 id="2-2-torchvision-transforms-ColorJitter-brightness-0-contrast-0-saturation-0-hue-0"><a href="#2-2-torchvision-transforms-ColorJitter-brightness-0-contrast-0-saturation-0-hue-0" class="headerlink" title="2.2 torchvision.transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)"></a>2.2 torchvision.transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)</h3><p><code>ColorJitter</code>的作用是随机修改图片的亮度、对比度和饱和度，常用来进行数据增强，尤其是训练图像类别不均衡或图像数量较少时。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brightness = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">contrast = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">saturation = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">hue = (<span class="number">0.2</span>, <span class="number">0.4</span>)</div><div class="line">transform = transforms.ColorJitter(brightness, contrast, saturation, hue)</div><div class="line">color_jitter = transform(img)</div><div class="line">color_jitter.save(<span class="string">'color_jitter.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/color_jitter.jpg" alt="ColorJitter"></p>
<h3 id="2-3-torchvision-transforms-FiveCrop-size"><a href="#2-3-torchvision-transforms-FiveCrop-size" class="headerlink" title="2.3 torchvision.transforms.FiveCrop(size)"></a>2.3 torchvision.transforms.FiveCrop(size)</h3><p><code>FiveCrop</code>的作用是分别从图像的四个角以及中心进行五次裁剪，图像分类评估时分为<code>Singl Crop Evaluation/Test</code>和<code>Multi Crop Evaluation/Test</code>，<code>FiveCrop</code>可以用在<code>Multi Crop Evaluation/Test</code>中。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.FiveCrop(size)</div><div class="line">five_crop = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/five_crop.jpg" alt="FiveCrop"></p>
<h3 id="2-4-torchvision-transforms-Grayscale-num-output-channels-1"><a href="#2-4-torchvision-transforms-Grayscale-num-output-channels-1" class="headerlink" title="2.4 torchvision.transforms.Grayscale(num_output_channels=1)"></a>2.4 torchvision.transforms.Grayscale(num_output_channels=1)</h3><p><code>Grayscale</code>的作用是将图像转换为灰度图像，默认通道数为1，通道数为3时，RGB三个通道的值相等。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform = transforms.Grayscale()</div><div class="line">grayscale = transform(img)</div><div class="line">grayscale.save(<span class="string">'grayscale.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/grayscale.jpg" alt="Grayscale"></p>
<h3 id="2-5-torchvision-transforms-Pad-padding-fill-0-padding-mode-’constant’"><a href="#2-5-torchvision-transforms-Pad-padding-fill-0-padding-mode-’constant’" class="headerlink" title="2.5 torchvision.transforms.Pad(padding, fill=0, padding_mode=’constant’)"></a>2.5 torchvision.transforms.Pad(padding, fill=0, padding_mode=’constant’)</h3><p><code>Pad</code>的作用是对图像进行填充，可以设置要填充的值及填充的大小，默认是图像四边都填充。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.Compose([</div><div class="line">        transforms.CenterCrop(size),</div><div class="line">        transforms.Pad(padding, fill)</div><div class="line">])</div><div class="line">pad = transform(img)</div><div class="line">pad.save(<span class="string">'pad.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/pad.jpg" alt="Pad"></p>
<h3 id="2-6-torchvision-transforms-RandomAffine-degrees-translate-None-scale-None-shear-None-resample-False-fillcolor-0"><a href="#2-6-torchvision-transforms-RandomAffine-degrees-translate-None-scale-None-shear-None-resample-False-fillcolor-0" class="headerlink" title="2.6 torchvision.transforms.RandomAffine(degrees, translate=None, scale=None, shear=None, resample=False, fillcolor=0)"></a>2.6 torchvision.transforms.RandomAffine(degrees, translate=None, scale=None, shear=None, resample=False, fillcolor=0)</h3><p><code>RandomAffine</code>的作用是保持图像中心不变的情况下对图像进行随机的仿射变换。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">translate=(<span class="number">0</span>, <span class="number">0.2</span>)</div><div class="line">scale=(<span class="number">0.8</span>, <span class="number">1</span>)</div><div class="line">fillcolor = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomAffine(degrees=degrees, translate=translate, scale=scale, fillcolor=fillcolor)</div><div class="line">random_affine = transform(img)</div><div class="line">random_affine.save(<span class="string">'random_affine.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_affine.jpg" alt="RandomAffine"></p>
<h3 id="2-7-torchvision-transforms-RandomApply-transforms-p-0-5"><a href="#2-7-torchvision-transforms-RandomApply-transforms-p-0-5" class="headerlink" title="2.7 torchvision.transforms.RandomApply(transforms, p=0.5)"></a>2.7 torchvision.transforms.RandomApply(transforms, p=0.5)</h3><p><code>RandomApply</code>的作用是以一定的概率执行提供的<code>transforms</code>操作，即可能执行，也可能不执行。<code>transforms</code>可以是一个，也可以是一系列。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomApply([transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_apply = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_apply.jpg" alt="RandomApply"></p>
<h3 id="2-8-torchvision-transforms-RandomChoice-transforms"><a href="#2-8-torchvision-transforms-RandomChoice-transforms" class="headerlink" title="2.8 torchvision.transforms.RandomChoice(transforms)"></a>2.8 torchvision.transforms.RandomChoice(transforms)</h3><p><code>RandomChoice</code>的作用是从提供的<code>transforms</code>操作中随机选择一个执行。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">transform = transforms.RandomChoice([transforms.RandomAffine(degrees), transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_choice = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_choice.jpg" alt="RandomChoice"></p>
<h3 id="2-9-torchvision-transforms-RandomCrop-size-padding-None-pad-if-needed-False-fill-0-padding-mode-’constant’"><a href="#2-9-torchvision-transforms-RandomCrop-size-padding-None-pad-if-needed-False-fill-0-padding-mode-’constant’" class="headerlink" title="2.9 torchvision.transforms.RandomCrop(size, padding=None, pad_if_needed=False, fill=0, padding_mode=’constant’)"></a>2.9 torchvision.transforms.RandomCrop(size, padding=None, pad_if_needed=False, fill=0, padding_mode=’constant’)</h3><p><code>RandomCrop</code>的作用是在一个随机位置上对图像进行裁剪。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.RandomCrop(size)</div><div class="line">random_crop = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_crop.jpg" alt="RandomCrop"></p>
<h3 id="2-10-torchvision-transforms-RandomGrayscale-p-0-1"><a href="#2-10-torchvision-transforms-RandomGrayscale-p-0-1" class="headerlink" title="2.10 torchvision.transforms.RandomGrayscale(p=0.1)"></a>2.10 torchvision.transforms.RandomGrayscale(p=0.1)</h3><p><code>RandomGrayscale</code>的作用是以一定的概率将图像变为灰度图像。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">0.5</span></div><div class="line">transform = transforms.RandomGrayscale(p)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_grayscale = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_grayscale.jpg" alt="RandomGrayscale"></p>
<h3 id="2-11-torchvision-transforms-RandomHorizontalFlip-p-0-5"><a href="#2-11-torchvision-transforms-RandomHorizontalFlip-p-0-5" class="headerlink" title="2.11 torchvision.transforms.RandomHorizontalFlip(p=0.5)"></a>2.11 torchvision.transforms.RandomHorizontalFlip(p=0.5)</h3><p><code>RandomHorizontalFlip</code>的作用是以一定的概率对图像进行水平翻转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">0.5</span></div><div class="line">transform = transforms.RandomHorizontalFlip(p)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_horizontal_filp = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_horizontal_filp.jpg" alt="RandomHorizontalFlip"></p>
<h3 id="2-12-torchvision-transforms-RandomOrder-transforms"><a href="#2-12-torchvision-transforms-RandomOrder-transforms" class="headerlink" title="2.12 torchvision.transforms.RandomOrder(transforms)"></a>2.12 torchvision.transforms.RandomOrder(transforms)</h3><p><code>RandomOrder</code>的作用是以随机顺序执行提供的<code>transforms</code>操作。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">transform = transforms.RandomOrder([transforms.RandomAffine(degrees), transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_order = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_order.jpg" alt="RandomOrder"></p>
<h3 id="2-13-torchvision-transforms-RandomPerspective-distortion-scale-0-5-p-0-5-interpolation-3-fill-0"><a href="#2-13-torchvision-transforms-RandomPerspective-distortion-scale-0-5-p-0-5-interpolation-3-fill-0" class="headerlink" title="2.13 torchvision.transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3, fill=0)"></a>2.13 torchvision.transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3, fill=0)</h3><p><code>RandomPerspective</code>的作用是以一定的概率对图像进行随机的透视变换。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">distortion_scale = <span class="number">0.5</span></div><div class="line">p = <span class="number">1</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomPerspective(distortion_scale=distortion_scale, p=p, fill=fill)</div><div class="line">random_perspective = transform(img)</div><div class="line">random_perspective.save(<span class="string">'random_perspective.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_perspective.jpg" alt="RandomPerspective"></p>
<h3 id="2-14-torchvision-transforms-RandomResizedCrop-size-scale-0-08-1-0-ratio-0-75-1-3333333333333333-interpolation-2"><a href="#2-14-torchvision-transforms-RandomResizedCrop-size-scale-0-08-1-0-ratio-0-75-1-3333333333333333-interpolation-2" class="headerlink" title="2.14 torchvision.transforms.RandomResizedCrop(size, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=2)"></a>2.14 torchvision.transforms.RandomResizedCrop(size, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=2)</h3><p><code>RandomResizedCrop</code>的作用是以随机大小和随机长宽比裁剪图像并缩放到指定的大小。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">256</span>, <span class="number">256</span>)</div><div class="line">scale=(<span class="number">0.8</span>, <span class="number">1.0</span>)</div><div class="line">ratio=(<span class="number">0.75</span>, <span class="number">1.0</span>)</div><div class="line">transform = transforms.RandomResizedCrop(size=size, scale=scale, ratio=ratio)</div><div class="line">random_resized_crop = transform(img)</div><div class="line">random_resized_crop.save(<span class="string">'random_resized_crop.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_resized_crop.jpg" alt="RandomResizedCrop"></p>
<h3 id="2-15-torchvision-transforms-RandomRotation-degrees-resample-False-expand-False-center-None-fill-None"><a href="#2-15-torchvision-transforms-RandomRotation-degrees-resample-False-expand-False-center-None-fill-None" class="headerlink" title="2.15 torchvision.transforms.RandomRotation(degrees, resample=False, expand=False, center=None, fill=None)"></a>2.15 torchvision.transforms.RandomRotation(degrees, resample=False, expand=False, center=None, fill=None)</h3><p><code>RandomRotation</code>的作用是对图像进行随机旋转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomRotation(degrees=degrees, fill=fill)</div><div class="line">random_rotation = transform(img)</div><div class="line">random_rotation.save(<span class="string">'random_rotation.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_rotation.jpg" alt="RandomRotation"></p>
<h3 id="2-16-torchvision-transforms-RandomSizedCrop-args-kwargs"><a href="#2-16-torchvision-transforms-RandomSizedCrop-args-kwargs" class="headerlink" title="2.16 torchvision.transforms.RandomSizedCrop(args, *kwargs)"></a>2.16 torchvision.transforms.RandomSizedCrop(<em>args, *</em>kwargs)</h3><p>已废弃，参见<code>RandomResizedCrop</code>。</p>
<h3 id="2-17-torchvision-transforms-RandomVerticalFlip-p-0-5"><a href="#2-17-torchvision-transforms-RandomVerticalFlip-p-0-5" class="headerlink" title="2.17 torchvision.transforms.RandomVerticalFlip(p=0.5)"></a>2.17 torchvision.transforms.RandomVerticalFlip(p=0.5)</h3><p><code>RandomVerticalFlip</code>的作用是以一定的概率对图像进行垂直翻转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">1</span></div><div class="line">transform = transforms.RandomVerticalFlip(p)</div><div class="line">random_vertical_filp = transform(img)</div><div class="line">random_vertical_filp.save(<span class="string">'random_vertical_filp.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_vertical_filp.jpg" alt="RandomVerticalFlip"></p>
<h3 id="2-18-torchvision-transforms-Resize-size-interpolation-2"><a href="#2-18-torchvision-transforms-Resize-size-interpolation-2" class="headerlink" title="2.18 torchvision.transforms.Resize(size, interpolation=2)"></a>2.18 torchvision.transforms.Resize(size, interpolation=2)</h3><p><code>Resize</code>的作用是对图像进行缩放。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.Resize(size)</div><div class="line">resize_img = transform(img)</div><div class="line">resize_img.save(<span class="string">'resize_img.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/resize_img.jpg" alt="Resize"></p>
<h3 id="2-19-torchvision-transforms-Scale-args-kwargs"><a href="#2-19-torchvision-transforms-Scale-args-kwargs" class="headerlink" title="2.19 torchvision.transforms.Scale(args, *kwargs)"></a>2.19 torchvision.transforms.Scale(<em>args, *</em>kwargs)</h3><p>已废弃，参加<code>Resize</code>。</p>
<h3 id="2-20-torchvision-transforms-TenCrop-size-vertical-flip-False"><a href="#2-20-torchvision-transforms-TenCrop-size-vertical-flip-False" class="headerlink" title="2.20 torchvision.transforms.TenCrop(size, vertical_flip=False)"></a>2.20 torchvision.transforms.TenCrop(size, vertical_flip=False)</h3><p><code>TenCrop</code>与2.3类似，除了对原图裁剪5个图像之外，还对其翻转图像裁剪了5个图像。</p>
<h2 id="3-Transforms-on-torch-Tensor"><a href="#3-Transforms-on-torch-Tensor" class="headerlink" title="3. Transforms on torch.*Tensor"></a>3. Transforms on torch.*Tensor</h2><h3 id="3-1-torchvision-transforms-LinearTransformation-transformation-matrix-mean-vector"><a href="#3-1-torchvision-transforms-LinearTransformation-transformation-matrix-mean-vector" class="headerlink" title="3.1 torchvision.transforms.LinearTransformation(transformation_matrix, mean_vector)"></a>3.1 torchvision.transforms.LinearTransformation(transformation_matrix, mean_vector)</h3><p><code>LinearTransformation</code>的作用是使用变换矩阵和离线计算的均值向量对图像张量进行变换，可以用在白化变换中，白化变换用来去除输入数据的冗余信息。常用在数据预处理中。</p>
<h3 id="3-2-torchvision-transforms-Normalize-mean-std-inplace-False"><a href="#3-2-torchvision-transforms-Normalize-mean-std-inplace-False" class="headerlink" title="3.2 torchvision.transforms.Normalize(mean, std, inplace=False)"></a>3.2 torchvision.transforms.Normalize(mean, std, inplace=False)</h3><p><code>Normalize</code>的作用是用均值和标准差对<code>Tensor</code>进行归一化处理。常用在对输入图像的预处理中，例如Imagenet竞赛的许多分类网络都对输入图像进行了归一化操作。</p>
<h3 id="3-3-torchvision-transforms-RandomErasing-p-0-5-scale-0-02-0-33-ratio-0-3-3-3-value-0-inplace-False"><a href="#3-3-torchvision-transforms-RandomErasing-p-0-5-scale-0-02-0-33-ratio-0-3-3-3-value-0-inplace-False" class="headerlink" title="3.3 torchvision.transforms.RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)"></a>3.3 torchvision.transforms.RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)</h3><p><code>RandomErasing</code>的作用是随机选择图像中的一块区域，擦除其像素，主要用来进行数据增强。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">1.0</span></div><div class="line">scale = (<span class="number">0.2</span>, <span class="number">0.3</span>)</div><div class="line">ratio = (<span class="number">0.5</span>, <span class="number">1.0</span>)</div><div class="line">value = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line"></div><div class="line">transform = transforms.Compose([</div><div class="line">                transforms.ToTensor(),</div><div class="line">                transforms.RandomErasing(p=p, scale=scale, ratio=ratio, value=value),</div><div class="line">                transforms.ToPILImage()</div><div class="line">            ])</div><div class="line">random_erasing = transform(img)</div><div class="line">random_erasing.save(<span class="string">'random_erasing.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_erasing.jpg" alt="RandomErasing"></p>
<h2 id="4-Conversion-Transforms"><a href="#4-Conversion-Transforms" class="headerlink" title="4 Conversion Transforms"></a>4 Conversion Transforms</h2><h3 id="4-1-torchvision-transforms-ToPILImage-mode-None"><a href="#4-1-torchvision-transforms-ToPILImage-mode-None" class="headerlink" title="4.1 torchvision.transforms.ToPILImage(mode=None)"></a>4.1 torchvision.transforms.ToPILImage(mode=None)</h3><p><code>ToPILImage</code>的作用是将pytorch的<code>Tensor</code>或<code>numpy.ndarray</code>转为PIL的Image。示例代码及结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">img = Image.open('tina.jpg')</div><div class="line">transform = transforms.ToTensor()</div><div class="line">img = transform(img)</div><div class="line">print(img.size())</div><div class="line">img_r = img[0, :, :]</div><div class="line">img_g = img[1, :, :]</div><div class="line">img_b = img[2, :, :]</div><div class="line">print(type(img_r))</div><div class="line">print(img_r.size())</div><div class="line">transform = transforms.ToPILImage()</div><div class="line">img_r = transform(img_r)</div><div class="line">img_g = transform(img_g)</div><div class="line">img_b = transform(img_b)</div><div class="line">print(type(img_r))</div><div class="line">img_r.save('img_r.jpg')</div><div class="line">img_g.save('img_g.jpg')</div><div class="line">img_b.save('img_b.jpg')</div><div class="line"></div><div class="line"># output</div><div class="line">torch.Size([3, 256, 256])</div><div class="line">&lt;class 'torch.Tensor'&gt;</div><div class="line">torch.Size([256, 256])</div><div class="line">&lt;class 'PIL.Image.Image'&gt;</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/pil_img.jpg" alt="ToPILImage"></p>
<h3 id="4-2-torchvision-transforms-ToTensor"><a href="#4-2-torchvision-transforms-ToTensor" class="headerlink" title="4.2 torchvision.transforms.ToTensor"></a>4.2 torchvision.transforms.ToTensor</h3><p><code>ToTensor</code>的作用是将<code>PIL Image</code>或<code>numpy.ndarray</code>转为pytorch的<code>Tensor</code>，并会将像素值由<code>[0, 255]</code>变为<code>[0, 1]</code>之间。通常是在神经网络训练中读取输入图像之后使用。示例代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">img = Image.open('tina.jpg')</div><div class="line">print(type(img))</div><div class="line">print(img.size)</div><div class="line">transform = transforms.ToTensor()</div><div class="line">img = transform(img)</div><div class="line">print(type(img))</div><div class="line">print(img.size())</div><div class="line"></div><div class="line"># output</div><div class="line">&lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;</div><div class="line">(256, 256)</div><div class="line">&lt;class 'torch.Tensor'&gt;</div><div class="line">torch.Size([3, 256, 256])</div></pre></td></tr></table></figure>
<h2 id="5-Code"><a href="#5-Code" class="headerlink" title="5. Code"></a>5. Code</h2><p>代码参见<a href="https://github.com/SnailTyan/deep-learning-tools/blob/master/transforms.py" target="_blank" rel="external">https://github.com/SnailTyan/deep-learning-tools/blob/master/transforms.py</a>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://pytorch.org/docs/stable/torchvision/transforms.html" target="_blank" rel="external">https://pytorch.org/docs/stable/torchvision/transforms.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      玩转pytorch中的torchvision.transforms
    
    </summary>
    
      <category term="PyTorch" scheme="http://noahsnail.com/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://noahsnail.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Python中的list(), dict(), [], {}</title>
    <link href="http://noahsnail.com/2020/06/03/2020-06-03-Python%E4%B8%AD%E7%9A%84list(),%20dict(),%20%5B%5D,%20%7B%7D/"/>
    <id>http://noahsnail.com/2020/06/03/2020-06-03-Python中的list(), dict(), [], {}/</id>
    <published>2020-06-03T06:50:15.000Z</published>
    <updated>2020-06-03T09:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在Python中，<code>list</code>，<code>dict</code>作为Python的基础数据结构，经常会用到，其定义形式通常有下面两种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = []</div><div class="line">b = list()</div><div class="line"></div><div class="line">c = &#123;&#125;</div><div class="line">d = dict()</div></pre></td></tr></table></figure>
<p>二者有什么区别呢？</p>
<h2 id="2-list-vs-，dict-vs"><a href="#2-list-vs-，dict-vs" class="headerlink" title="2. list() vs []，dict() vs {}"></a>2. <code>list()</code> vs <code>[]</code>，<code>dict()</code> vs <code>{}</code></h2><ul>
<li>运行时间</li>
</ul>
<p>首先比较一下二者的运行时间，<code>timeit</code>模块主要用来测量Python小段代码的执行时间，默认执行100万次。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'[]'</span>)</div><div class="line"><span class="number">0.05389202758669853</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'list()'</span>)</div><div class="line"><span class="number">0.1250211838632822</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'&#123;&#125;'</span>)</div><div class="line"><span class="number">0.06583642773330212</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'dict()'</span>)</div><div class="line"><span class="number">0.1366278938949108</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;&#125;)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>从时间上来看，明显<code>[]</code>与<code>{}</code>的定义形式更快。</p>
<ul>
<li>数据类型转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [a]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = list(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = [s]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = list(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">[<span class="string">'abc'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，<code>list()</code>除了可以定义之外，还可以对将其它数据类型转换为<code>list</code>，而<code>[]</code>则没有数据类型转换的功能。</p>
<h2 id="3-为什么-比list-更快"><a href="#3-为什么-比list-更快" class="headerlink" title="3. 为什么[]比list()更快"></a>3. 为什么<code>[]</code>比<code>list()</code>更快</h2><p>dis库是Python自带的一个库，可以用来分析字节码，而字节码是CPython解释器的实现细节。<code>[]</code>，<code>list()</code>的字节码对比如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dis</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(<span class="keyword">lambda</span> : [])</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> RETURN_VALUE</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(<span class="keyword">lambda</span> : list())</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (list)</div><div class="line">              <span class="number">2</span> CALL_FUNCTION            <span class="number">0</span></div><div class="line">              <span class="number">4</span> RETURN_VALUE</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，<code>list()</code>有符号查找和函数调用的开销，因此其速度更慢。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><code>[]</code>，<code>{}</code>定义数据类型速度更快，<code>list()</code>，<code>dict()</code>除了能定义数据类型之外，还可以对数据进行类型转换。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>1.<a href="https://stackoverflow.com/questions/5790860/and-vs-list-and-dict-which-is-better" target="_blank" rel="external">https://stackoverflow.com/questions/5790860/and-vs-list-and-dict-which-is-better</a></p>
<p>2.<a href="https://www.quora.com/In-Python-any-difference-between-using-and-list-or-between-and-dict" target="_blank" rel="external">https://www.quora.com/In-Python-any-difference-between-using-and-list-or-between-and-dict</a></p>
<p>3.<a href="https://docs.python.org/zh-cn/3/library/timeit.html" target="_blank" rel="external">https://docs.python.org/zh-cn/3/library/timeit.html</a></p>
<p>4.<a href="https://docs.python.org/zh-cn/3/library/dis.html" target="_blank" rel="external">https://docs.python.org/zh-cn/3/library/dis.html</a></p>
<p>5.<a href="https://stackoverflow.com/questions/30216000/why-is-faster-than-list" target="_blank" rel="external">https://stackoverflow.com/questions/30216000/why-is-faster-than-list</a></p>
]]></content>
    
    <summary type="html">
    
      Python中的list(), dict(), [], {}
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch中requires_grad_(), detach(), torch.no_grad()的区别</title>
    <link href="http://noahsnail.com/2020/05/29/2020-05-29-Pytorch%E4%B8%ADrequires_grad_(),%20detach(),%20torch.no_grad()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://noahsnail.com/2020/05/29/2020-05-29-Pytorch中requires_grad_(), detach(), torch.no_grad()的区别/</id>
    <published>2020-05-29T02:44:02.000Z</published>
    <updated>2020-05-29T08:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9, Pytorch 1.5.0</p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p><code>Tensor</code>是一个多维矩阵，其中包含所有的元素为同一数据类型。默认数据类型为<code>torch.float32</code>。</p>
<ul>
<li>示例一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0])</div><div class="line">&gt;&gt;&gt; a.data</div><div class="line">tensor([1.])</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; a.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a.dtype</div><div class="line">torch.float32</div><div class="line">&gt;&gt;&gt; a.item()</div><div class="line">1.0</div><div class="line">&gt;&gt;&gt; type(a.item())</div><div class="line">&lt;class &apos;float&apos;&gt;</div></pre></td></tr></table></figure>
<p><code>Tensor</code>中只有一个数字时，使用<code>torch.Tensor.item()</code>可以得到一个Python数字。<code>requires_grad</code>为<code>True</code>时，表示需要计算<code>Tensor</code>的梯度。<code>requires_grad=False</code>可以用来冻结部分网络，只更新另一部分网络的参数。</p>
<ul>
<li>示例二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0, 2.0])</div><div class="line">&gt;&gt;&gt; b = a.data</div><div class="line">&gt;&gt;&gt; id(b)</div><div class="line">139808984381768</div><div class="line">&gt;&gt;&gt; id(a)</div><div class="line">139811772112328</div><div class="line">&gt;&gt;&gt; b.grad</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; b[0] = 5.0</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([5., 2.])</div><div class="line">&gt;&gt;&gt; a</div><div class="line">tensor([5., 2.])</div></pre></td></tr></table></figure>
<p><code>a.data</code>返回的是一个新的<code>Tensor</code>对象<code>b</code>，<code>a, b</code>的<code>id</code>不同，说明二者不是同一个<code>Tensor</code>，但<code>b</code>与<code>a</code>共享数据的存储空间，即二者的数据部分指向同一块内存，因此修改<code>b</code>的元素时，<code>a</code>的元素也对应修改。</p>
<h2 id="2-requiresgrad-与detach"><a href="#2-requiresgrad-与detach" class="headerlink" title="2. requiresgrad()与detach()"></a>2. requires<em>grad</em>()与detach()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0, 2.0])</div><div class="line">&gt;&gt;&gt; a.data</div><div class="line">tensor([1., 2.])</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; a.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a.requires_grad_()</div><div class="line">tensor([1., 2.], requires_grad=True)</div><div class="line">&gt;&gt;&gt; c = a.pow(2).sum()</div><div class="line">&gt;&gt;&gt; c.backward()</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">tensor([2., 4.])</div><div class="line">&gt;&gt;&gt; b = a.detach()</div><div class="line">&gt;&gt;&gt; b.grad</div><div class="line">&gt;&gt;&gt; b.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([1., 2.])</div><div class="line">&gt;&gt;&gt; b[0] = 6</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([6., 2.])</div><div class="line">&gt;&gt;&gt; a</div><div class="line">tensor([6., 2.], requires_grad=True)</div></pre></td></tr></table></figure>
<ul>
<li><code>requires_grad_()</code></li>
</ul>
<p><code>requires_grad_()</code>函数会改变<code>Tensor</code>的<code>requires_grad</code>属性并返回<code>Tensor</code>，修改<code>requires_grad</code>的操作是原位操作(in place)。其默认参数为<code>requires_grad=True</code>。<code>requires_grad=True</code>时，自动求导会记录对<code>Tensor</code>的操作，<code>requires_grad_()</code>的主要用途是告诉自动求导开始记录对<code>Tensor</code>的操作。</p>
<ul>
<li><code>detach()</code></li>
</ul>
<p><code>detach()</code>函数会返回一个新的<code>Tensor</code>对象<code>b</code>，并且新<code>Tensor</code>是与当前的计算图分离的，其<code>requires_grad</code>属性为<code>False</code>，反向传播时不会计算其梯度。<code>b</code>与<code>a</code>共享数据的存储空间，二者指向同一块内存。</p>
<p><strong>注</strong>：共享内存空间只是共享的数据部分，<code>a.grad</code>与<code>b.grad</code>是不同的。</p>
<h2 id="3-torch-no-grad"><a href="#3-torch-no-grad" class="headerlink" title="3. torch.no_grad()"></a>3. torch.no_grad()</h2><p><code>torch.no_grad()</code>是一个上下文管理器，用来禁止梯度的计算，通常用来网络推断中，它可以减少计算内存的使用量。</p>
<figure class="highlight python"><figcaption><span>3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = torch.tensor([<span class="number">1.0</span>, <span class="number">2.0</span>], requires_grad=<span class="keyword">True</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> torch.no_grad():</div><div class="line"><span class="meta">... </span>    b = n.pow(<span class="number">2</span>).sum()</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">tensor(<span class="number">5.</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.requires_grad</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.pow(<span class="number">2</span>).sum()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.requires_grad</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>上面的例子中，当<code>a</code>的<code>requires_grad=True</code>时，不使用<code>torch.no_grad()</code>，<code>c.requires_grad</code>为<code>True</code>，使用<code>torch.no_grad()</code>时，<code>b.requires_grad</code>为<code>False</code>，当不需要进行反向传播时（推断）或不需要计算梯度（网络输入）时，<code>requires_grad=True</code>会占用更多的计算资源及存储资源。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><code>requires_grad_()</code>会修改<code>Tensor</code>的<code>requires_grad</code>属性。</p>
<p><code>detach()</code>会返回一个与计算图分离的新<code>Tensor</code>，新<code>Tensor</code>不会在反向传播中计算梯度，会在特定场合使用。</p>
<p><code>torch.no_grad()</code>更节省计算资源和存储资源，其作用域范围内的操作不会构建计算图，常用在网络推断中。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://pytorch.org/docs/stable/tensors.html" target="_blank" rel="external">https://pytorch.org/docs/stable/tensors.html</a></li>
<li><a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.requires_grad_" target="_blank" rel="external">https://pytorch.org/docs/stable/tensors.html#torch.Tensor.requires<em>grad</em></a></li>
<li><a href="https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach" target="_blank" rel="external">https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach</a></li>
<li><a href="https://pytorch.org/docs/master/generated/torch.no_grad.html" target="_blank" rel="external">https://pytorch.org/docs/master/generated/torch.no_grad.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Pytorch中requires_grad_(), detach(), torch.no_grad()的区别
    
    </summary>
    
      <category term="PyTorch" scheme="http://noahsnail.com/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://noahsnail.com/tags/PyTorch/"/>
    
  </entry>
  
</feed>
