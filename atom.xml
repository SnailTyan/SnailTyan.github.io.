<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noahsnail.com/"/>
  <updated>2021-07-21T08:05:21.402Z</updated>
  <id>http://noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 994. Rotting Oranges</title>
    <link href="http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-994-Rotting-Oranges/"/>
    <id>http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-994-Rotting-Oranges/</id>
    <published>2021-07-21T07:50:39.148Z</published>
    <updated>2021-07-21T08:05:21.402Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Rotting_Oranges.png" alt="Rotting Oranges"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先统计新鲜水果数量，如果不存在，则时间为<code>0</code>，同时记录腐败水果的位置。按照广度优先搜索，记录下一轮腐败水果的位置，同时时间加<code>1</code>，新鲜水果数量减<code>1</code>，递归执行，直至不存在腐败的水果位置或者新鲜水果为<code>0</code>。如果此时仍存在新鲜水果，则返回<code>-1</code>，否则，返回时间。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">orangesRotting</span><span class="params">(self, grid: List[List[int]])</span> -&gt; int:</span></div><div class="line">        m = len(grid)</div><div class="line">        n = len(grid[<span class="number">0</span>])</div><div class="line">        fresh = <span class="number">0</span></div><div class="line">        rotten = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(n):</div><div class="line">                <span class="keyword">if</span> grid[i][j] == <span class="number">2</span>:</div><div class="line">                    rotten.append([i, j])</div><div class="line">                <span class="keyword">elif</span> grid[i][j] == <span class="number">1</span>:</div><div class="line">                    fresh += <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> fresh == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        time = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> rotten <span class="keyword">and</span> fresh:</div><div class="line">            temp = []</div><div class="line">            <span class="keyword">for</span> x, y <span class="keyword">in</span> rotten:</div><div class="line">                <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">and</span> grid[x<span class="number">-1</span>][y] == <span class="number">1</span>:</div><div class="line">                    grid[x<span class="number">-1</span>][y] = <span class="number">2</span></div><div class="line">                    temp.append([x<span class="number">-1</span>, y])</div><div class="line">                    fresh -= <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> y &gt; <span class="number">0</span> <span class="keyword">and</span> grid[x][y<span class="number">-1</span>] == <span class="number">1</span>:</div><div class="line">                    grid[x][y<span class="number">-1</span>] = <span class="number">2</span></div><div class="line">                    temp.append([x, y<span class="number">-1</span>])</div><div class="line">                    fresh -= <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> x &lt; m - <span class="number">1</span> <span class="keyword">and</span> grid[x+<span class="number">1</span>][y] == <span class="number">1</span>:</div><div class="line">                    grid[x+<span class="number">1</span>][y] = <span class="number">2</span></div><div class="line">                    temp.append([x+<span class="number">1</span>, y])</div><div class="line">                    fresh -= <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> y &lt; n - <span class="number">1</span> <span class="keyword">and</span> grid[x][y+<span class="number">1</span>] == <span class="number">1</span>:</div><div class="line">                    grid[x][y+<span class="number">1</span>] = <span class="number">2</span></div><div class="line">                    temp.append([x, y+<span class="number">1</span>])</div><div class="line">                    fresh -= <span class="number">1</span></div><div class="line">            time += <span class="number">1</span></div><div class="line">            rotten = temp</div><div class="line">        <span class="keyword">if</span> fresh == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> time</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/rotting-oranges/" target="_blank" rel="external">https://leetcode.com/problems/rotting-oranges/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 994. Rotting Oranges
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 833. Find And Replace in String</title>
    <link href="http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-833-Find-And-Replace-in-String/"/>
    <id>http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-833-Find-And-Replace-in-String/</id>
    <published>2021-07-21T06:53:42.348Z</published>
    <updated>2021-07-21T07:11:01.270Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Find_And_Replace_in_String.png" alt="Find And Replace in String"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先排序，根据索引排序，对源字符串和目标字符串也根据索引的排序顺序排序，这样做主要为了判断是否有重叠字符串。遍历所有索引，如果当前索引加上源字符串的长度与下一个索引重叠，则当前索引以及下一个索引对应的字符串都不能替换。如果字符串<code>s</code>根据索引对应的字串与源字符串相等，则替换对应的子串，由于需要同时替换，因此<code>s</code>保持不变，使用<code>result</code>保存替换的结果，对于不进行替换的部分，根据位置保留到<code>result</code>中。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findReplaceString</span><span class="params">(self, s: str, indices: List[int], sources: List[str], targets: List[str])</span> -&gt; str:</span></div><div class="line">        k = len(indices)</div><div class="line">        order = sorted(range(k), key=<span class="keyword">lambda</span> x: indices[x])</div><div class="line">        indices = [indices[i] <span class="keyword">for</span> i <span class="keyword">in</span> order]</div><div class="line">        sources = [sources[i] <span class="keyword">for</span> i <span class="keyword">in</span> order]</div><div class="line">        targets = [targets[i] <span class="keyword">for</span> i <span class="keyword">in</span> order]</div><div class="line">        result = <span class="string">''</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        start = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; k:</div><div class="line">            index = indices[i]</div><div class="line">            source = sources[i]</div><div class="line">            target = targets[i]</div><div class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; k <span class="keyword">and</span> index + len(source) - <span class="number">1</span> &gt;= indices[i+<span class="number">1</span>]:</div><div class="line">                i += <span class="number">2</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            n = len(source)</div><div class="line">            <span class="keyword">if</span> s[index:index+n] == source:</div><div class="line">                result += s[start:index]</div><div class="line">                result += target</div><div class="line">                start = index + n</div><div class="line">            i += <span class="number">1</span></div><div class="line">        result += s[start:]</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findReplaceString</span><span class="params">(self, s: str, indices: List[int], sources: List[str], targets: List[str])</span> -&gt; str:</span></div><div class="line">        k = len(indices)</div><div class="line">        data = sorted(zip(indices, sources, targets), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</div><div class="line">        result = <span class="string">''</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        start = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; k:</div><div class="line">            index, source, target = data[i]</div><div class="line">            n = len(source)</div><div class="line">            <span class="keyword">if</span> i + <span class="number">1</span> &lt; k <span class="keyword">and</span> index + n - <span class="number">1</span> &gt;= data[i+<span class="number">1</span>][<span class="number">0</span>]:</div><div class="line">                i += <span class="number">2</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line">            <span class="keyword">if</span> s[index:index+n] == source:</div><div class="line">                result += s[start:index]</div><div class="line">                result += target</div><div class="line">                start = index + n</div><div class="line">            i += <span class="number">1</span></div><div class="line">        result += s[start:]</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/find-and-replace-in-string/" target="_blank" rel="external">https://leetcode.com/problems/find-and-replace-in-string/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 833. Find And Replace in String
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1288. Remove Covered Intervals</title>
    <link href="http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1288-Remove-Covered-Intervals/"/>
    <id>http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1288-Remove-Covered-Intervals/</id>
    <published>2021-07-21T05:30:14.960Z</published>
    <updated>2021-07-21T05:48:08.392Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Remove_Covered_Intervals.png" alt="Remove Covered Intervals"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先排序，先根据左侧排序，左侧相等再根据右侧排序，排序后相邻元素的左侧一定是非递减的。遍历相邻两个元素，有两种可能，要不左边包含右边，要不右边包含左边，如果满足条件，则移除对应元素，索引位置不变，不满足上述两种情况，则说明后一个元素的左侧及右侧都大于当前元素，索引加<code>1</code>，继续比较。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">removeCoveredIntervals</span><span class="params">(self, intervals: List[List[int]])</span> -&gt; int:</span></div><div class="line">        intervals.sort(key=<span class="keyword">lambda</span> x: (x[<span class="number">0</span>], x[<span class="number">1</span>]))</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(intervals) - <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> intervals[i][<span class="number">1</span>] &gt;= intervals[i+<span class="number">1</span>][<span class="number">1</span>]:</div><div class="line">                intervals.pop(i+<span class="number">1</span>)</div><div class="line">            <span class="keyword">elif</span> intervals[i][<span class="number">0</span>] == intervals[i+<span class="number">1</span>][<span class="number">0</span>]:</div><div class="line">                intervals.pop(i)</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                i += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> len(intervals)</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/remove-covered-intervals/" target="_blank" rel="external">https://leetcode.com/problems/remove-covered-intervals/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1288. Remove Covered Intervals
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1502. Can Make Arithmetic Progression From Sequence</title>
    <link href="http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1502-Can-Make-Arithmetic-Progression-From-Sequence/"/>
    <id>http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1502-Can-Make-Arithmetic-Progression-From-Sequence/</id>
    <published>2021-07-21T03:02:50.444Z</published>
    <updated>2021-07-21T03:19:26.434Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Can_Make_Arithmetic_Progression_From_Sequence.png" alt="Can Make Arithmetic Progression From Sequence"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先排序，再判断其是否是算术(等差)数组。Version 2以空间换时间，找出最大最小值，最大最小值相等，则数全相同为等差数列，如果最大最小值之差不能整除数组长度减<code>1</code>，说明是非等差数列。构造等差数列，判断其是否是数组中的元素。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(self, arr: List[int])</span> -&gt; bool:</span></div><div class="line">        <span class="keyword">if</span> len(arr) == <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        arr.sort()</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">2</span>, len(arr)):</div><div class="line">            <span class="keyword">if</span> arr[i] - arr[i<span class="number">-1</span>] != arr[i<span class="number">-1</span>] - arr[i<span class="number">-2</span>]:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">canMakeArithmeticProgression</span><span class="params">(self, arr: List[int])</span> -&gt; bool:</span></div><div class="line">        <span class="keyword">if</span> len(arr) == <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        stat = &#123;&#125;</div><div class="line">        minimum = arr[<span class="number">0</span>]</div><div class="line">        maximum = arr[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> arr:</div><div class="line">            minimum = min(minimum, x)</div><div class="line">            maximum = max(maximum, x)</div><div class="line">            stat[x] = x</div><div class="line">        <span class="keyword">if</span> maximum - minimum == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">if</span> (maximum - minimum) % (len(arr) - <span class="number">1</span>) != <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        step = (maximum - minimum) // (len(arr) - <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(minimum, maximum+<span class="number">1</span>, step):</div><div class="line">            <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> stat:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/" target="_blank" rel="external">https://leetcode.com/problems/can-make-arithmetic-progression-from-sequence/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1502. Can Make Arithmetic Progression From Sequence
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1630. Arithmetic Subarrays</title>
    <link href="http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1630-Arithmetic-Subarrays/"/>
    <id>http://noahsnail.com/2021/07/21/2021-07-21-Leetcode-1630-Arithmetic-Subarrays/</id>
    <published>2021-07-21T02:14:29.721Z</published>
    <updated>2021-07-21T02:59:01.720Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Arithmetic_Subarrays.png" alt="Arithmetic Subarrays"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，根据左右索引，对数组切片，然后排序，判断其是否是算术(等差)子数组。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">checkArithmeticSubarrays</span><span class="params">(self, nums: List[int], l: List[int], r: List[int])</span> -&gt; List[bool]:</span></div><div class="line">        m = len(l)</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(m):</div><div class="line">            left = l[i]</div><div class="line">            right = r[i]</div><div class="line">            temp = nums[left:right+<span class="number">1</span>]</div><div class="line">            temp.sort()</div><div class="line">            flag = <span class="keyword">True</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">2</span>, len(temp)):</div><div class="line">                <span class="keyword">if</span> temp[j] - temp[j<span class="number">-1</span>] != temp[j<span class="number">-1</span>] - temp[j<span class="number">-2</span>]:</div><div class="line">                    flag = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">            result.append(flag)</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/arithmetic-subarrays/" target="_blank" rel="external">https://leetcode.com/problems/arithmetic-subarrays/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1630. Arithmetic Subarrays
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 413. Arithmetic Slices</title>
    <link href="http://noahsnail.com/2021/07/20/2021-07-20-Leetcode-413-Arithmetic-Slices/"/>
    <id>http://noahsnail.com/2021/07/20/2021-07-20-Leetcode-413-Arithmetic-Slices/</id>
    <published>2021-07-20T09:03:11.782Z</published>
    <updated>2021-07-21T02:59:12.203Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Arithmetic_Slices.png" alt="Arithmetic Slices"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，计算每一数与其前一个数字的差，当有三个数且其连续差相等时构成一个算术(等差)数组，数字个数每加<code>1</code>子数组数量对应加<code>1</code>，不符合算术数组的元素一定不位于算术子数组中。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></div><div class="line">        n = len(nums)</div><div class="line">        count = <span class="number">0</span></div><div class="line">        diff = <span class="number">0</span></div><div class="line">        pre = <span class="number">10000</span></div><div class="line">        temp = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">            diff = nums[i] - nums[i<span class="number">-1</span>]</div><div class="line">            <span class="keyword">if</span> diff == pre:</div><div class="line">                temp += <span class="number">1</span></div><div class="line">                count += temp</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                temp = <span class="number">0</span></div><div class="line">            pre = diff</div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/arithmetic-slices/" target="_blank" rel="external">https://leetcode.com/problems/arithmetic-slices/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 413. Arithmetic Slices
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1629. Slowest Key</title>
    <link href="http://noahsnail.com/2021/07/20/2021-07-20-Leetcode-1629-Slowest-Key/"/>
    <id>http://noahsnail.com/2021/07/20/2021-07-20-Leetcode-1629-Slowest-Key/</id>
    <published>2021-07-20T01:24:26.378Z</published>
    <updated>2021-07-20T09:04:34.364Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Slowest_Key.png" alt="Slowest Key"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，遍历每个字符，计算其时间间隔，如果比之前的大，则更新时间间隔及字符，如果相等，则比较字符大小，判断是否更新字符。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">slowestKey</span><span class="params">(self, releaseTimes: List[int], keysPressed: str)</span> -&gt; str:</span></div><div class="line">        n = len(keysPressed)</div><div class="line">        key = keysPressed[<span class="number">0</span>]</div><div class="line">        time = releaseTimes[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, n):</div><div class="line">            temp = releaseTimes[i] - releaseTimes[i<span class="number">-1</span>]</div><div class="line">            <span class="keyword">if</span> temp &gt; time:</div><div class="line">                key = keysPressed[i]</div><div class="line">                time = temp</div><div class="line">            <span class="keyword">elif</span> temp == time <span class="keyword">and</span> keysPressed[i] &gt; key:</div><div class="line">                key = keysPressed[i]</div><div class="line">        <span class="keyword">return</span> key</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/slowest-key/" target="_blank" rel="external">https://leetcode.com/problems/slowest-key/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1629. Slowest Key
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 409. Longest Palindrome</title>
    <link href="http://noahsnail.com/2021/07/16/2021-07-15-Leetcode-409-Longest-Palindrome/"/>
    <id>http://noahsnail.com/2021/07/16/2021-07-15-Leetcode-409-Longest-Palindrome/</id>
    <published>2021-07-16T03:23:14.657Z</published>
    <updated>2021-07-16T05:12:39.806Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Longest_Palindrome.png" alt="Longest Palindrome"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，统计字符个数，偶数的直接相加，奇数的减<code>1</code>相加，存在奇数则最终结果加<code>1</code>，即位于正中间。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestPalindrome</span><span class="params">(self, s: str)</span> -&gt; int:</span></div><div class="line">        stat = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</div><div class="line">            stat[ch] = stat.get(ch, <span class="number">0</span>) + <span class="number">1</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        flag = <span class="keyword">False</span></div><div class="line">        <span class="keyword">for</span> v <span class="keyword">in</span> stat.values():</div><div class="line">            <span class="keyword">if</span> v % <span class="number">2</span> == <span class="number">1</span>:</div><div class="line">                flag = <span class="keyword">True</span></div><div class="line">                count += v <span class="number">-1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                count += v</div><div class="line">        <span class="keyword">if</span> flag:</div><div class="line">            count += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/longest-palindrome/" target="_blank" rel="external">https://leetcode.com/problems/longest-palindrome/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 409. Longest Palindrome
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1048. Longest String Chain</title>
    <link href="http://noahsnail.com/2021/07/16/2021-07-16-Leetcode-1048-Longest-String-Chain/"/>
    <id>http://noahsnail.com/2021/07/16/2021-07-16-Leetcode-1048-Longest-String-Chain/</id>
    <published>2021-07-16T02:46:28.644Z</published>
    <updated>2021-07-16T03:06:06.213Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Longest_String_Chain.png" alt="Longest String Chain"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先根据字符串长度对数组排序，然后根据长度分到不同的组里，按长度遍历组，如果下一组的字符串长度比当前组多1个，则遍历两组的所有元素，满足条件前辈子串，则下一组子串的字符链长度在当前子串长度的基础上加<code>1</code>，其实就是一个广度优先搜索的过程。Version 2遍历字符串所有长度减<code>1</code>的子串，如果找到，则比较字符链长度，判断是否需要加<code>1</code>，返回最大长度。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestStrChain</span><span class="params">(self, words: List[str])</span> -&gt; int:</span></div><div class="line">        stat =&#123;&#125;</div><div class="line">        words.sort(key=len)</div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">            stat[len(word)] = stat.get(len(word), []) + [word]</div><div class="line">        chains = &#123;word: <span class="number">1</span> <span class="keyword">for</span> word <span class="keyword">in</span> words&#125;</div><div class="line">        <span class="keyword">for</span> k, v <span class="keyword">in</span> stat.items():</div><div class="line">            <span class="keyword">if</span> k+<span class="number">1</span> <span class="keyword">in</span> stat:</div><div class="line">                <span class="keyword">for</span> a <span class="keyword">in</span> v:</div><div class="line">                    <span class="keyword">for</span> b <span class="keyword">in</span> stat[k+<span class="number">1</span>]:</div><div class="line">                        <span class="keyword">if</span> chains[b] &lt;= chains[a] <span class="keyword">and</span> self.predecessor(a, b):</div><div class="line">                            chains[b] = chains[a] + <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> max(chains.values())</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">predecessor</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        i = <span class="number">0</span></div><div class="line">        j = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; len(a) <span class="keyword">and</span> j &lt; len(b):</div><div class="line">            <span class="keyword">if</span> a[i] == b[j]:</div><div class="line">                i += <span class="number">1</span></div><div class="line">                j += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                j += <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> j - i &gt; <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>Version 2</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">longestStrChain</span><span class="params">(self, words: List[str])</span> -&gt; int:</span></div><div class="line">        words.sort(key=len)</div><div class="line">        stat = &#123;word: <span class="number">1</span> <span class="keyword">for</span> word <span class="keyword">in</span> words&#125;</div><div class="line">        <span class="keyword">for</span> word <span class="keyword">in</span> words:</div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(len(word)):</div><div class="line">                pre = word[:i] + word[i+<span class="number">1</span>:]</div><div class="line">                <span class="keyword">if</span> pre <span class="keyword">in</span> stat:</div><div class="line">                    stat[word] = max(stat[word], stat[pre] + <span class="number">1</span>)</div><div class="line">        <span class="keyword">return</span> max(stat.values())</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/longest-string-chain/" target="_blank" rel="external">https://leetcode.com/problems/longest-string-chain/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1048. Longest String Chain
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1814. Count Nice Pairs in an Array</title>
    <link href="http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1814-Count-Nice-Pairs-in-an-Array/"/>
    <id>http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1814-Count-Nice-Pairs-in-an-Array/</id>
    <published>2021-07-15T10:09:07.792Z</published>
    <updated>2021-07-15T10:11:32.273Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Count_Nice_Pairs_in_an_Array.png" alt="Count Nice Pairs in an Array"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，由题目可知<code>nums[i] - rev(nums[i])</code>相等的两个数即可构成一个合适的对，因此统计<code>nums[i] - rev(nums[i])</code>相等的数值即可。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countNicePairs</span><span class="params">(self, nums: List[int])</span> -&gt; int:</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        n = len(nums)</div><div class="line">        stat = &#123;&#125;</div><div class="line">        MODULE = <span class="number">10</span>**<span class="number">9</span> + <span class="number">7</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            diff = nums[i] - int(str(nums[i])[::<span class="number">-1</span>])</div><div class="line">            stat[diff] = stat.get(diff, <span class="number">0</span>) + <span class="number">1</span></div><div class="line">            <span class="keyword">if</span> stat[diff] &gt; <span class="number">1</span>:</div><div class="line">                count += stat[diff] - <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> count % MODULE</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/count-nice-pairs-in-an-array/" target="_blank" rel="external">https://leetcode.com/problems/count-nice-pairs-in-an-array/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1814. Count Nice Pairs in an Array
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1812. Determine Color of a Chessboard Square</title>
    <link href="http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1812-Determine-Color-of-a-Chessboard-Square/"/>
    <id>http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1812-Determine-Color-of-a-Chessboard-Square/</id>
    <published>2021-07-15T09:05:06.006Z</published>
    <updated>2021-07-15T09:08:11.498Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Determine_Color_of_a_Chessboard_Square.png" alt="Determine Color of a Chessboard Square"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，构建字典，返回对应的结果即可。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">squareIsWhite</span><span class="params">(self, coordinates: str)</span> -&gt; bool:</span></div><div class="line">        rows = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>]</div><div class="line">        columns = list(range(<span class="number">1</span>, <span class="number">9</span>))</div><div class="line">        flag = <span class="keyword">True</span></div><div class="line">        mapping = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</div><div class="line">            flag = <span class="keyword">not</span> flag</div><div class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> columns:</div><div class="line">                index = row + str(col)</div><div class="line">                mapping[index] = flag</div><div class="line">                flag = <span class="keyword">not</span> flag</div><div class="line">        <span class="keyword">return</span> mapping[coordinates]</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/determine-color-of-a-chessboard-square/" target="_blank" rel="external">https://leetcode.com/problems/determine-color-of-a-chessboard-square/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1812. Determine Color of a Chessboard Square
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1362. Closest Divisors</title>
    <link href="http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1362-Closest-Divisors/"/>
    <id>http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1362-Closest-Divisors/</id>
    <published>2021-07-15T08:32:20.422Z</published>
    <updated>2021-07-15T08:40:35.686Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Closest_Divisors.png" alt="Closest Divisors"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，绝对差最小的两个数是一个数的开平方，遍历过程中，没必要遍历所有的数，遍历到数的开方就已经遍历了所有的乘积组合。优先选择<code>n+1</code>的解。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">closestDivisors</span><span class="params">(self, num: int)</span> -&gt; List[int]:</span></div><div class="line">        y1 = num + <span class="number">1</span></div><div class="line">        y2 = num + <span class="number">2</span></div><div class="line">        result = [<span class="number">0</span>, <span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, int(sqrt(y2)) + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> y1 % i == <span class="number">0</span>:</div><div class="line">                result[<span class="number">0</span>] = i</div><div class="line">                result[<span class="number">1</span>] = y1 // i</div><div class="line">            <span class="keyword">elif</span> y2 % i == <span class="number">0</span>:</div><div class="line">                result[<span class="number">0</span>] = i</div><div class="line">                result[<span class="number">1</span>] = y2 // i</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/closest-divisors/" target="_blank" rel="external">https://leetcode.com/problems/closest-divisors/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1362. Closest Divisors
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1702. Maximum Binary String After Change</title>
    <link href="http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1702-Maximum-Binary-String-After-Change/"/>
    <id>http://noahsnail.com/2021/07/15/2021-07-15-Leetcode-1702-Maximum-Binary-String-After-Change/</id>
    <published>2021-07-15T07:48:06.024Z</published>
    <updated>2021-07-15T08:22:02.988Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Maximum_Binary_String_After_Change.png" alt="Maximum Binary String After Change"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先找到第一个<code>0</code>，然后找到其后的第一个<code>1</code>，从这里开始，每碰到一个<code>0</code>就将其置为<code>1</code>，<code>1</code>之后的数字对应的置为<code>0</code>，相当于互换二者位置，这样让所有的<code>0</code>集中在一起，然后执行第一条规则。Version 2，根据规则可知，第一个<code>0</code>后面的零都应该跟其相连，即其后的数字顺序应按照<code>0</code>和<code>1</code>的顺序排序，然后将执行第一条规则。Version 3根据规则可知，如果字符串中的<code>0</code>少于两个，则字符串没变化，<code>0</code>多于1个时，最终结果只有1个<code>0</code>，且其位置应该位于第一个<code>0</code>之后的第<code>count</code>位，<code>count</code>为字符串中<code>0</code>的总数。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumBinaryString</span><span class="params">(self, binary: str)</span> -&gt; str:</span></div><div class="line">        digits = list(binary)</div><div class="line">        n = len(digits)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> digits[i] != <span class="string">'0'</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">        m = i</div><div class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> digits[i] != <span class="string">'1'</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">        k = i</div><div class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(i, n):</div><div class="line">            <span class="keyword">if</span> digits[j] == <span class="string">'0'</span>:</div><div class="line">                digits[j] = <span class="string">'1'</span></div><div class="line">                digits[k] = <span class="string">'0'</span></div><div class="line">                k += <span class="number">1</span></div><div class="line">        i = m</div><div class="line">        <span class="keyword">while</span> i &lt; n - <span class="number">1</span> <span class="keyword">and</span> digits[i] == <span class="string">'0'</span> <span class="keyword">and</span> digits[i+<span class="number">1</span>] == <span class="string">'0'</span>:</div><div class="line">            digits[i] = <span class="string">'1'</span></div><div class="line">            i += <span class="number">1</span></div><div class="line">        ans = <span class="string">''</span>.join(digits)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumBinaryString</span><span class="params">(self, binary: str)</span> -&gt; str:</span></div><div class="line">        digits = list(binary)</div><div class="line">        n = len(digits)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> digits[i] != <span class="string">'0'</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">        digits = digits[:i] + sorted(digits[i:])</div><div class="line">        i = <span class="number">0</span> </div><div class="line">        <span class="keyword">while</span> i &lt; n - <span class="number">1</span>:</div><div class="line">            <span class="keyword">if</span> digits[i] == <span class="string">'0'</span> <span class="keyword">and</span> digits[i+<span class="number">1</span>] == <span class="string">'0'</span>:</div><div class="line">                digits[i] = <span class="string">'1'</span></div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        ans = <span class="string">''</span>.join(digits)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumBinaryString</span><span class="params">(self, binary: str)</span> -&gt; str:</span></div><div class="line">        digits = [<span class="string">'1'</span>] * len(binary)</div><div class="line">        count = binary.count(<span class="string">'0'</span>)</div><div class="line">        <span class="keyword">if</span> count &lt;= <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> binary</div><div class="line">        n = len(digits)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> binary[i] != <span class="string">'0'</span>:</div><div class="line">            i += <span class="number">1</span></div><div class="line">        digits[i+count<span class="number">-1</span>] = <span class="string">'0'</span></div><div class="line">        ans = <span class="string">''</span>.join(digits)</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/maximum-binary-string-after-change/" target="_blank" rel="external">https://leetcode.com/problems/maximum-binary-string-after-change/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1702. Maximum Binary String After Change
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 556. Next Greater Element III</title>
    <link href="http://noahsnail.com/2021/07/14/2021-07-14-Leetcode-556-Next-Greater-Element-III/"/>
    <id>http://noahsnail.com/2021/07/14/2021-07-14-Leetcode-556-Next-Greater-Element-III/</id>
    <published>2021-07-14T06:20:29.670Z</published>
    <updated>2021-07-14T07:10:18.181Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Next_Greater_Element_III.png" alt="Next Greater Element III"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，先将数字<code>n</code>变为字符数组，要找最小的大于<code>n</code>的数，则应该从右往左开始，依次寻找第<code>i</code>位字符右边的大于当前字符的最小数字，然后互换二者位置，由于新数字的第<code>i</code>位字符大于<code>n</code>中的第<code>i</code>位字符，因此新数字<code>i</code>位之后的字符应该从小到大排列，这样可以保证新数字是最小的大于<code>n</code>的数字。当每一个字符都大于其右边的字符时，则找不到大于<code>n</code>的数字，返回<code>-1</code>。如果新数字大于<code>2^31-1</code>，也应该返回<code>-1</code>。Version 2，先找可以跟右边数字互换的字符<code>digits[i]</code>，即右边存在大于它的字符。连续比较两个相邻字符，保证了<code>digits[i]</code>右边的字符从大到小的关系。找到之后，再从右边寻找大于<code>digits[i]</code>的最小字符<code>digits[j]</code>，由于右边字符从大到小的关系，因此只要字符<code>digits[j]</code>大于<code>digits[i]</code>，<code>digits[j]</code>就是大于<code>digits[i]</code>的最小字符。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, n: int)</span> -&gt; int:</span></div><div class="line">        digits = list(str(n))</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(digits) - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">            index = i</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(digits)):</div><div class="line">                <span class="keyword">if</span> digits[i] &lt; digits[j] <span class="keyword">and</span> (index == i <span class="keyword">or</span> digits[j] &lt; digits[index]):</div><div class="line">                    index = j</div><div class="line">            <span class="keyword">if</span> index != i:</div><div class="line">                <span class="keyword">break</span></div><div class="line">        digits[i], digits[index] = digits[index], digits[i]</div><div class="line">        result = int(<span class="string">''</span>.join(digits[:i+<span class="number">1</span>] + sorted(digits[i+<span class="number">1</span>:])))</div><div class="line">        <span class="keyword">if</span> index == <span class="number">0</span> <span class="keyword">or</span> result &gt; <span class="number">2147483647</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, n: int)</span> -&gt; int:</span></div><div class="line">        digits = list(str(n))</div><div class="line">        i = len(digits) - <span class="number">2</span></div><div class="line">        <span class="keyword">while</span> i &gt; <span class="number">-1</span> <span class="keyword">and</span> digits[i] &gt;= digits[i+<span class="number">1</span>]:</div><div class="line">            i -= <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> i == <span class="number">-1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        j = i + <span class="number">1</span></div><div class="line">        <span class="keyword">while</span> j &lt; len(digits) <span class="keyword">and</span> digits[j] &gt; digits[i]:</div><div class="line">            j += <span class="number">1</span></div><div class="line">        j -= <span class="number">1</span></div><div class="line">        digits[i], digits[j] = digits[j], digits[i]</div><div class="line">        result = int(<span class="string">''</span>.join(digits[:i+<span class="number">1</span>] + sorted(digits[i+<span class="number">1</span>:])))</div><div class="line">        result = <span class="number">-1</span> <span class="keyword">if</span> result &gt; <span class="number">2147483647</span> <span class="keyword">else</span> result</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/next-greater-element-iii/" target="_blank" rel="external">https://leetcode.com/problems/next-greater-element-iii/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 556. Next Greater Element III
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 503. Next Greater Element II</title>
    <link href="http://noahsnail.com/2021/07/14/2021-07-14-Leetcode-503-Next-Greater-Element-II/"/>
    <id>http://noahsnail.com/2021/07/14/2021-07-14-Leetcode-503-Next-Greater-Element-II/</id>
    <published>2021-07-14T01:08:42.152Z</published>
    <updated>2021-07-14T01:49:01.772Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Next_Greater_Element_II.png" alt="Next Greater Element II"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，由于元素不是唯一的，需要循环查找，因此先将<code>nums</code>复制一遍，通过循环每次都查找当前元素之后的<code>n-1</code>位数字。Version 2通过使用栈来寻找满足条件的结果，栈中保持是数字的索引位置，由于需要循环查找，因此需要查找两次<code>nums</code>，并且第二次查找不需要保持数字索引。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElements</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></div><div class="line">        n = len(nums)</div><div class="line">        nums = nums + nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</div><div class="line">            flag = <span class="keyword">True</span></div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, i+n):</div><div class="line">                <span class="keyword">if</span> nums[j] &gt; nums[i]:</div><div class="line">                    result.append(nums[j])</div><div class="line">                    flag = <span class="keyword">False</span></div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> flag:</div><div class="line">                result.append(<span class="number">-1</span>)</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElements</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></div><div class="line">        n = len(nums)</div><div class="line">        result = [<span class="number">-1</span>] * n</div><div class="line">        stack = []</div><div class="line">        <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> nums[stack[<span class="number">-1</span>]] &lt; num:</div><div class="line">                result[stack.pop()] = num</div><div class="line">            stack.append(index)</div><div class="line"></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums[:stack[<span class="number">-1</span>]]:</div><div class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> nums[stack[<span class="number">-1</span>]] &lt; num:</div><div class="line">                result[stack.pop()] = num</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/next-greater-element-ii/" target="_blank" rel="external">https://leetcode.com/problems/next-greater-element-ii/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 503. Next Greater Element II
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 496. Next Greater Element I</title>
    <link href="http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-496-Next-Greater-Element-I/"/>
    <id>http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-496-Next-Greater-Element-I/</id>
    <published>2021-07-13T09:44:19.527Z</published>
    <updated>2021-07-14T01:07:56.902Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Next_Greater_Element_I.png" alt="Next Greater Element I"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，由于元素是唯一的，通过循环找出每个<code>nums2</code>中的满足条件结果保存到字典中，遍历<code>nums1</code>，获得结果。Version 2通过使用栈来寻找满足条件的结果，减少搜索时间。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></div><div class="line">        stat = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums2)):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i+<span class="number">1</span>, len(nums2)):</div><div class="line">                <span class="keyword">if</span> nums2[j] &gt; nums2[i]:</div><div class="line">                    stat[nums2[i]] = nums2[j]</div><div class="line">                    <span class="keyword">break</span></div><div class="line">            <span class="keyword">if</span> nums2[i] <span class="keyword">not</span> <span class="keyword">in</span> stat:</div><div class="line">                stat[nums2[i]] = <span class="number">-1</span></div><div class="line">        result = [stat[x] <span class="keyword">for</span> x <span class="keyword">in</span> nums1]</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">nextGreaterElement</span><span class="params">(self, nums1: List[int], nums2: List[int])</span> -&gt; List[int]:</span></div><div class="line">        stat = &#123;num: <span class="number">-1</span> <span class="keyword">for</span> num <span class="keyword">in</span> nums2&#125;</div><div class="line">        stack = []</div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums2:</div><div class="line">            <span class="keyword">while</span> stack <span class="keyword">and</span> stack[<span class="number">-1</span>] &lt; num:</div><div class="line">                stat[stack.pop()] = num</div><div class="line">            stack.append(num)</div><div class="line">        result = [stat[x] <span class="keyword">for</span> x <span class="keyword">in</span> nums1]</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/next-greater-element-i/" target="_blank" rel="external">https://leetcode.com/problems/next-greater-element-i/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 496. Next Greater Element I
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 423. Reconstruct Original Digits from English</title>
    <link href="http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-423-Reconstruct-Original-Digits-from-English/"/>
    <id>http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-423-Reconstruct-Original-Digits-from-English/</id>
    <published>2021-07-13T09:06:43.492Z</published>
    <updated>2021-07-13T09:11:33.808Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Reconstruct_Original_Digits_from_English.png" alt="Reconstruct Original Digits from English"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，找出<code>0-9</code>英文字母个数与数字个数的对应关系，然后根据统计的字符数计算对应的数字个数，按顺序构造最后的字符串即可。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">originalDigits</span><span class="params">(self, s: str)</span> -&gt; str:</span>        </div><div class="line">        chars = [<span class="string">"e"</span>, <span class="string">"g"</span>, <span class="string">"f"</span>, <span class="string">"i"</span>, <span class="string">"h"</span>, <span class="string">"o"</span>, <span class="string">"n"</span>, <span class="string">"s"</span>, <span class="string">"r"</span>, <span class="string">"u"</span>, <span class="string">"t"</span>, <span class="string">"w"</span>, <span class="string">"v"</span>, <span class="string">"x"</span>, <span class="string">"z"</span>]</div><div class="line">        stat = &#123;ch: <span class="number">0</span> <span class="keyword">for</span> ch <span class="keyword">in</span> chars&#125;</div><div class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</div><div class="line">            stat[ch] += <span class="number">1</span></div><div class="line"></div><div class="line">        result = <span class="string">''</span></div><div class="line">        result += <span class="string">'0'</span> * stat[<span class="string">'z'</span>]</div><div class="line">        result += <span class="string">'1'</span> * (stat[<span class="string">'o'</span>] - stat[<span class="string">'z'</span>] - stat[<span class="string">'w'</span>] - stat[<span class="string">'u'</span>])</div><div class="line">        result += <span class="string">'2'</span> * stat[<span class="string">'w'</span>]</div><div class="line">        result += <span class="string">'3'</span> * (stat[<span class="string">'r'</span>] - stat[<span class="string">'z'</span>] - stat[<span class="string">'u'</span>])</div><div class="line">        result += <span class="string">'4'</span> * stat[<span class="string">'u'</span>]</div><div class="line">        result += <span class="string">'5'</span> * (stat[<span class="string">'f'</span>] - stat[<span class="string">'u'</span>])</div><div class="line">        result += <span class="string">'6'</span> * stat[<span class="string">'x'</span>]</div><div class="line">        result += <span class="string">'7'</span> * (stat[<span class="string">'v'</span>] - (stat[<span class="string">'f'</span>] - stat[<span class="string">'u'</span>]))</div><div class="line">        result += <span class="string">'8'</span> * stat[<span class="string">'g'</span>]</div><div class="line">        result += <span class="string">'9'</span> * (stat[<span class="string">'i'</span>] - (stat[<span class="string">'f'</span>] - stat[<span class="string">'u'</span>]) - stat[<span class="string">'x'</span>] - stat[<span class="string">'g'</span>])</div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/reconstruct-original-digits-from-english/" target="_blank" rel="external">https://leetcode.com/problems/reconstruct-original-digits-from-english/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 423. Reconstruct Original Digits from English
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1807. Evaluate the Bracket Pairs of a String</title>
    <link href="http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-1807-Evaluate-the-Bracket-Pairs-of-a-String/"/>
    <id>http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-1807-Evaluate-the-Bracket-Pairs-of-a-String/</id>
    <published>2021-07-13T07:39:39.972Z</published>
    <updated>2021-07-13T07:45:31.630Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Evaluate_the_Bracket_Pairs_of_a_String.png" alt="Evaluate the Bracket Pairs of a String"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，遍历字符串，找到所有括号内的字符串，替换即可。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(self, s: str, knowledge: List[List[str]])</span> -&gt; str:</span></div><div class="line">        knowledge = &#123;x[<span class="number">0</span>]: x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> knowledge&#125;</div><div class="line">        n = len(s)</div><div class="line">        i = <span class="number">0</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        <span class="keyword">while</span> i &lt; n:</div><div class="line">            <span class="keyword">if</span> s[i] == <span class="string">'('</span>:</div><div class="line">                key = <span class="string">''</span></div><div class="line">                i += <span class="number">1</span></div><div class="line">                <span class="keyword">while</span> s[i] != <span class="string">')'</span>:</div><div class="line">                    key += s[i]</div><div class="line">                    i += <span class="number">1</span></div><div class="line">                <span class="keyword">if</span> key <span class="keyword">in</span> knowledge:</div><div class="line">                    result += knowledge[key]</div><div class="line">                <span class="keyword">else</span>:</div><div class="line">                    result += <span class="string">'?'</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result += s[i]</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/" target="_blank" rel="external">https://leetcode.com/problems/evaluate-the-bracket-pairs-of-a-string/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1807. Evaluate the Bracket Pairs of a String
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 315. Count of Smaller Numbers After Self</title>
    <link href="http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-315-Count-of-Smaller-Numbers-After-Self/"/>
    <id>http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-315-Count-of-Smaller-Numbers-After-Self/</id>
    <published>2021-07-13T02:52:49.587Z</published>
    <updated>2021-07-13T02:58:28.756Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Count_of_Smaller_Numbers_After_Self.png" alt="Count of Smaller Numbers After Self"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，从右往左遍历数组，每次都将数据放到有序序列里，使用二分查找寻找数据所在的位置，索引位置即为右侧小于数据的个数。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">countSmaller</span><span class="params">(self, nums: List[int])</span> -&gt; List[int]:</span></div><div class="line">        n = len(nums)</div><div class="line">        ans = [<span class="number">0</span>] * n</div><div class="line">        order = []</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(n<span class="number">-1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">            index = bisect.bisect_left(order, nums[i])</div><div class="line">            ans[i] = index</div><div class="line">            order.insert(index, nums[i])</div><div class="line">        <span class="keyword">return</span> ans</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/count-of-smaller-numbers-after-self/" target="_blank" rel="external">https://leetcode.com/problems/count-of-smaller-numbers-after-self/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 315. Count of Smaller Numbers After Self
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 1300. Sum of Mutated Array Closest to Target</title>
    <link href="http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-1300-Sum-of-Mutated-Array-Closest-to-Target/"/>
    <id>http://noahsnail.com/2021/07/13/2021-07-13-Leetcode-1300-Sum-of-Mutated-Array-Closest-to-Target/</id>
    <published>2021-07-13T01:28:12.066Z</published>
    <updated>2021-07-13T01:46:56.242Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Sum_of_Mutated_Array_Closest_to_Target.png" alt="Sum of Mutated Array Closest to Target"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析：</strong>Version 1，首先对数组进行排序，然后求目标的均值，取误差较小的均值，对数组中的元素进行判断，如果数组中的元素都比均值大，则将阈值设为均值即可满足条件。如果数组中的元素都小于等于均值，说明误差是确定的，即目标减去数组中的所有元素，此时取数组中的最大元素（满足条件的最小整数）即最后一位作为阈值。如果均值位于数组中间，则用目标减去小于等于均值的数据，这部分数据误差为0，然后将数组剩余部分和新的目标作为下一轮求解的数据，递归求解即可。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findBestValue</span><span class="params">(self, arr: List[int], target: int)</span> -&gt; int:</span></div><div class="line">        n = len(arr)</div><div class="line">        arr.sort()</div><div class="line">        mean = target // n</div><div class="line">        <span class="keyword">if</span> abs(target - mean * n) &gt; abs(target - (mean + <span class="number">1</span>) * n):</div><div class="line">            mean = mean + <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> arr[<span class="number">0</span>] &gt; mean:</div><div class="line">            <span class="keyword">return</span> mean</div><div class="line">        <span class="keyword">if</span> arr[<span class="number">-1</span>] &lt;= mean:</div><div class="line">            <span class="keyword">return</span> arr[<span class="number">-1</span>]</div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; n <span class="keyword">and</span> arr[i] &lt;= mean:</div><div class="line">            target -= arr[i]</div><div class="line">            i += <span class="number">1</span></div><div class="line">        <span class="keyword">return</span> self.findBestValue(arr[i:], target)</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/" target="_blank" rel="external">https://leetcode.com/problems/sum-of-mutated-array-closest-to-target/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 1300. Sum of Mutated Array Closest to Target
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
