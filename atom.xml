<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="noahsnail.com/"/>
  <updated>2017-05-10T14:56:54.000Z</updated>
  <id>noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>keras的基本用法(三)——创建神经网络</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%89)%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-keras的基本用法(三)——创建神经网络/</id>
    <published>2017-05-10T14:55:02.000Z</published>
    <updated>2017-05-10T14:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">from keras.datasets import mnist</div><div class="line">from keras.utils import np_utils</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense, Activation, Conv2D, MaxPooling2D, Flatten</div><div class="line">from keras.optimizers import Adam</div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</div><div class="line"></div><div class="line"># 数据集预处理</div><div class="line">X_train = X_train.reshape(-1, 1, 28, 28)</div><div class="line">X_test = X_test.reshape(-1, 1, 28, 28)</div><div class="line"></div><div class="line"># 将label变为向量</div><div class="line">y_train = np_utils.to_categorical(y_train, 10)</div><div class="line">y_test = np_utils.to_categorical(y_test, 10)</div><div class="line"></div><div class="line"></div><div class="line"># 构建神经网络</div><div class="line">model = Sequential()</div><div class="line"></div><div class="line"># 卷积层一</div><div class="line">model.add(Conv2D(32, kernel_size = (5, 5), strides = (1, 1), padding = &apos;same&apos;, activation = &apos;relu&apos;, input_shape = (1, 28, 28)))</div><div class="line"></div><div class="line"># 池化层一</div><div class="line">model.add(MaxPooling2D(pool_size = (2, 2), strides = (1, 1), padding = &apos;same&apos;))</div><div class="line"></div><div class="line"># 卷积层二</div><div class="line">model.add(Conv2D(64, kernel_size = (5, 5), strides = (1, 1), padding = &apos;same&apos;, activation = &apos;relu&apos;))</div><div class="line"></div><div class="line"># 池化层二</div><div class="line">model.add(MaxPooling2D(pool_size = (2, 2), strides = (1, 1), padding = &apos;same&apos;))</div><div class="line"></div><div class="line"># 全连接层一</div><div class="line">model.add(Flatten())</div><div class="line">model.add(Dense(1024))</div><div class="line">model.add(Activation(&apos;relu&apos;))</div><div class="line"></div><div class="line"># 全连接层二</div><div class="line">model.add(Dense(10))</div><div class="line">model.add(Activation(&apos;softmax&apos;))</div><div class="line"></div><div class="line"># 选择并定义优化求解方法</div><div class="line">adam = Adam(lr = 1e-4)</div><div class="line"></div><div class="line"># 选择损失函数、求解方法、度量方法</div><div class="line">model.compile(optimizer = adam, loss = &apos;categorical_crossentropy&apos;, metrics = [&apos;accuracy&apos;])</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">model.fit(X_train, y_train, epochs = 2, batch_size = 32)</div><div class="line"></div><div class="line"># 评估模型</div><div class="line">loss, accuracy = model.evaluate(X_test, y_test)</div><div class="line"></div><div class="line">print &apos;&apos;</div><div class="line">print &apos;loss: &apos;, loss</div><div class="line">print &apos;accuracy: &apos;, accuracy</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Using TensorFlow backend.</div><div class="line">Epoch 1/2</div><div class="line">60000/60000 [==============================] - 55s - loss: 0.4141 - acc: 0.9234</div><div class="line">Epoch 2/2</div><div class="line">60000/60000 [==============================] - 56s - loss: 0.0743 - acc: 0.9770</div><div class="line"> 9920/10000 [============================&gt;.] - ETA: 0s</div><div class="line">loss:  0.103529265788</div><div class="line">accuracy:  0.9711</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(三)——创建神经网络
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(二)——定义分类器</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%BA%8C)%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-keras的基本用法(二)——定义分类器/</id>
    <published>2017-05-10T13:44:57.000Z</published>
    <updated>2017-05-10T14:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from keras.datasets import mnist</div><div class="line">from keras.utils import np_utils</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense, Activation</div><div class="line">from keras.optimizers import RMSprop</div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</div><div class="line"></div><div class="line"># 数据集reshape, -1表示该参数不指定, 系统通过推断来获得</div><div class="line">X_train = X_train.reshape(X_train.shape[0], -1) / 255.0</div><div class="line">X_test = X_test.reshape(X_test.shape[0], -1) / 255.0</div><div class="line"></div><div class="line"># 将label变为向量</div><div class="line">y_train = np_utils.to_categorical(y_train, 10)</div><div class="line">y_test = np_utils.to_categorical(y_test, 10)</div><div class="line"></div><div class="line"></div><div class="line"># 构建分类器</div><div class="line">model = Sequential([</div><div class="line">    Dense(32, input_dim = 784),</div><div class="line">    Activation(&apos;relu&apos;),</div><div class="line">    Dense(10),</div><div class="line">    Activation(&apos;softmax&apos;)</div><div class="line">])</div><div class="line"></div><div class="line"># 选择并定义优化求解方法</div><div class="line">rmsprop = RMSprop(lr = 0.001, rho = 0.9, epsilon = 1e-8, decay = 0.0)</div><div class="line"></div><div class="line"># 选择损失函数、求解方法、度量方法</div><div class="line">model.compile(optimizer = rmsprop, loss = &apos;categorical_crossentropy&apos;, metrics = [&apos;accuracy&apos;])</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">model.fit(X_train, y_train, epochs = 2, batch_size = 32)</div><div class="line"></div><div class="line"># 评估模型</div><div class="line">loss, accuracy = model.evaluate(X_test, y_test)</div><div class="line"></div><div class="line">print &apos;&apos;</div><div class="line">print &apos;loss: &apos;, loss</div><div class="line">print &apos;accuracy: &apos;, accuracy</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Using TensorFlow backend.</div><div class="line">Epoch 1/2</div><div class="line">60000/60000 [==============================] - 2s - loss: 0.3382 - acc: 0.9048</div><div class="line">Epoch 2/2</div><div class="line">60000/60000 [==============================] - 2s - loss: 0.1913 - acc: 0.9454</div><div class="line"> 7680/10000 [======================&gt;.......] - ETA: 0s</div><div class="line">loss:  0.16181669073</div><div class="line">accuracy:  0.9535</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(二)——定义分类器
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十七)——保存figure</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%B8%83)%E2%80%94%E2%80%94%E4%BF%9D%E5%AD%98%E7%BB%98%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-matplotlib的基本用法(十七)——保存绘图/</id>
    <published>2017-05-10T12:58:53.000Z</published>
    <updated>2017-05-10T13:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍matplotlib的一些用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import matplotlib</div><div class="line">matplotlib.use(&apos;Agg&apos;)</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = np.arange(0, 10, 0.1)</div><div class="line">y = 0.05 * x ** 2</div><div class="line"></div><div class="line">#绘制图像</div><div class="line">plt.plot(x, y)</div><div class="line"></div><div class="line"># 设置坐标轴</div><div class="line">plt.xlabel(&apos;x data&apos;)</div><div class="line">plt.ylabel(&apos;y data&apos;)</div><div class="line"></div><div class="line"># 默认保存为png格式</div><div class="line">plt.savefig(&apos;test&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p>在文件夹下可看到<code>test.png</code>，如图：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/m17.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十七)——保存figure
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(一)——回归模型</title>
    <link href="noahsnail.com/2017/05/08/2017-5-8-Keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%80)%E2%80%94%E2%80%94%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/"/>
    <id>noahsnail.com/2017/05/08/2017-5-8-Keras的基本用法(一)——回归模型/</id>
    <published>2017-05-08T14:26:54.000Z</published>
    <updated>2017-05-08T14:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense</div><div class="line"></div><div class="line"># 创建数据</div><div class="line">X = np.linspace(-1, 1, 200)</div><div class="line"># 数据随机化</div><div class="line">np.random.shuffle(X)</div><div class="line"># 创建数据及参数, 并加入噪声</div><div class="line">Y = 0.5 * X + 2 + np.random.normal(0, 0.05, (200,))</div><div class="line"></div><div class="line"># 绘制数据</div><div class="line">plt.scatter(X, Y)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># 分为训练数据和测试数据</div><div class="line">X_train, Y_train = X[:160], Y[:160]</div><div class="line">X_test, Y_test = X[160:], Y[160:]</div><div class="line"></div><div class="line"># 使用keras创建神经网络</div><div class="line"># Sequential是指一层层堆叠的神经网络</div><div class="line"># Dense是指全连接层</div><div class="line"># 定义model</div><div class="line">model = Sequential()</div><div class="line"># 定义第一层, 由于是回归模型, 因此只有一层</div><div class="line">model.add(Dense(units = 1, input_dim = 1))</div><div class="line"></div><div class="line"># 选择损失函数和优化方法</div><div class="line">model.compile(loss = &apos;mse&apos;, optimizer = &apos;sgd&apos;)</div><div class="line"></div><div class="line">print &apos;----Training----&apos;</div><div class="line"># 训练过程</div><div class="line">for step in range(501):</div><div class="line">    # 进行训练, 返回损失(代价)函数</div><div class="line">    cost = model.train_on_batch(X_train, Y_train)</div><div class="line">    if step % 100 == 0:</div><div class="line">        print &apos;loss: &apos;, cost</div><div class="line"></div><div class="line">print &apos;----Testing----&apos;    </div><div class="line"># 训练结束进行测试</div><div class="line">cost = model.evaluate(X_test, Y_test, batch_size = 40)</div><div class="line">print &apos;test loss: &apos;, cost</div><div class="line"></div><div class="line"># 获取参数</div><div class="line">W, b = model.layers[0].get_weights()</div><div class="line">print &apos;Weights: &apos;,W</div><div class="line">print &apos;Biases: &apos;, b</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">----Training----</div><div class="line">loss:  3.97799</div><div class="line">loss:  0.100697</div><div class="line">loss:  0.0118289</div><div class="line">loss:  0.00448105</div><div class="line">loss:  0.00278243</div><div class="line">loss:  0.00232763</div><div class="line">----Testing----</div><div class="line">40/40 [==============================] - 0s</div><div class="line">test loss:  0.00307717337273</div><div class="line">Weights:  [[ 0.47406867]]</div><div class="line">Biases:  [ 1.99442744]</div></pre></td></tr></table></figure>
<p><img src="http://ocs628urt.bkt.clouddn.com/k1.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      keras的基本用法(一)——回归模型
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(八)——保存与加载模型</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%85%AB)%E2%80%94%E2%80%94%E4%BF%9D%E5%AD%98%E4%B8%8E%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-scikit-learn的基本用法(八)——保存与加载模型/</id>
    <published>2017-05-05T13:09:11.000Z</published>
    <updated>2017-05-05T13:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的模型的保存与加载。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import pickle</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn import datasets</div><div class="line"></div><div class="line"># 定义分类器</div><div class="line">svm = SVC()</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">svm.fit(X, y)</div><div class="line"></div><div class="line"># 保存成python支持的文件格式pickle, 在当前目录下可以看到svm.pickle</div><div class="line">with open(&apos;svm.pickle&apos;, &apos;wb&apos;) as fw:</div><div class="line">    pickle.dump(svm, fw)</div><div class="line"></div><div class="line"># 加载svm.pickle</div><div class="line">with open(&apos;svm.pickle&apos;, &apos;rb&apos;) as fr:</div><div class="line">    new_svm = pickle.load(fr)</div><div class="line">    print new_svm.predict(X[0:1])</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[0]</div></pre></td></tr></table></figure>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from sklearn.externals import joblib</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn import datasets</div><div class="line"></div><div class="line"># 定义分类器</div><div class="line">svm = SVC()</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">svm.fit(X, y)</div><div class="line"></div><div class="line"># 保存成sklearn自带的文件格式</div><div class="line">joblib.dump(svm, &apos;svm.pkl&apos;)</div><div class="line"></div><div class="line"># 加载svm.pkl</div><div class="line">new_svm = joblib.load(&apos;svm.pkl&apos;)</div><div class="line">print new_svm.predict(X[0:1])</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[0]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(八)——保存与加载模型
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(七)——交叉验证3</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%813/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-scikit-learn的基本用法(七)——交叉验证3/</id>
    <published>2017-05-05T12:56:21.000Z</published>
    <updated>2017-05-05T12:57:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的交叉验证。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn.datasets import load_digits</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn.learning_curve import validation_curve</div><div class="line">from sklearn.model_selection import cross_val_score </div><div class="line"></div><div class="line"># 选取合适的参数gamma</div><div class="line"># 加载数据集</div><div class="line">digits = load_digits()</div><div class="line">X = digits.data</div><div class="line">y = digits.target</div><div class="line"></div><div class="line"># 定义gamma参数</div><div class="line">param_range = np.logspace(-6, -2.3, 5)</div><div class="line"></div><div class="line"># 用SVM进行学习并记录loss</div><div class="line">train_loss, test_loss = validation_curve(SVC(), X, y, param_name = &apos;gamma&apos;, param_range = param_range, </div><div class="line">                                         cv = 10, scoring = &apos;mean_squared_error&apos;)</div><div class="line"></div><div class="line"># 训练误差均值</div><div class="line">train_loss_mean = -np.mean(train_loss, axis = 1)</div><div class="line"># 测试误差均值</div><div class="line">test_loss_mean = -np.mean(test_loss, axis = 1)</div><div class="line"></div><div class="line"># 绘制误差曲线</div><div class="line">plt.plot(param_range, train_loss_mean, &apos;o-&apos;, color = &apos;r&apos;, label = &apos;Training&apos;)</div><div class="line">plt.plot(param_range, test_loss_mean, &apos;o-&apos;, color = &apos;g&apos;, label = &apos;Cross-Validation&apos;)</div><div class="line"></div><div class="line">plt.xlabel(&apos;gamma&apos;)</div><div class="line">plt.ylabel(&apos;Loss&apos;)</div><div class="line">plt.legend(loc = &apos;best&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk7.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(七)——交叉验证3
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十六)——创建动画</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E5%85%AD)%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%8A%A8%E7%94%BB/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-matplotlib的基本用法(十六)——创建动画/</id>
    <published>2017-05-05T11:52:29.000Z</published>
    <updated>2017-05-05T11:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍matplotlib的一些用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from matplotlib import animation</div><div class="line"></div><div class="line"></div><div class="line"># 定义figure</div><div class="line">fig, ax = plt.subplots()</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = np.arange(0, 2 * np.pi, 0.01)</div><div class="line"># line, 表示只取返回值中的第一个元素</div><div class="line">line, = ax.plot(x, np.sin(x))</div><div class="line"></div><div class="line"># 定义动画的更新</div><div class="line">def update(i):</div><div class="line">    line.set_ydata(np.sin(x + i/10))</div><div class="line">    return line,</div><div class="line"></div><div class="line"># 定义动画的初始值</div><div class="line">def init():</div><div class="line">    line.set_ydata(np.sin(x))</div><div class="line">    return line,</div><div class="line"></div><div class="line"># 创建动画</div><div class="line">ani = animation.FuncAnimation(fig = fig, func = update, init_func = init, interval = 10, blit = False, frames = 200)</div><div class="line"></div><div class="line"># 展示动画</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># 动画保存</div><div class="line">ani.save(&apos;sin.gif&apos;, writer = &apos;imagemagick&apos;, fps = 30, dpi = 100)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sin.gif" alt="图像"></p>
<p>创建下雨的动画：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/rain.gif" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十六)——创建动画
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十五)——主次坐标轴</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%BA%94)%E2%80%94%E2%80%94%E4%B8%BB%E6%AC%A1%E5%9D%90%E6%A0%87%E8%BD%B4/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-matplotlib的基本用法(十五)——主次坐标轴/</id>
    <published>2017-05-05T11:15:56.000Z</published>
    <updated>2017-05-05T11:25:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍matplotlib的一些用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = np.arange(0, 10, 0.1)</div><div class="line">y1 = 0.05 * x ** 2</div><div class="line">y2 = -1 * y1</div><div class="line"></div><div class="line"># 定义figure</div><div class="line">fig, ax1 = plt.subplots()</div><div class="line"># 得到ax1的对称轴ax2</div><div class="line">ax2 = ax1.twinx()</div><div class="line"># 绘制图像</div><div class="line">ax1.plot(x, y1, &apos;g-&apos;)</div><div class="line">ax2.plot(x, y2, &apos;b--&apos;)</div><div class="line"></div><div class="line"># 设置label</div><div class="line">ax1.set_xlabel(&apos;X data&apos;)</div><div class="line">ax1.set_ylabel(&apos;Y 1&apos;, color = &apos;g&apos;)</div><div class="line">ax2.set_ylabel(&apos;Y 2&apos;, color = &apos;b&apos;)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m151.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十五)——主次坐标轴
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(六)——交叉验证2</title>
    <link href="noahsnail.com/2017/05/04/2017-5-4-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%85%AD)%E2%80%94%E2%80%94%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%812/"/>
    <id>noahsnail.com/2017/05/04/2017-5-4-scikit-learn的基本用法(六)——交叉验证2/</id>
    <published>2017-05-04T13:45:35.000Z</published>
    <updated>2017-05-04T14:03:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的交叉验证。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn.datasets import load_digits</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn.learning_curve import learning_curve</div><div class="line">from sklearn.model_selection import cross_val_score </div><div class="line"></div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">digits = load_digits()</div><div class="line">X = digits.data</div><div class="line">y = digits.target</div><div class="line"># 用SVM进行学习并记录loss</div><div class="line">train_sizes, train_loss, test_loss = learning_curve(SVC(gamma = 0.001), </div><div class="line">                                                    X, y, cv = 10, scoring = &apos;neg_mean_squared_error&apos;,</div><div class="line">                                                    train_sizes = [0.1, 0.25, 0.5, 0.75, 1])</div><div class="line"></div><div class="line"># 训练误差均值</div><div class="line">train_loss_mean = -np.mean(train_loss, axis = 1)</div><div class="line"># 测试误差均值</div><div class="line">test_loss_mean = -np.mean(test_loss, axis = 1)</div><div class="line"></div><div class="line"># 绘制误差曲线</div><div class="line">plt.plot(train_sizes, train_loss_mean, &apos;o-&apos;, color = &apos;r&apos;, label = &apos;Training&apos;)</div><div class="line">plt.plot(train_sizes, test_loss_mean, &apos;o-&apos;, color = &apos;g&apos;, label = &apos;Cross-Validation&apos;)</div><div class="line"></div><div class="line">plt.xlabel(&apos;Training data size&apos;)</div><div class="line">plt.ylabel(&apos;Loss&apos;)</div><div class="line">plt.legend(loc = &apos;best&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk6.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(六)——交叉验证2
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(五)——交叉验证1</title>
    <link href="noahsnail.com/2017/05/04/2017-5-4-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%BA%94)%E2%80%94%E2%80%94%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%81/"/>
    <id>noahsnail.com/2017/05/04/2017-5-4-scikit-learn的基本用法(五)——交叉验证/</id>
    <published>2017-05-04T13:06:43.000Z</published>
    <updated>2017-05-04T13:41:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的交叉验证。通过交叉验证来选取KNN算法中的K值。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">from sklearn import datasets</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.neighbors import KNeighborsClassifier</div><div class="line">from sklearn.cross_validation import cross_val_score </div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"># 定义分类器</div><div class="line">knn = KNeighborsClassifier(n_neighbors = 5)</div><div class="line"># 进行交叉验证数据评估, 数据分为5部分, 每次用一部分作为测试集</div><div class="line">scores = cross_val_score(knn, X, y, cv = 5, scoring = &apos;accuracy&apos;)</div><div class="line"># 输出5次交叉验证的准确率</div><div class="line">print scores</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[ 0.96666667  1.          0.93333333  0.96666667  1.        ]</div></pre></td></tr></table></figure>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn import datasets</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.neighbors import KNeighborsClassifier</div><div class="line">from sklearn.cross_validation import cross_val_score </div><div class="line"></div><div class="line"># 确定knn中k的取值</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"># 定义knn中k的取值, 0-10</div><div class="line">k_range = range(1, 30)</div><div class="line"># 保存k对应的准确率</div><div class="line">k_scores = []</div><div class="line"># 计算每个k取值对应的准确率</div><div class="line">for k in k_range:</div><div class="line">    # 获得knn分类器</div><div class="line">    knn = KNeighborsClassifier(n_neighbors = k)</div><div class="line">    # 对数据进行交叉验证求准确率</div><div class="line">    scores = cross_val_score(knn, X, y, cv = 10, scoring = &apos;accuracy&apos;)</div><div class="line">    # 保存交叉验证结果的准确率均值</div><div class="line">    k_scores.append(scores.mean())</div><div class="line"></div><div class="line"># 绘制k取不同值时的准确率变化图像</div><div class="line">plt.plot(k_range, k_scores)</div><div class="line">plt.xlabel(&apos;K Value in KNN&apos;)</div><div class="line">plt.ylabel(&apos;Cross-Validation Mean Accuracy&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk5.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(五)——交叉验证1
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十四)——figure图的嵌套</title>
    <link href="noahsnail.com/2017/05/04/2017-5-4-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E5%9B%9B)%E2%80%94%E2%80%94figure%E5%9B%BE%E7%9A%84%E5%B5%8C%E5%A5%97/"/>
    <id>noahsnail.com/2017/05/04/2017-5-4-matplotlib的基本用法(十四)——figure图的嵌套/</id>
    <published>2017-05-04T12:06:54.000Z</published>
    <updated>2017-05-04T12:07:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行图嵌套的绘制。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 定义figure</div><div class="line">fig = plt.figure()</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = [1, 2, 3, 4, 5, 6, 7]</div><div class="line">y = [1, 3, 4, 2, 5, 8, 6]</div><div class="line"></div><div class="line"># figure的百分比, 从figure 10%的位置开始绘制, 宽高是figure的80%</div><div class="line">left, bottom, width, height = 0.1, 0.1, 0.8, 0.8</div><div class="line"># 获得绘制的句柄</div><div class="line">ax1 = fig.add_axes([left, bottom, width, height])</div><div class="line"># 绘制点(x,y)</div><div class="line">ax1.plot(x, y, &apos;r&apos;)</div><div class="line">ax1.set_xlabel(&apos;x&apos;)</div><div class="line">ax1.set_ylabel(&apos;y&apos;)</div><div class="line">ax1.set_title(&apos;test&apos;)</div><div class="line"></div><div class="line"></div><div class="line"># 嵌套方法一</div><div class="line"># figure的百分比, 从figure 10%的位置开始绘制, 宽高是figure的80%</div><div class="line">left, bottom, width, height = 0.2, 0.6, 0.25, 0.25</div><div class="line"># 获得绘制的句柄</div><div class="line">ax2 = fig.add_axes([left, bottom, width, height])</div><div class="line"># 绘制点(x,y)</div><div class="line">ax2.plot(x, y, &apos;r&apos;)</div><div class="line">ax2.set_xlabel(&apos;x&apos;)</div><div class="line">ax2.set_ylabel(&apos;y&apos;)</div><div class="line">ax2.set_title(&apos;part1&apos;)</div><div class="line"></div><div class="line"></div><div class="line"># 嵌套方法二</div><div class="line">plt.axes([bottom, left, width, height])</div><div class="line">plt.plot(x, y, &apos;r&apos;)</div><div class="line">plt.xlabel(&apos;x&apos;)</div><div class="line">plt.ylabel(&apos;y&apos;)</div><div class="line">plt.title(&apos;part2&apos;)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m14.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十四)——figure图的嵌套
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十三)——figure绘制多图</title>
    <link href="noahsnail.com/2017/05/04/2017-5-4-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%B8%89)%E2%80%94%E2%80%94figure%E7%BB%98%E5%88%B6%E5%A4%9A%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/04/2017-5-4-matplotlib的基本用法(十三)——figure绘制多图/</id>
    <published>2017-05-04T11:28:15.000Z</published>
    <updated>2017-05-04T11:48:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行多图的绘制。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 定义figure</div><div class="line">plt.figure()</div><div class="line"># figure分成3行3列, 取得第一个子图的句柄, 第一个子图跨度为1行3列, 起点是表格(0, 0)</div><div class="line">ax1 = plt.subplot2grid((3, 3), (0, 0), colspan = 3, rowspan = 1)</div><div class="line">ax1.plot([0, 1], [0, 1])</div><div class="line">ax1.set_title(&apos;Test&apos;)</div><div class="line"></div><div class="line"># figure分成3行3列, 取得第二个子图的句柄, 第二个子图跨度为1行3列, 起点是表格(1, 0)</div><div class="line">ax2 = plt.subplot2grid((3, 3), (1, 0), colspan = 2, rowspan = 1)</div><div class="line">ax2.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line"># figure分成3行3列, 取得第三个子图的句柄, 第三个子图跨度为1行1列, 起点是表格(1, 2)</div><div class="line">ax3 = plt.subplot2grid((3, 3), (1, 2), colspan = 1, rowspan = 1)</div><div class="line">ax3.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line"># figure分成3行3列, 取得第四个子图的句柄, 第四个子图跨度为1行3列, 起点是表格(2, 0)</div><div class="line">ax4 = plt.subplot2grid((3, 3), (2, 0), colspan = 3, rowspan = 1)</div><div class="line">ax4.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m131.png" alt="图像"></p>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line">import matplotlib.gridspec as gridspec</div><div class="line"></div><div class="line"># 定义figure</div><div class="line">plt.figure()</div><div class="line"># 分隔figure</div><div class="line">gs = gridspec.GridSpec(3, 3)</div><div class="line">ax1 = plt.subplot(gs[0, :])</div><div class="line">ax2 = plt.subplot(gs[1, 0:2])</div><div class="line">ax3 = plt.subplot(gs[1, 2])</div><div class="line">ax4 = plt.subplot(gs[2, :])</div><div class="line"></div><div class="line"># 绘制图像</div><div class="line">ax1.plot([0, 1], [0, 1])</div><div class="line">ax1.set_title(&apos;Test&apos;)</div><div class="line"></div><div class="line">ax2.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line">ax3.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line">ax4.plot([0, 1], [0, 1])</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m131.png" alt="图像"></p>
<ul>
<li>Demo 3</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line"># 划分figure</div><div class="line">fig, ((ax11, ax12), (ax21, ax22)) = plt.subplots(2, 2, sharex = True, sharey = True)</div><div class="line"></div><div class="line"># 绘制图像</div><div class="line">ax11.scatter([0, 0.5], [0, 1])</div><div class="line">ax12.scatter([0, 1], [0, 1])</div><div class="line">ax21.scatter([0, 1], [0, -1])</div><div class="line">ax22.scatter([0, -1], [0, 1])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m132.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十三)——figure绘制多图
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(四)——数据归一化</title>
    <link href="noahsnail.com/2017/05/04/2017--5-4-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%9B%9B)%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E5%BD%92%E4%B8%80%E5%8C%96/"/>
    <id>noahsnail.com/2017/05/04/2017--5-4-scikit-learn的基本用法(四)——数据归一化/</id>
    <published>2017-05-04T10:47:06.000Z</published>
    <updated>2017-05-04T11:06:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的数据预处理之归一化。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">from sklearn import preprocessing</div><div class="line"></div><div class="line"></div><div class="line"># 定义array</div><div class="line">a = np.array([-10, 2.3, 13.7, 56, 108])</div><div class="line">print a</div><div class="line"></div><div class="line"># 对array进行归一化(normalization)</div><div class="line"># scale进行的操作是按列减去均值, 除以方差, 因此数据的均值为0, 方差为1</div><div class="line">print preprocessing.scale(a)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ -10.     2.3   13.7   56.   108. ]</div><div class="line">[-1.01951435 -0.73451375 -0.47036685  0.50975718  1.71463777]</div></pre></td></tr></table></figure>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn import preprocessing</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.datasets.samples_generator import make_classification</div><div class="line">from sklearn.svm import SVC</div><div class="line"></div><div class="line"># 生成数据集</div><div class="line">X, y = make_classification(n_samples = 200, n_features = 2, n_redundant = 0, n_informative = 2, </div><div class="line">                           random_state = 22, n_clusters_per_class = 1, scale = 100)</div><div class="line"># 查看数据分布</div><div class="line">plt.scatter(X[:, 0], X[:, 1], c = y)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># 数据归一化处理, 不进行处理时注释掉</div><div class="line">X = preprocessing.scale(X)</div><div class="line"># 将数据分为训练集和测试集</div><div class="line">X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2)</div><div class="line"># 构建分类器</div><div class="line">svm = SVC()</div><div class="line"># 训练分类器</div><div class="line">svm.fit(X_train, y_train)</div><div class="line"># 测试</div><div class="line">print svm.score(X_test, y_test)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk4.png" alt="image"></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 进行归一化的准确率</div><div class="line">0.9</div><div class="line"># 不进行归一化的准确率</div><div class="line">0.65</div></pre></td></tr></table></figure>
<p>备注：由于数据是随机生成的, 结果可能会不同，但进行归一化与不进行归一化的差异是一致的。</p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(四)——数据归一化
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(三)——model的介绍</title>
    <link href="noahsnail.com/2017/05/03/2017-5-3-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%89)%E2%80%94%E2%80%94model%E7%9A%84%E4%BB%8B%E7%BB%8D/"/>
    <id>noahsnail.com/2017/05/03/2017-5-3-scikit-learn的基本用法(三)——model的介绍/</id>
    <published>2017-05-03T13:47:38.000Z</published>
    <updated>2017-05-04T02:45:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要是scikit-learn中model的介绍。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">from sklearn import datasets</div><div class="line">from sklearn.linear_model import LinearRegression</div><div class="line"></div><div class="line"># 直接加载数据集</div><div class="line">loaded_data = datasets.load_boston()</div><div class="line">data_X = loaded_data.data</div><div class="line">data_y = loaded_data.target</div><div class="line"></div><div class="line"># 定义模型model</div><div class="line">model = LinearRegression()</div><div class="line"># 学习参数</div><div class="line">model.fit(data_X, data_y)</div><div class="line"># 输出权重weight</div><div class="line">print model.coef_</div><div class="line"># 输出偏置bias</div><div class="line">print model.intercept_</div><div class="line"># 输出model定义时的参数, 没有给定则返回默认参数</div><div class="line">print model.get_params()</div><div class="line"># 评估学习到的模型</div><div class="line"># 通过coefficient of determination(决定系数),来判断回归方程拟合的程度.</div><div class="line">print model.score(data_X, data_y)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[ -1.07170557e-01   4.63952195e-02   2.08602395e-02   2.68856140e+00</div><div class="line">  -1.77957587e+01   3.80475246e+00   7.51061703e-04  -1.47575880e+00</div><div class="line">   3.05655038e-01  -1.23293463e-02  -9.53463555e-01   9.39251272e-03</div><div class="line">  -5.25466633e-01]</div><div class="line">36.4911032804</div><div class="line">&#123;&apos;copy_X&apos;: True, &apos;normalize&apos;: False, &apos;n_jobs&apos;: 1, &apos;fit_intercept&apos;: True&#125;</div><div class="line">0.740607742865</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(三)——model的介绍
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(二)——数据集的使用</title>
    <link href="noahsnail.com/2017/05/03/2017-5-3-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%BA%8C)%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%9B%86%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>noahsnail.com/2017/05/03/2017-5-3-scikit-learn的基本用法(二)——数据集的使用/</id>
    <published>2017-05-03T12:58:40.000Z</published>
    <updated>2017-05-03T13:06:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要是演示scikit-learn自带的数据集的一些用法。本文介绍两种sklearn构建数据集的方式，一种是直接加载已有的数据集，另一种是通过工具构建一个数据集。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">from sklearn import datasets</div><div class="line">from sklearn.linear_model import LinearRegression</div><div class="line"></div><div class="line"># 直接加载数据集</div><div class="line">loaded_data = datasets.load_boston()</div><div class="line">data_X = loaded_data.data</div><div class="line">data_y = loaded_data.target</div><div class="line"></div><div class="line"># 定义模型</div><div class="line">model = LinearRegression()</div><div class="line"># 学习参数</div><div class="line">model.fit(data_X, data_y)</div><div class="line"># 计算预测值</div><div class="line">result = model.predict(data_X)</div><div class="line"></div><div class="line"></div><div class="line"># 创造一些线性回归的数据点</div><div class="line">X, y = datasets.make_regression(n_samples = 100, n_features = 1, n_targets = 1, noise = 5)</div><div class="line"># 绘制创造的数据集的散点图</div><div class="line">plt.scatter(X, y)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[ 30.00821269  25.0298606   30.5702317   28.60814055]</div><div class="line">[ 24.   21.6  34.7  33.4]</div></pre></td></tr></table></figure>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk2.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(二)——数据集的使用
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十二)——subplot绘制多图</title>
    <link href="noahsnail.com/2017/05/03/2017-5-3-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%BA%8C)%E2%80%94%E2%80%94subplot%E7%BB%98%E5%88%B6%E5%A4%9A%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/03/2017-5-3-matplotlib的基本用法(十二)——subplot绘制多图/</id>
    <published>2017-05-03T12:20:49.000Z</published>
    <updated>2017-05-03T12:38:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行多图的绘制。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">plt.figure()</div><div class="line"></div><div class="line"># 绘制第一个图</div><div class="line">plt.subplot(2, 2, 1)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第二个图</div><div class="line">plt.subplot(2, 2, 2)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第三个图</div><div class="line">plt.subplot(2, 2, 3)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第四个图</div><div class="line">plt.subplot(2, 2, 4)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m121.png" alt="图像"></p>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line"></div><div class="line">plt.figure()</div><div class="line"></div><div class="line"># 绘制第一个图</div><div class="line">plt.subplot(2, 1, 1)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第二个图</div><div class="line">plt.subplot(2, 3, 4)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第三个图</div><div class="line">plt.subplot(2, 3, 5)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line"># 绘制第四个图</div><div class="line">plt.subplot(2, 3, 6)</div><div class="line">plt.plot([0, 1], [0, 1])</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m122.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十二)——subplot绘制多图
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十一)——绘制3D图</title>
    <link href="noahsnail.com/2017/05/03/2017-5-3-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%B8%80)%E2%80%94%E2%80%94%E7%BB%98%E5%88%B63D%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/03/2017-5-3-matplotlib的基本用法(十一)——绘制3D图/</id>
    <published>2017-05-03T01:21:20.000Z</published>
    <updated>2017-05-03T05:12:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行3D图像的绘制。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line">from mpl_toolkits.mplot3d import Axes3D</div><div class="line"></div><div class="line"></div><div class="line"># 定义figure</div><div class="line">fig = plt.figure()</div><div class="line"># 将figure变为3d</div><div class="line">ax = Axes3D(fig)</div><div class="line"></div><div class="line"># 数据数目</div><div class="line">n = 256</div><div class="line"># 定义x, y</div><div class="line">x = np.arange(-4, 4, 0.25)</div><div class="line">y = np.arange(-4, 4, 0.25)</div><div class="line"></div><div class="line"># 生成网格数据</div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line"></div><div class="line"># 计算每个点对的长度</div><div class="line">R = np.sqrt(X ** 2 + Y ** 2)</div><div class="line"># 计算Z轴的高度</div><div class="line">Z = np.sin(R)</div><div class="line"></div><div class="line"># 绘制3D曲面</div><div class="line">ax.plot_surface(X, Y, Z, rstride = 1, cstride = 1, cmap = plt.get_cmap(&apos;rainbow&apos;))</div><div class="line"># 绘制从3D曲面到底部的投影</div><div class="line">ax.contour(X, Y, Z, zdim = &apos;z&apos;, offset = -2, cmap = &apos;rainbow&apos;)</div><div class="line"></div><div class="line"># 设置z轴的维度</div><div class="line">ax.set_zlim(-2, 2)</div><div class="line"></div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m11.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十一)——绘制3D图
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十)——绘制Image</title>
    <link href="noahsnail.com/2017/05/02/2017-5-2-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81)%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6Image/"/>
    <id>noahsnail.com/2017/05/02/2017-5-2-matplotlib的基本用法(十)——绘制Image/</id>
    <published>2017-05-02T14:30:13.000Z</published>
    <updated>2017-05-03T01:20:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行图像的绘制。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 定义图像数据</div><div class="line">a = np.linspace(0, 1, 9).reshape(3, 3)</div><div class="line"># 显示图像数据</div><div class="line">plt.imshow(a, interpolation = &apos;nearest&apos;, cmap = &apos;bone&apos;, origin = &apos;lower&apos;)</div><div class="line"># 添加颜色条</div><div class="line">plt.colorbar()</div><div class="line"># 去掉坐标轴</div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m10.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十)——绘制Image
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(一)——KNN算法的使用</title>
    <link href="noahsnail.com/2017/05/02/2017-5-2-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%80)%E2%80%94%E2%80%94KNN%E7%AE%97%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>noahsnail.com/2017/05/02/2017-5-2-scikit-learn的基本用法(一)——KNN算法的使用/</id>
    <published>2017-05-02T14:08:38.000Z</published>
    <updated>2017-05-02T14:10:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用scikit-learn中的KNN算法进行Iris数据集的分类。Iris也称鸢尾花卉数据集，是一类多重变量分析的数据集。通过花萼长度，花萼宽度，花瓣长度，花瓣宽度4个属性预测鸢尾花卉属于（Setosa，Versicolour，Virginica）三个种类中的哪一类。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">from sklearn import datasets</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.neighbors import KNeighborsClassifier</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">iris_X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">iris_y = iris.target</div><div class="line"># 将数据分为训练、测试两部分</div><div class="line">X_train, X_test, y_train, y_test = train_test_split(iris_X, iris_y, test_size = 0.2)</div><div class="line"># 定义分类器</div><div class="line">knn = KNeighborsClassifier()</div><div class="line"># 进行分类</div><div class="line">knn.fit(X_train, y_train)</div><div class="line"># 计算预测值</div><div class="line">y_predict = knn.predict(X_test)</div><div class="line"># 计算准确率, 由于每次数据集划分不同, 可能不一样</div><div class="line">print np.sum(np.fabs(y_predict - y_test)) / float(len(y_test))</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">0.0666666666667</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(一)——KNN算法的使用
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(九)——绘制等高线图</title>
    <link href="noahsnail.com/2017/05/02/2017-5-2-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B9%9D)%E2%80%94%E2%80%94%E7%BB%98%E5%88%B6%E7%AD%89%E9%AB%98%E7%BA%BF%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/02/2017-5-2-matplotlib的基本用法(九)——绘制等高线图/</id>
    <published>2017-05-02T13:39:50.000Z</published>
    <updated>2017-05-02T13:47:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要使用matplotlib进行等高线图的绘制。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">import matplotlib.pyplot as plt</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># 定义等高线高度函数</div><div class="line">def f(x, y):</div><div class="line">    return (1 - x / 2 + x ** 5 + y ** 3) * np.exp(- x ** 2 - y ** 2)</div><div class="line"></div><div class="line"># 数据数目</div><div class="line">n = 256</div><div class="line"># 定义x, y</div><div class="line">x = np.linspace(-3, 3, n)</div><div class="line">y = np.linspace(-3, 3, n)</div><div class="line"></div><div class="line"># 生成网格数据</div><div class="line">X, Y = np.meshgrid(x, y)</div><div class="line"></div><div class="line"></div><div class="line"># 填充等高线的颜色, 8是等高线分为几部分</div><div class="line">plt.contourf(X, Y, f(X, Y), 8, alpha = 0.75, cmap = plt.cm.hot)</div><div class="line"># 绘制等高线</div><div class="line">C = plt.contour(X, Y, f(X, Y), 8, colors = &apos;black&apos;, linewidth = 0.5)</div><div class="line"># 绘制等高线数据</div><div class="line">plt.clabel(C, inline = True, fontsize = 10)</div><div class="line"></div><div class="line"># 去除坐标轴</div><div class="line">plt.xticks(())</div><div class="line">plt.yticks(())</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/m9.png" alt="等高线图"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(九)——绘制等高线图
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
</feed>
