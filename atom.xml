<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="noahsnail.com/"/>
  <updated>2017-07-10T01:10:38.000Z</updated>
  <id>noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AlexNet论文翻译</title>
    <link href="noahsnail.com/2017/07/04/2017-7-4-AlexNet%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91/"/>
    <id>noahsnail.com/2017/07/04/2017-7-4-AlexNet论文翻译/</id>
    <published>2017-07-04T10:04:42.000Z</published>
    <updated>2017-07-10T01:10:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h1 id="ImageNet-Classification-with-Deep-Convolutional-Neural-Networks"><a href="#ImageNet-Classification-with-Deep-Convolutional-Neural-Networks" class="headerlink" title="ImageNet Classification with Deep Convolutional Neural Networks"></a>ImageNet Classification with Deep Convolutional Neural Networks</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>We trained a large, deep convolutional neural network to classify the 1.2 million high-resolution images in the ImageNet LSVRC-2010 contest into the 1000 different classes. On the test data, we achieved top-1 and top-5 error rates of 37.5% and 17.0% which is considerably better than the previous state-of-the-art. The neural network, which has 60 million parameters and 650,000 neurons, consists of five convolutional layers, some of which are followed by max-pooling layers, and three fully-connected layers with a final 1000-way softmax. To make training faster, we used non-saturating neurons and a very efficient GPU implementation of the convolution operation. To reduce overfitting in the fully-connected layers we employed a recently-developed regularization method called “dropout” that proved to be very effective. We also entered a variant of this model in the ILSVRC-2012 competition and achieved a winning top-5 test error rate of 15.3%, compared to 26.2% achieved by the second-best entry.</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>我们训练了一个大型深度卷积神经网络来将<code>ImageNet LSVRC-2010</code>竞赛的120万高分辨率的图像分到1000不同的类别中。在测试数据上，我们得到了<code>top-1 37.5%, top-5 17.0%</code>的错误率，这个结果比目前的最好结果好很多。这个神经网络有6000万参数和650000个神经元，包含5个卷积层（某些卷积层后面带有池化层）和3个全连接层，最后是一个1000维的softmax。为了训练的更快，我们使用了非饱和神经元并对卷积操作进行了非常有效的GPU实现。为了减少全连接层的过拟合，我们采用了一个最近开发的名为<code>dropout</code>的正则化方法，结果证明是非常有效的。我们也使用这个模型的一个变种参加了<code>ILSVRC-2012</code>竞赛，赢得了冠军并且与第二名 <code>top-5 26.2%</code>的错误率相比，我们取得了<code>top-5 15.3%</code>的错误率。</p>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><p>Current approaches to object recognition make essential use of machine learning methods. To improve their performance, we can collect larger datasets, learn more powerful models, and use better techniques for preventing overfitting. Until recently, datasets of labeled images were relatively small -- on the order of tens of thousands of images (e.g., NORB [16], Caltech-101/256 [8, 9], and CIFAR-10/100 [12]). Simple recognition tasks can be solved quite well with datasets of this size, especially if they are augmented with label-preserving transformations. For example, the current best error rate on the MNIST digit-recognition task (&lt;0.3%) approaches human performance [4]. But objects in realistic settings exhibit considerable variability, so to learn to recognize them it is necessary to use much larger training sets. And indeed, the shortcomings of small image datasets have been widely recognized (e.g., Pinto et al. [21]), but it has only recently become possible to collect labeled datasets with millions of images. The new larger datasets include LabelMe [23], which consists of hundreds of thousands of fully-segmented images, and ImageNet [6], which consists of over 15 million labeled high-resolution images in over 22,000 categories.</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>当前的目标识别方法基本上都使用了机器学习方法。为了提高目标识别的性能，我们可以收集更大的数据集，学习更强大的模型，使用更好的技术来防止过拟合。直到最近，标注图像的数据集都相对较小--在几万张图像的数量级上（例如，NORB[16]，Caltech-101/256 [8, 9]和CIFAR-10/100 [12]）。简单的识别任务在这样大小的数据集上可以被解决的相当好，尤其是如果通过标签保留变换进行数据增强的情况下。例如，目前在MNIST数字识别任务上（&lt;0.3%）的最好准确率已经接近了人类水平[4]。但真实环境中的对象表现出了相当大的可变性，因此为了学习识别它们，有必要使用更大的训练数据集。实际上，小图像数据集的缺点已经被广泛认识到（例如，Pinto et al. [21]），但收集上百万图像的标注数据仅在最近才变得的可能。新的更大的数据集包括LabelMe [23]，它包含了数十万张完全分割的图像，ImageNet [6]，它包含了22000个类别上的超过1500万张标注的高分辨率的图像。</p>
<p>To learn about thousands of objects from millions of images, we need a model with a large learning capacity. However, the immense complexity of the object recognition task means that this problem cannot be specified even by a dataset as large as ImageNet, so our model should also have lots of prior knowledge to compensate for all the data we don’t have. Convolutional neural networks (CNNs) constitute one such class of models [16, 11, 13, 18, 15, 22, 26]. Their capacity can be controlled by varying their depth and breadth, and they also make strong and mostly correct assumptions about the nature of images (namely, stationarity of statistics and locality of pixel dependencies). Thus, compared to standard feedforward neural networks with similarly-sized layers, CNNs have much fewer connections and parameters and so they are easier to train, while their theoretically-best performance is likely to be only slightly worse.</p>
<p>为了从数百万张图像中学习几千个对象，我们需要一个有很强学习能力的模型。然而对象识别任务的巨大复杂性意味着这个问题不能被指定，即使通过像ImageNet这样的大数据集，因此我们的模型应该也有许多先验知识来补偿我们所没有的数据。卷积神经网络(CNNs)构成了一个这样的模型[16, 11, 13, 18, 15, 22, 26]。它们的能力可以通过改变它们的广度和深度来控制，它们也可以对图像的本质进行强大且通常正确的假设（也就是说，统计的稳定性和像素依赖的局部性）。因此，与具有层次大小相似的标准前馈神经网络，CNNs有更少的连接和参数，因此它们更容易训练，而它们理论上的最佳性能可能仅比标准前馈神经网络差一点。</p>
<p>Despite the attractive qualities of CNNs, and despite the relative efficiency of their local architecture, they have still been prohibitively expensive to apply in large scale to high-resolution images. Luckily, current GPUs, paired with a highly-optimized implementation of 2D convolution, are powerful enough to facilitate the training of interestingly-large CNNs, and recent datasets such as ImageNet contain enough labeled examples to train such models without severe overfitting.</p>
<p>尽管CNN具有引人注目的质量，尽管它们的局部架构相当有效，但将它们大规模的应用到到高分辨率图像中仍然是极其昂贵的。幸运的是，目前的GPU，搭配了高度优化的2D卷积实现，强大到足够促进有趣地大量CNN的训练，最近的数据集例如ImageNet包含足够的标注样本来训练这样的模型而没有严重的过拟合。</p>
<p>The specific contributions of this paper are as follows: we trained one of the largest convolutional neural networks to date on the subsets of ImageNet used in the ILSVRC-2010 and ILSVRC-2012 competitions [2] and achieved by far the best results ever reported on these datasets. We wrote a highly-optimized GPU implementation of 2D convolution and all the other operations inherent in training convolutional neural networks, which we make available publicly. Our network contains a number of new and unusual features which improve its performance and reduce its training time, which are detailed in Section 3. The size of our network made overfitting a significant problem, even with 1.2 million labeled training examples, so we used several effective techniques for preventing overfitting, which are described in Section 4. Our final network contains five convolutional and three fully-connected layers, and this depth seems to be important: we found that removing any convolutional layer (each of which contains no more than 1% of the model’s parameters) resulted in inferior performance.</p>
<p>本文具体的贡献如下：我们在ILSVRC-2010和ILSVRC-2012[2]的ImageNet子集上训练了到目前为止最大的神经网络之一，并取得了迄今为止在这些数据集上报道过的最好结果。我们编写了高度优化的2D卷积GPU实现以及训练卷积神经网络内部的所有其它操作，我们把它公开了。我们的网络包含许多新的不寻常的特性，这些特性提高了神经网络的性能并减少了训练时间，详见第三节。即使使用了120万标注的训练样本，我们的网络尺寸仍然使过拟合成为一个明显的问题，因此我们使用了一些有效的技术来防止过拟合，详见第四节。我们最终的网络包含5个卷积层和3个全连接层，深度似乎是非常重要的：我们发现移除任何卷积层（每个卷积层包含的参数不超过模型参数的1%）都会导致更差的性能。</p>
<p>In the end, the network’s size is limited mainly by the amount of memory available on current GPUs and by the amount of training time that we are willing to tolerate. Our network takes between five and six days to train on two GTX 580 3GB GPUs. All of our experiments suggest that our results can be improved simply by waiting for faster GPUs and bigger datasets to become available.</p>
<p>最后，网络尺寸主要受限于目前GPU的内存容量和我们能忍受的训练时间。我们的网络在两个GTX 580 3GB GPU上训练五六天。我们的所有实验表明我们的结果可以简单地通过等待更快的GPU和更大的可用数据集来提高。</p>
<h2 id="2-The-Dataset"><a href="#2-The-Dataset" class="headerlink" title="2 The Dataset"></a>2 The Dataset</h2><p>ImageNet is a dataset of over 15 million labeled high-resolution images belonging to roughly 22,000 categories. The images were collected from the web and labeled by human labelers using Amazon’s Mechanical Turk crowd-sourcing tool. Starting in 2010, as part of the Pascal Visual Object Challenge, an annual competition called the ImageNet Large-Scale Visual Recognition Challenge (ILSVRC) has been held. ILSVRC uses a subset of ImageNet with roughly 1000 images in each of 1000 categories. In all, there are roughly 1.2 million training images, 50,000 validation images, and 150,000 testing images.</p>
<h2 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2 数据集"></a>2 数据集</h2><p>ImageNet数据集有超过1500万的标注高分辨率图像，这些图像属于大约22000个类别。这些图像是从网上收集的，使用了Amazon’s Mechanical Turk的众包工具通过人工标注的。从2010年起，作为Pascal视觉对象挑战赛的一部分，每年都会举办ImageNet大规模视觉识别挑战赛（ILSVRC）。ILSVRC使用ImageNet的一个子集，1000个类别每个类别大约1000张图像。总计，大约120万训练图像，50000张验证图像和15万测试图像。</p>
<p>ILSVRC-2010 is the only version of ILSVRC for which the test set labels are available, so this is the version on which we performed most of our experiments. Since we also entered our model in the ILSVRC-2012 competition, in Section 6 we report our results on this version of the dataset as well, for which test set labels are unavailable. On ImageNet, it is customary to report two error rates: top-1 and top-5, where the top-5 error rate is the fraction of test images for which the correct label is not among the five labels considered most probable by the model.</p>
<p>ILSVRC-2010是ILSVRC竞赛中唯一可以获得测试集标签的版本，因此我们大多数实验都是在这个版本上运行的。由于我们也使用我们的模型参加了ILSVRC-2012竞赛，因此在第六节我们也报告了模型在这个版本的数据集上的结果，这个版本的测试标签是不可获得的。在ImageNet上，按照惯例报告两个错误率：<code>top-1</code>和<code>top-5</code>，<code>top-5</code>错误率是指测试图像的正确标签不在模型认为的五个最可能的便签之中。</p>
<p>ImageNet consists of variable-resolution images, while our system requires a constant input dimensionality. Therefore, we down-sampled the images to a fixed resolution of 256 × 256. Given a rectangular image, we first rescaled the image such that the shorter side was of length 256, and then cropped out the central 256×256 patch from the resulting image. We did not pre-process the images in any other way, except for subtracting the mean activity over the training set from each pixel. So we trained our network on the (centered) raw RGB values of the pixels.</p>
<p>ImageNet包含各种分辨率的图像，而我们的系统要求不变的输入维度。因此，我们将图像进行下采样到固定的<code>256×256</code>分辨率。给定一个矩形图像，我们首先缩放图像短边长度为256，然后从结果图像中裁剪中心的<code>256×256</code>大小的图像块。除了在训练集上对像素减去平均活跃度外，我们不对图像做任何其它的预处理。因此我们在原始的RGB像素值（中心的）上训练我们的网络。</p>
<h2 id="3-The-Architecture"><a href="#3-The-Architecture" class="headerlink" title="3 The Architecture"></a>3 The Architecture</h2><p>The architecture of our network is summarized in Figure 2. It contains eight learned layers — five convolutional and three fully-connected. Below, we describe some of the novel or unusual features of our network’s architecture. Sections 3.1-3.4 are sorted according to our estimation of their importance, with the most important first.</p>
<h2 id="3-架构"><a href="#3-架构" class="headerlink" title="3 架构"></a>3 架构</h2><p>我们的网络架构概括为图2。它包含八个学习层--5个卷积层和3个全连接层。下面，我们将描述我们网络结构中的一些新奇的不寻常的特性。3.1-3.4小节按照我们对它们评估的重要性进行排序，最重要的最有先。</p>
<h3 id="3-1-ReLU-Nonlinearity"><a href="#3-1-ReLU-Nonlinearity" class="headerlink" title="3.1 ReLU Nonlinearity"></a>3.1 ReLU Nonlinearity</h3><p>The standard way to model a neuron’s output <code>f</code> as a function of its input <code>x</code> is with <code>f(x) = tanh(x)</code> or <code>f(x) = (1 + e−x)−1</code>. In terms of training time with gradient descent, these saturating nonlinearities are much slower than the non-saturating nonlinearity <code>f(x) = max(0,x)</code>. Following Nair and Hinton [20], we refer to neurons with this nonlinearity as Rectified Linear Units (ReLUs). Deep convolutional neural networks with ReLUs train several times faster than their equivalents with tanh units. This is demonstrated in Figure 1, which shows the number of iterations required to reach 25% training error on the CIFAR-10 dataset for a particular four-layer convolutional network. This plot shows that we would not have been able to experiment with such large neural networks for this work if we had used traditional saturating neuron models.</p>
<h3 id="3-1-ReLU非线性"><a href="#3-1-ReLU非线性" class="headerlink" title="3.1 ReLU非线性"></a>3.1 ReLU非线性</h3><p>将神经元输出<code>f</code>建模为输入<code>x</code>的函数的标准方式是用<code>f(x) = tanh(x)</code>或<code>f(x) = (1 + e−x)−1</code>。考虑到梯度下降的训练时间，这些饱和的非线性比非饱和非线性<code>f(x) = max(0,x)</code>更慢。根据Nair和Hinton[20]的说法，我们将这种非线性神经元称为修正线性单元(ReLU)。采用ReLU的深度卷积神经网络训练时间比等价的<code>tanh</code>单元要快几倍。在图1中，对于一个特定的四层卷积网络，在CIFAR-10数据集上达到25%的训练误差所需要的迭代次数可以证实这一点。这幅图表明，如果我们采用传统的饱和神经元模型，我们将不能在如此大的神经网络上实验该工作。</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/Figure%201.png" alt="Figure 1"></p>
<p>We are not the first to consider alternatives to traditional neuron models in CNNs. For example, Jarrett et al. [11] claim that the nonlinearity f (x) = |tanh(x)| works particularly well with their type of contrast nor- malization followed by local average pooling on the Caltech-101 dataset. However, on this dataset the pri- mary concern is preventing overfitting, so the effect they are observing is different from the accelerated ability to fit the training set which we report when us- ing ReLUs. Faster learning has a great influence on the performance of large models trained on large datasets.</p>
<h3 id="3-2-Training-on-Multiple-GPUs"><a href="#3-2-Training-on-Multiple-GPUs" class="headerlink" title="3.2 Training on Multiple GPUs"></a>3.2 Training on Multiple GPUs</h3><p>A single GTX 580 GPU has only 3GB of memory, which limits the maximum size of the networks that can be trained on it. It turns out that 1.2 million training examples are enough to train networks which are too big to fit on one GPU. Therefore we spread the net across two GPUs. Current GPUs are particularly well-suited to cross-GPU parallelization, as they are able to read from and write to one another’s memory directly, without going through host machine memory. The parallelization scheme that we employ essentially puts half of the kernels (or neurons) on each GPU, with one additional trick: the GPUs communicate only in certain layers. This means that, for example, the kernels of layer 3 take input from all kernel maps in layer 2. However, kernels in layer 4 take input only from those kernel maps in layer 3 which reside on the same GPU. Choosing the pattern of connectivity is a problem for cross-validation, but this allows us to precisely tune the amount of communication until it is an acceptable fraction of the amount of computation.</p>
<p>The resultant architecture is somewhat similar to that of the “columnar” CNN employed by Cires ̧an et al. [5], except that our columns are not independent (see Figure 2). This scheme reduces our top-1 and top-5 error rates by 1.7% and 1.2%, respectively, as compared with a net with half as many kernels in each convolutional layer trained on one GPU. The two-GPU net takes slightly less time to train than the one-GPU net2.</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>[1] R.M.BellandY.Koren.Lessonsfromthenetflixprizechallenge.ACMSIGKDDExplorationsNewsletter, 9(2):75–79, 2007.</p>
<p>[2] A. Berg, J. Deng, and L. Fei-Fei. Large scale visual recognition challenge 2010. www.imagenet.org/challenges. 2010.</p>
<p>[3] L. Breiman. Random forests. Machine learning, 45(1):5–32, 2001.</p>
<p>[4] D. Cires ̧an, U. Meier, and J. Schmidhuber. Multi-column deep neural networks for image classification. Arxiv preprint arXiv:1202.2745, 2012.</p>
<p>[5] D.C. Cires ̧an, U. Meier, J. Masci, L.M. Gambardella, and J. Schmidhuber. High-performance neural networks for visual object classification. Arxiv preprint arXiv:1102.0183, 2011.</p>
<p>[6] J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and L. Fei-Fei. ImageNet: A Large-Scale Hierarchical Image Database. In CVPR09, 2009.</p>
<p>[7] J. Deng, A. Berg, S. Satheesh, H. Su, A. Khosla, and L. Fei-Fei. ILSVRC-2012, 2012. URL <a href="http://www.image-net.org/challenges/LSVRC/2012/" target="_blank" rel="external">http://www.image-net.org/challenges/LSVRC/2012/</a>.</p>
<p>[8] L. Fei-Fei, R. Fergus, and P. Perona. Learning generative visual models from few training examples: An incremental bayesian approach tested on 101 object categories. Computer Vision and Image Understanding, 106(1):59–70, 2007.</p>
<p>[9] G. Griffin, A. Holub, and P. Perona. Caltech-256 object category dataset. Technical Report 7694, California Institute of Technology, 2007. URL <a href="http://authors.library.caltech.edu/7694" target="_blank" rel="external">http://authors.library.caltech.edu/7694</a>.</p>
<p>[10] G.E. Hinton, N. Srivastava, A. Krizhevsky, I. Sutskever, and R.R. Salakhutdinov. Improving neural networks by preventing co-adaptation of feature detectors. arXiv preprint arXiv:1207.0580, 2012.</p>
<p>[11] K. Jarrett, K. Kavukcuoglu, M. A. Ranzato, and Y. LeCun. What is the best multi-stage architecture for object recognition? In International Conference on Computer Vision, pages 2146–2153. IEEE, 2009.</p>
<p>[12] A. Krizhevsky. Learning multiple layers of features from tiny images. Master’s thesis, Department of Computer Science, University of Toronto, 2009.</p>
<p>[13] A. Krizhevsky. Convolutional deep belief networks on cifar-10. Unpublished manuscript, 2010.</p>
<p>[14] A. Krizhevsky and G.E. Hinton. Using very deep autoencoders for content-based image retrieval. In ESANN, 2011.</p>
<p>[15] Y. Le Cun, B. Boser, J.S. Denker, D. Henderson, R.E. Howard, W. Hubbard, L.D. Jackel, et al. Handwritten digit recognition with a back-propagation network. In Advances in neural information processing systems, 1990.</p>
<p>[16] Y. LeCun, F.J. Huang, and L. Bottou. Learning methods for generic object recognition with invariance to pose and lighting. In Computer Vision and Pattern Recognition, 2004. CVPR 2004. Proceedings of the 2004 IEEE Computer Society Conference on, volume 2, pages II–97. IEEE, 2004.</p>
<p>[17] Y. LeCun, K. Kavukcuoglu, and C. Farabet. Convolutional networks and applications in vision. In Circuits and Systems (ISCAS), Proceedings of 2010 IEEE International Symposium on, pages 253–256. IEEE, 2010.</p>
<p>[18] H. Lee, R. Grosse, R. Ranganath, and A.Y. Ng. Convolutional deep belief networks for scalable unsupervised learning of hierarchical representations. In Proceedings of the 26th Annual International Conference on Machine Learning, pages 609–616. ACM, 2009.</p>
<p>[19] T. Mensink, J. Verbeek, F. Perronnin, and G. Csurka. Metric Learning for Large Scale Image Classification: Generalizing to New Classes at Near-Zero Cost. In ECCV - European Conference on Computer Vision, Florence, Italy, October 2012.</p>
<p>[20] V. Nair and G. E. Hinton. Rectified linear units improve restricted boltzmann machines. In Proc. 27th International Conference on Machine Learning, 2010.</p>
<p>[21] N. Pinto, D.D. Cox, and J.J. DiCarlo. Why is real-world visual object recognition hard? PLoS computational biology, 4(1):e27, 2008.</p>
<p>[22] N. Pinto, D. Doukhan, J.J. DiCarlo, and D.D. Cox. A high-throughput screening approach to discovering good forms of biologically inspired visual representation. PLoS computational biology, 5(11):e1000579,2009.</p>
<p>[23] B.C. Russell, A. Torralba, K.P. Murphy, and W.T. Freeman. Labelme: a database and web-based tool for image annotation. International journal of computer vision, 77(1):157–173, 2008.</p>
<p>[24] J.SánchezandF.Perronnin.High-dimensionalsignaturecompressionforlarge-scaleimageclassification. In Computer Vision and Pattern Recognition (CVPR), 2011 IEEE Conference on, pages 1665–1672. IEEE,2011.</p>
<p>[25] P.Y. Simard, D. Steinkraus, and J.C. Platt. Best practices for convolutional neural networks applied to visual document analysis. In Proceedings of the Seventh International Conference on Document Analysis and Recognition, volume 2, pages 958–962, 2003.</p>
<p>[26] S.C.Turaga,J.F.Murray,V.Jain,F.Roth,M.Helmstaedter,K.Briggman,W.Denk,andH.S.Seung.Convolutional networks can learn to generate affinity graphs for image segmentation. Neural Computation, 22(2):511–538, 2010.</p>
]]></content>
    
    <summary type="html">
    
      AlexNet论文翻译
    
    </summary>
    
      <category term="深度学习" scheme="noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(五)——图像predict</title>
    <link href="noahsnail.com/2017/06/12/2017-6-12-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%BA%94)%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8Fpredict/"/>
    <id>noahsnail.com/2017/06/12/2017-6-12-keras的基本用法(五)——图像predict/</id>
    <published>2017-06-12T07:48:52.000Z</published>
    <updated>2017-06-12T07:57:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法，主要是根据已有模型预测图像的类别，以ResNet50为例。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">from keras.layers import Dense</div><div class="line">from keras.models import Model</div><div class="line">from keras.preprocessing import image</div><div class="line">from keras.applications.resnet50 import ResNet50</div><div class="line"></div><div class="line"># 使用ResNet的结构，不包括最后一层</div><div class="line">base_model = ResNet50(include_top = False, pooling = &apos;avg&apos;)</div><div class="line"></div><div class="line"># 定义网络结构最后一层</div><div class="line">predictions = Dense(3, activation=&apos;softmax&apos;)(base_model.output)</div><div class="line"></div><div class="line"># 定义模型</div><div class="line">model = Model(inputs=base_model.input, outputs=predictions)</div><div class="line"></div><div class="line"># 加载训练好的模型</div><div class="line">model.load_weights(&apos;./weights.h5&apos;)</div><div class="line"></div><div class="line">image_path = &apos;./lena.jpg&apos;</div><div class="line"></div><div class="line"># 加载图像</div><div class="line">img = image.load_img(image_path, target_size=(224, 224))</div><div class="line"></div><div class="line"># 图像预处理</div><div class="line">x = image.img_to_array(img)</div><div class="line">x = np.expand_dims(x, axis=0)</div><div class="line">x = preprocess_input(x)</div><div class="line"></div><div class="line"># 对图像进行分类</div><div class="line">preds = model.predict(x)</div><div class="line"></div><div class="line"># 输出预测概率</div><div class="line">print &apos;Predicted:&apos;, preds</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(五)——图像predict
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(四)——Fine Tuning神经网络</title>
    <link href="noahsnail.com/2017/06/07/2017-6-7-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%9B%9B)%E2%80%94%E2%80%94%E7%BD%91%E7%BB%9CFine%20Tuning/"/>
    <id>noahsnail.com/2017/06/07/2017-6-7-keras的基本用法(四)——网络Fine Tuning/</id>
    <published>2017-06-07T01:53:09.000Z</published>
    <updated>2017-06-12T08:23:21.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法，主要涉及已有网络的fine tuning，以ResNet50为例。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">#!/usr/bin/env python</div><div class="line"># _*_ coding: utf-8 _*_</div><div class="line"></div><div class="line">from keras.models import Model</div><div class="line">from keras.layers import Dense</div><div class="line">from keras.applications.resnet50 import ResNet50</div><div class="line">from keras.preprocessing.image import ImageDataGenerator</div><div class="line"></div><div class="line"># 训练的batch_size</div><div class="line">batch_size = 16</div><div class="line"># 训练的epoch</div><div class="line">epochs = 100</div><div class="line"></div><div class="line"># 图像Generator，用来构建输入数据</div><div class="line">train_datagen = ImageDataGenerator(</div><div class="line">        width_shift_range=0.1,</div><div class="line">        height_shift_range=0.1,</div><div class="line">        zoom_range=0.2,</div><div class="line">        horizontal_flip=True)</div><div class="line"></div><div class="line"># 从文件中读取数据，目录结构应为train下面是各个类别的子目录，每个子目录中为对应类别的图像</div><div class="line">train_generator = train_datagen.flow_from_directory(&apos;./train&apos;, target_size = (224, 224), batch_size = batch_size)</div><div class="line"></div><div class="line"># 输出类别信息</div><div class="line">print train_generator.class_indices</div><div class="line"></div><div class="line"># 生成测试数据</div><div class="line">test_datagen = ImageDataGenerator()</div><div class="line">validation_generator = test_datagen.flow_from_directory(&apos;./validation&apos;, target_size = (224, 224), batch_size = batch_size)</div><div class="line"></div><div class="line"># 使用ResNet的结构，不包括最后一层，且加载ImageNet的预训练参数</div><div class="line">base_model = ResNet50(weights = &apos;imagenet&apos;, include_top = False, pooling = &apos;avg&apos;)</div><div class="line"></div><div class="line"># 构建网络的最后一层，3是自己的数据的类别</div><div class="line">predictions = Dense(3, activation=&apos;softmax&apos;)(base_model.output)</div><div class="line"></div><div class="line"># 定义整个模型</div><div class="line">model = Model(inputs=base_model.input, outputs=predictions)</div><div class="line"></div><div class="line"># 编译模型，loss为交叉熵损失</div><div class="line">model.compile(optimizer=&apos;rmsprop&apos;, loss=&apos;categorical_crossentropy&apos;)</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">model.fit_generator(train_generator,steps_per_epoch = batch_size, epochs = epochs, validation_data = validation_generator, validation_steps = batch_size)</div><div class="line"></div><div class="line"># 保存训练得到的模型</div><div class="line">model.save_weights(&apos;weights.h5&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>部分结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&#123;&apos;Type_3&apos;: 2, &apos;Type_2&apos;: 1, &apos;Type_1&apos;: 0&#125;</div><div class="line">Found 761 images belonging to 3 classes.</div><div class="line">Epoch 1/40</div><div class="line"> 1/16 [&gt;.............................] - ETA: 119s - loss: 1.33922017-06-07 10:18:48.246289: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 2521 get requests, put_count=2161 evicted_count=1000 eviction_rate=0.462749 and unsatisfied allocation rate=0.579135</div><div class="line">2017-06-07 10:18:48.246348: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 100 to 110</div><div class="line">16/16 [==============================] - 120s - loss: 2.3753 - val_loss: 10.8293</div><div class="line">Epoch 2/40</div><div class="line"> 1/16 [&gt;.............................] - ETA: 5s - loss: 1.00542017-06-07 10:20:40.464589: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 2270 get requests, put_count=2642 evicted_count=1000 eviction_rate=0.378501 and unsatisfied allocation rate=0.286784</div><div class="line">2017-06-07 10:20:40.464643: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 256 to 281</div><div class="line">16/16 [==============================] - 83s - loss: 1.7988 - val_loss: 11.5219</div><div class="line">Epoch 3/40</div><div class="line">16/16 [==============================] - 81s - loss: 1.6640 - val_loss: 11.0043</div><div class="line">Epoch 4/40</div><div class="line"> 3/16 [====&gt;.........................] - ETA: 4s - loss: 1.87452017-06-07 10:23:26.725923: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:247] PoolAllocator: After 11057 get requests, put_count=11071 evicted_count=1000 eviction_rate=0.0903261 and unsatisfied allocation rate=0.0945103</div><div class="line">2017-06-07 10:23:26.725986: I tensorflow/core/common_runtime/gpu/pool_allocator.cc:259] Raising pool_size_limit_ from 655 to 720</div><div class="line">16/16 [==============================] - 83s - loss: 1.7237 - val_loss: 11.7738</div><div class="line">Epoch 5/40</div><div class="line">16/16 [==============================] - 83s - loss: 1.6304 - val_loss: 10.6538</div><div class="line">Epoch 6/40</div><div class="line">16/16 [==============================] - 80s - loss: 1.2182 - val_loss: 4.5027</div><div class="line">Epoch 7/40</div><div class="line">16/16 [==============================] - 83s - loss: 1.3179 - val_loss: 11.5891</div><div class="line">Epoch 8/40</div><div class="line">16/16 [==============================] - 82s - loss: 1.1806 - val_loss: 10.5800</div><div class="line">Epoch 9/40</div><div class="line">16/16 [==============================] - 81s - loss: 1.1935 - val_loss: 11.1477</div><div class="line">Epoch 10/40</div><div class="line">16/16 [==============================] - 80s - loss: 1.1727 - val_loss: 7.0913</div><div class="line">Epoch 11/40</div><div class="line">16/16 [==============================] - 83s - loss: 1.2058 - val_loss: 6.4474</div><div class="line">Epoch 12/40</div><div class="line">16/16 [==============================] - 82s - loss: 1.2702 - val_loss: 7.7678</div><div class="line">Epoch 13/40</div><div class="line">16/16 [==============================] - 84s - loss: 1.2060 - val_loss: 7.9961</div><div class="line">Epoch 14/40</div><div class="line">16/16 [==============================] - 83s - loss: 1.0768 - val_loss: 11.2121</div><div class="line">Epoch 15/40</div><div class="line">16/16 [==============================] - 80s - loss: 1.1401 - val_loss: 13.2052</div><div class="line">Epoch 16/40</div><div class="line">16/16 [==============================] - 83s - loss: 1.1961 - val_loss: 13.0330</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(四)——Fine Tuning神经网络
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>pandas总结(一)——Series的使用</title>
    <link href="noahsnail.com/2017/06/06/2017-6-6-pandas%E6%80%BB%E7%BB%93(%E4%B8%80)%E2%80%94%E2%80%94Series%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>noahsnail.com/2017/06/06/2017-6-6-pandas总结(一)——Series的使用/</id>
    <published>2017-06-06T11:33:34.000Z</published>
    <updated>2017-06-06T11:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># pandas是一个用来进行数据分析的基于numpy的库</span></div><div class="line"></div><div class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</div><div class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</div><div class="line"></div><div class="line"><span class="comment"># Series是一个一维的数据结构</span></div><div class="line"></div><div class="line"><span class="comment"># 用list构建Series</span></div><div class="line">series1 = pd.Series([<span class="number">3</span>, <span class="number">5</span>, <span class="string">'test'</span>, <span class="number">-5</span>, <span class="number">0.3</span>])</div><div class="line"><span class="keyword">print</span> series1</div></pre></td></tr></table></figure>
<pre><code>0       3
1       5
2    test
3      -5
4     0.3
dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 用list, index构建Series</span></div><div class="line">series2 = pd.Series([<span class="number">3</span>, <span class="number">5</span>, <span class="string">'test'</span>, <span class="number">-5</span>, <span class="number">0.3</span>], index = [<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>])</div><div class="line"><span class="keyword">print</span> series2</div></pre></td></tr></table></figure>
<pre><code>A       3
B       5
C    test
D      -5
E     0.3
dtype: object
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 通过dict构建Series</span></div><div class="line">companies = &#123;<span class="string">'Baidu'</span>: <span class="number">400</span>, <span class="string">'Alibaba'</span>: <span class="number">500</span>, <span class="string">'Tecent'</span>: <span class="number">600</span>, <span class="string">'Jingdong'</span>: <span class="number">300</span>&#125;</div><div class="line">series3 = pd.Series(companies)</div><div class="line"><span class="keyword">print</span> series3</div></pre></td></tr></table></figure>
<pre><code>Alibaba     500
Baidu       400
Jingdong    300
Tecent      600
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Series数据选择</span></div><div class="line"></div><div class="line"><span class="comment"># 通过index选择数据</span></div><div class="line"><span class="keyword">print</span> series3[<span class="string">'Baidu'</span>]</div><div class="line"></div><div class="line"><span class="comment"># 选择多个数据</span></div><div class="line"><span class="keyword">print</span> series3[[<span class="string">'Baidu'</span>, <span class="string">'Tecent'</span>]]</div></pre></td></tr></table></figure>
<pre><code>400
Baidu     400
Tecent    600
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据条件选择数据</span></div><div class="line"><span class="keyword">print</span> series3[series3 &lt; <span class="number">500</span>]</div></pre></td></tr></table></figure>
<pre><code>Baidu       400
Jingdong    300
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># 条件选择原理</span></div><div class="line"><span class="keyword">print</span> series3 &lt; <span class="number">500</span></div><div class="line">temp = series3 &lt; <span class="number">500</span></div><div class="line"><span class="keyword">print</span> series3[temp]</div></pre></td></tr></table></figure>
<pre><code>Alibaba     False
Baidu        True
Jingdong     True
Tecent      False
dtype: bool
Baidu       400
Jingdong    300
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Series元素赋值</span></div><div class="line"><span class="keyword">print</span> <span class="string">'old value: '</span>, series3[<span class="string">'Baidu'</span>]</div><div class="line">series3[<span class="string">'Baidu'</span>] = <span class="number">450</span></div><div class="line"><span class="keyword">print</span> <span class="string">'new value: '</span>, series3[<span class="string">'Baidu'</span>]</div></pre></td></tr></table></figure>
<pre><code>old value:  400
new value:  450
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 根据条件赋值</span></div><div class="line"><span class="keyword">print</span> <span class="string">'old series: '</span></div><div class="line"><span class="keyword">print</span> series3</div><div class="line">series3[series3 &lt; <span class="number">500</span>] = <span class="number">500</span></div><div class="line"><span class="keyword">print</span> <span class="string">'new series: '</span></div><div class="line"><span class="keyword">print</span> series3</div></pre></td></tr></table></figure>
<pre><code>old series: 
Alibaba     500
Baidu       400
Jingdong    300
Tecent      600
dtype: int64
new series: 
Alibaba     500
Baidu       500
Jingdong    500
Tecent      600
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Series数学运算</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Division: '</span></div><div class="line"><span class="keyword">print</span> series3 / <span class="number">2</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Square: '</span></div><div class="line"><span class="keyword">print</span> series3 ** <span class="number">2</span></div><div class="line"><span class="keyword">print</span> np.square(series3)</div></pre></td></tr></table></figure>
<pre><code>Division: 
Alibaba     250.0
Baidu       250.0
Jingdong    250.0
Tecent      300.0
dtype: float64
Square: 
Alibaba     250000
Baidu       250000
Jingdong    250000
Tecent      360000
dtype: int64
Alibaba     250000
Baidu       250000
Jingdong    250000
Tecent      360000
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 定义新的Series, 公司人数</span></div><div class="line">people = &#123;<span class="string">'Baidu'</span>: <span class="number">50000</span>, <span class="string">'Alibaba'</span>: <span class="number">45000</span>, <span class="string">'Tecent'</span>: <span class="number">60000</span>, <span class="string">'Jingdong'</span>: <span class="number">80000</span>, <span class="string">'Netease'</span>: <span class="number">30000</span>&#125;</div><div class="line">series4 = pd.Series(people)</div><div class="line"><span class="keyword">print</span> series4</div></pre></td></tr></table></figure>
<pre><code>Alibaba     45000
Baidu       50000
Jingdong    80000
Netease     30000
Tecent      60000
dtype: int64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Series相加, series3没有Netease, 因此结果为NaN</span></div><div class="line"><span class="keyword">print</span> series3 + series4</div></pre></td></tr></table></figure>
<pre><code>Alibaba     45500.0
Baidu       50500.0
Jingdong    80500.0
Netease         NaN
Tecent      60600.0
dtype: float64
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 判断数据是否数据缺失</span></div><div class="line"><span class="keyword">print</span> <span class="string">'Netease'</span> <span class="keyword">in</span> series3</div><div class="line"><span class="keyword">print</span> <span class="string">'Baidu'</span> <span class="keyword">in</span> series3</div></pre></td></tr></table></figure>
<pre><code>False
True
</code></pre><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 找出数据为null或非null的元素</span></div><div class="line">result = series3 + series4</div><div class="line"><span class="keyword">print</span> result.notnull()</div><div class="line"><span class="keyword">print</span> result.isnull()</div><div class="line"></div><div class="line"><span class="keyword">print</span> result[result.isnull()]</div><div class="line"><span class="keyword">print</span> result[result.isnull() != <span class="keyword">True</span>]</div></pre></td></tr></table></figure>
<pre><code>Alibaba      True
Baidu        True
Jingdong     True
Netease     False
Tecent       True
dtype: bool
Alibaba     False
Baidu       False
Jingdong    False
Netease      True
Tecent      False
dtype: bool
Netease   NaN
dtype: float64
Alibaba     45500.0
Baidu       50500.0
Jingdong    80500.0
Tecent      60600.0
dtype: float64
</code></pre>]]></content>
    
    <summary type="html">
    
      pandas总结(一)——Series的使用
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>Unix、Posix和标准UniX规范</title>
    <link href="noahsnail.com/2017/06/03/2017-6-3-Unix%E3%80%81Posix%E5%92%8C%E6%A0%87%E5%87%86UniX%E8%A7%84%E8%8C%83/"/>
    <id>noahsnail.com/2017/06/03/2017-6-3-Unix、Posix和标准UniX规范/</id>
    <published>2017-06-03T10:06:44.000Z</published>
    <updated>2017-06-03T10:14:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>20世纪60年代是大型、复杂操作系统盛行的年代，比如IBM的OS/360和Honeywell的Multics系统。OS/360是历史上最成功的软件项目之一，而 Multics虽然持续存在了多年，却从来没有被广泛应用过。贝尔实验室曾经是Multics项目的最初参与者，但是因为考虑到该项目的复杂性和缺乏进展而于1969年退出。鉴于Mutics项目不愉快的经历，一群贝尔实验室的研究人员Ken Thompson、 Dennis Ritchie、 Doug Mcllroy和 Joe Ossanna，从1969年开始在DEC PDP-7计算机上完全用机器语言编写了一个简单得多的操作系统。这个新系统中的很多思想，比如层次文件系统、作为用户级进程的 shell概念，都是来自于 Multics，只不过在一个更小、更简单的程序包里实现。1970年，Brian Kernighan给新系统命名为“Unix”，这也是一个双关语，暗指“Multics”的复杂性。1973年用C重新编写其内核，1974年，Unix开始正式对外发布。</p>
<p>贝尔实验室以慷慨的条件向学校提供源代码，所以Unix在大专院校里获得了很多支持并得以持续发展。最有影响的工作发生在20世纪70年代晚期到80年代早期，在美国加州大学伯克利分校，研究人员在一系列发布版本中增加了虚拟内存和Internet协议，称为Unix4.xBSD(Berkeley Software Distribution)。与此同时，贝尔实验室也在发布自己的版本，称为System V Unix。其他厂商的版本，比如Sun Microsystems的Solaris系统,则是从这些原始的BSD和System V版本中衍生而来。</p>
<p>20世纪80年代中期，Unix厂商试图通过加入新的、往往不兼容的特性来使它们的程序与众不同，麻烦也就随之而来了。为了阻止这种趋势，IEEE(电气和电子工程师协会)开始努力标准化Unix的开发，后来由 Richard Stallman命名为“Posix”。结果就得到了一系列的标准，称作Posix标准。这套标准涵盖了很多方面，比如Unix系统调用的C语言接口、shell程序和工具、线程及网络编程。最近，一个被称为“标准Unix规范”的独立标准化工作已经与Posix一起创建了统一的Unix系统标准。这些标准化工作的结果是Unix版本之间的差异已经基本消失。</p>
<p>参考资料：</p>
<ol>
<li>深度理解计算机系统（P11）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Unix、Posix和标准UniX规范
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>GNU项目</title>
    <link href="noahsnail.com/2017/06/03/2017-6-3-GNU%E9%A1%B9%E7%9B%AE/"/>
    <id>noahsnail.com/2017/06/03/2017-6-3-GNU项目/</id>
    <published>2017-06-03T09:57:06.000Z</published>
    <updated>2017-06-03T10:03:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>GCC是GNU(GNU是GNU’s Not Unix的缩写)项目开发出来的众多有用工具之。GNU项目是1984年由Richard Stallman发起的一个免税的慈善项目。该项目的目标非常宏大，就是开发出一个完整的类Unix的系统，其源代码能够不受限制地被修改和传播。GNU项目已经开发出了一个包含Unix操作系统的所有主要部件的环境，但内核除外，内核是由 Linux项目独立发展而来的。GNU环境包括 EMACS编辑器、GCC编译器、GDB调试器、汇编器、链接器、处理二进制文件的工具以及其他一些部件。GCC编译器已经发展到支持许多不同的语言，能够为许多不同的机器生成代码。支持的语言包括C、C++、 Fortran、Java、Pascal、面向对象C语言(Objective-C)和Ada。</p>
<p>GNU项目取得了非凡的成绩，但是却常常被忽略。现代开放源码运动(通常和Linux联系在一起)的思想起源是GNU项目中自由软件(free software)的概念。(此处的free为自由言论(free speech)中的“自由”之意，而非免费啤酒(free beer)中的“免费”之意。) 而且，Linux如此受欢迎在很大程度上还要归功于GNU工具，它们给Linux内核提供了环境。</p>
<p>参考资料：</p>
<ol>
<li>深度理解计算机系统（P4）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      GNU项目
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>C语言的起源</title>
    <link href="noahsnail.com/2017/06/03/2017-6-3-C%E8%AF%AD%E8%A8%80%E7%9A%84%E8%B5%B7%E6%BA%90/"/>
    <id>noahsnail.com/2017/06/03/2017-6-3-C语言的起源/</id>
    <published>2017-06-03T09:43:06.000Z</published>
    <updated>2017-06-03T09:54:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>C语言是贝尔实验室的Dennis Ritchie于1969年~1973年间创建的。美国国家标准学会（American national standards institute，ANSI）在1989年颁布了ANSI C的标准，后来语言的标准化成了国际标准化组织（International Standards Organization，ISO)的责任。这些标准定义了C语言和一系列函数库,即所谓的<strong>C标准库</strong>。Kernighan和 Ritchie在他们的经典著作中描述了ANSI C，这本著作被人们满怀感情地称为“K8R”。用Ritchie的话来说，C语言是“古怪的、有缺陷的，但同时也是一个巨大的成功”。为什么会成功呢?</p>
<ul>
<li><p>C语言与Unⅸ操作系统关系密切。<br>C从一开始就是作为一种用于Unix系统的程府语言开发出来的。大部分Unix内核(操作系统的核心部分)，以及所有支撑工具和函数库都是用C语言编写的。20世纪70年代后期到80年代初期，Unix风行于高等院校，许多人开始接触C语言并喜欢上它。因为Unix几乎全部是用C编写的，它可以很方便地移植到新的机器上，这种特点为C和Unix赢得了更为广泛的支持。</p>
</li>
<li><p>C语言小而简单。<br>C语言的设计是由一个人而非一个协会掌控的，因此这是一个简洁明了、没有什么冗赘的设计。K&amp;R这本书用大量的例子和练习描述了完整的C语言及其标准库，而全书不过261页。C语言的简单使它相对而言易于学习，也易于移植到不同的计算机上。</p>
</li>
<li><p>C语言是为实践目的设计的。C语言是设计用来实现Unix操作系统的。后来其他人发现能够用这门语言无障碍地编写他们想要的程序。</p>
</li>
</ul>
<p>C语言是系统级编程的首选，同时它也非常适用于应用级程序的编写。然而，它也并非适用于所有的程序员和所有的情况。C语言的指针是造成程序员困惑和程序错误的一个常见原因。同时，C语言还缺乏对非常有用的抽象的显式支持，例如类、对象和异常，像C++和Java这样针对应用级程序的新程序语言解决了这些问题。</p>
<p>参考资料：</p>
<ol>
<li>深度理解计算机系统（P2，3）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      C语言的起源
    
    </summary>
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/categories/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="深入理解计算机系统" scheme="noahsnail.com/tags/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Caffe神经网络结构汇总</title>
    <link href="noahsnail.com/2017/06/01/2017-6-1-Caffe%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84%E6%80%BB%E7%BB%93/"/>
    <id>noahsnail.com/2017/06/01/2017-6-1-Caffe网络结构总结/</id>
    <published>2017-06-01T07:16:35.000Z</published>
    <updated>2017-06-01T07:56:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>自2012年Alexnet赢得了ImageNet竞赛以来，深度学习（神经网络）得到了飞速发展，产生了许多的神经网络结构，本文主要总结Caffe中使用的神经网络(分类的神经网络)，本文的神经网络作者都使用Caffe训练过，并在Kaggle的Intel癌症预测比赛中进行了测试与使用（top 8%）。</p>
<h2 id="1-Alexnet"><a href="#1-Alexnet" class="headerlink" title="1. Alexnet"></a>1. Alexnet</h2><p>Alexnet，2012年ImageNet竞赛冠军，深度学习的里程碑。</p>
<p>网络结构地址：<a href="https://github.com/BVLC/caffe/tree/master/models/bvlc_alexnet" target="_blank" rel="external">https://github.com/BVLC/caffe/tree/master/models/bvlc_alexnet</a></p>
<p>预训练模型地址：<a href="http://dl.caffe.berkeleyvision.org/bvlc_alexnet.caffemodel" target="_blank" rel="external">http://dl.caffe.berkeleyvision.org/bvlc_alexnet.caffemodel</a></p>
<h2 id="2-Squeezenet"><a href="#2-Squeezenet" class="headerlink" title="2. Squeezenet"></a>2. Squeezenet</h2><p>Squeezenet设计目标不是为了提高识别的准确率，而是希望简化网络复杂度。squeezenet的模型结构确实很小，没压缩的情况下才5M左右，而且识别的精度还可以。</p>
<p>网络结构地址：<a href="https://github.com/DeepScale/SqueezeNet" target="_blank" rel="external">https://github.com/DeepScale/SqueezeNet</a></p>
<p>预训练模型地址：<a href="https://github.com/DeepScale/SqueezeNet" target="_blank" rel="external">https://github.com/DeepScale/SqueezeNet</a></p>
<h2 id="3-VGG系列"><a href="#3-VGG系列" class="headerlink" title="3. VGG系列"></a>3. VGG系列</h2><p>VGG和GoogLenet是2014年imagenet竞赛的双雄，VGG主要分为VGG16和VGG19。其网络结构与预训练模型的地址如下：</p>
<p>VGG16的网络结构：<a href="https://gist.github.com/ksimonyan/211839e770f7b538e2d8#file-readme-md" target="_blank" rel="external">https://gist.github.com/ksimonyan/211839e770f7b538e2d8#file-readme-md</a></p>
<p>VGG16的预训练模型：<a href="http://www.robots.ox.ac.uk/~vgg/software/very_deep/caffe/VGG_ILSVRC_16_layers.caffemodel" target="_blank" rel="external"> http://www.robots.ox.ac.uk/~vgg/software/very_deep/caffe/VGG_ILSVRC_16_layers.caffemodel</a></p>
<p>VGG19的网络结构：<a href="https://gist.github.com/ksimonyan/3785162f95cd2d5fee77#file-readme-md" target="_blank" rel="external">https://gist.github.com/ksimonyan/3785162f95cd2d5fee77#file-readme-md</a></p>
<p>VGG19的预训练模型：<a href="http://www.robots.ox.ac.uk/~vgg/software/very_deep/caffe/VGG_ILSVRC_19_layers.caffemodel" target="_blank" rel="external">http://www.robots.ox.ac.uk/~vgg/software/very_deep/caffe/VGG_ILSVRC_19_layers.caffemodel</a></p>
<p>备注：上面的网络结构需要进行细微调整才能在Caffe中直接训练，主要是网络结构中的Type类型。</p>
<h2 id="4-Resnet系列"><a href="#4-Resnet系列" class="headerlink" title="4. Resnet系列"></a>4. Resnet系列</h2><p>Resnet网络，2015年ImageNet竞赛冠军，网络结构主要分为Resnet-50、Resnet-101、Resnet-152三种，当然也有一些其它的结构，例如Resnet-18，Resnet-14。</p>
<p>Github地址：<a href="https://github.com/KaimingHe/deep-residual-networks" target="_blank" rel="external">https://github.com/KaimingHe/deep-residual-networks</a></p>
<p>Resnet-50、Resnet-101、Resnet-152的网络结构及预训练模型的下载地址：<a href="https://onedrive.live.com/?authkey=%21AAFW2-FVoxeVRck&amp;id=4006CBB8476FF777%2117887&amp;cid=4006CBB8476FF777" target="_blank" rel="external">https://onedrive.live.com/?authkey=%21AAFW2-FVoxeVRck&amp;id=4006CBB8476FF777%2117887&amp;cid=4006CBB8476FF777</a></p>
<h2 id="5-Inception系列"><a href="#5-Inception系列" class="headerlink" title="5. Inception系列"></a>5. Inception系列</h2><p>Inception系列是Google发明的一系列神经网络结构。</p>
<p>Inception-v1：</p>
<p>Inception-v1，即大名鼎鼎的GoogLenet，2014年ImageNet竞赛冠军。</p>
<p>网络结构地址：<a href="https://github.com/BVLC/caffe/tree/master/models/bvlc_googlenet" target="_blank" rel="external">https://github.com/BVLC/caffe/tree/master/models/bvlc_googlenet</a></p>
<p>预训练模型地址：<a href="http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel" target="_blank" rel="external">http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel</a></p>
<p>Inception-v2：</p>
<p>即Inception V1 + Batch Normalization。</p>
<p>网络结构地址：<a href="https://github.com/pertusa/InceptionBN-21K-for-Caffe" target="_blank" rel="external">https://github.com/pertusa/InceptionBN-21K-for-Caffe</a></p>
<p>预训练模型地址：<a href="http://www.dlsi.ua.es/~pertusa/deep/Inception21k.caffemodel" target="_blank" rel="external">http://www.dlsi.ua.es/~pertusa/deep/Inception21k.caffemodel</a></p>
<p>Inception-v3：</p>
<p>网络结构地址：<a href="https://pan.baidu.com/s/1boC0HEf#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1boC0HEf#list/path=%2F</a></p>
<p>预训练模型地址：<a href="https://pan.baidu.com/s/1boC0HEf#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1boC0HEf#list/path=%2F</a></p>
<p>Inception-v4：</p>
<p>网络结构地址：<a href="https://pan.baidu.com/s/1c6D150#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1c6D150#list/path=%2F</a></p>
<p>预训练模型地址：<a href="https://pan.baidu.com/s/1c6D150#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1c6D150#list/path=%2F</a></p>
<p>Inception-resnet-v2：</p>
<p>网络结构地址：<a href="https://pan.baidu.com/s/1jHPJCX4#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1jHPJCX4#list/path=%2F</a></p>
<p>预训练模型地址：<a href="https://pan.baidu.com/s/1jHPJCX4#list/path=%2F" target="_blank" rel="external">https://pan.baidu.com/s/1jHPJCX4#list/path=%2F</a></p>
]]></content>
    
    <summary type="html">
    
      Caffe神经网络结构汇总
    
    </summary>
    
      <category term="Caffe" scheme="noahsnail.com/categories/Caffe/"/>
    
    
      <category term="Caffe" scheme="noahsnail.com/tags/Caffe/"/>
    
  </entry>
  
  <entry>
    <title>Pandas应用总结</title>
    <link href="noahsnail.com/2017/05/27/2017-5-27-Pandas%E5%BA%94%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <id>noahsnail.com/2017/05/27/2017-5-27-Pandas应用总结/</id>
    <published>2017-05-27T10:33:49.000Z</published>
    <updated>2017-05-27T10:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>Pandas是一个基于numpy的、用来进行数据分析的库。</p>
<h2 id="1-Series的应用"><a href="#1-Series的应用" class="headerlink" title="1. Series的应用"></a>1. Series的应用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import pandas as pd</div><div class="line">import numpy as np</div><div class="line"></div><div class="line"># Series是一个一维的数据结构</div><div class="line"></div><div class="line"># 用list构建Series</div><div class="line">s = pd.Series([3, 5, &apos;test&apos;, -5, 0.3])</div><div class="line">print s</div><div class="line"></div><div class="line">0       3</div><div class="line">1       5</div><div class="line">2    test</div><div class="line">3      -5</div><div class="line">4     0.3</div><div class="line">dtype: object</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Pandas应用总结
    
    </summary>
    
      <category term="Machine Learning" scheme="noahsnail.com/categories/Machine-Learning/"/>
    
    
      <category term="Machine Learning" scheme="noahsnail.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Linux下启动和停止apache服务</title>
    <link href="noahsnail.com/2017/05/27/2017-5-27-Linux%E4%B8%8B%E5%90%AF%E5%8A%A8%E5%92%8C%E5%81%9C%E6%AD%A2apache%E6%9C%8D%E5%8A%A1/"/>
    <id>noahsnail.com/2017/05/27/2017-5-27-Linux下启动和停止apache服务/</id>
    <published>2017-05-27T06:17:50.000Z</published>
    <updated>2017-05-27T10:27:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文使用的Linux系统为CentOS 7，下面将介绍apache服务的启动、关闭与设置。apache在CentOS 7中一般是默认安装的，而且服务名字为<code>httpd</code>。</p>
<h2 id="1-安装apache及查看相关配置"><a href="#1-安装apache及查看相关配置" class="headerlink" title="1. 安装apache及查看相关配置"></a>1. 安装apache及查看相关配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"># apache安装命令</div><div class="line"></div><div class="line">$ sudo yum install httpd</div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Package httpd-2.4.6-45.el7.centos.4.x86_64 already installed and latest version</div><div class="line">Nothing to do</div><div class="line"></div><div class="line"></div><div class="line"># 查看apache文件的位置</div><div class="line"></div><div class="line">$ sudo find / -name httpd</div><div class="line">/run/httpd</div><div class="line">/etc/logrotate.d/httpd</div><div class="line">/etc/sysconfig/httpd</div><div class="line">/etc/httpd</div><div class="line">/var/log/httpd</div><div class="line">/var/cache/httpd</div><div class="line">/usr/sbin/httpd</div><div class="line">/usr/lib64/httpd</div><div class="line">/usr/share/httpd</div><div class="line">/usr/include/httpd</div><div class="line">/usr/libexec/initscripts/legacy-actions/httpd</div></pre></td></tr></table></figure>
<p>Apache配置文件位于<code>/etc/httpd/conf</code>，主要的配置文件是<code>/etc/httpd/conf/httpd.conf</code>, apache相关的配置信息都可以在这个文件中看到。</p>
<h2 id="2-apache服务的启动与关闭"><a href="#2-apache服务的启动与关闭" class="headerlink" title="2. apache服务的启动与关闭"></a>2. apache服务的启动与关闭</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 启动服务</div><div class="line">$ sudo systemctl start httpd.service</div><div class="line"></div><div class="line"># 查看服务</div><div class="line">$ ps aux | grep httpd</div><div class="line">root     *  0.3  0.0 220444  4956 ?        Ss   15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line">apache   *  0.0  0.0 220444  2492 ?        S    15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line">apache   *  0.0  0.0 220444  2488 ?        S    15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line">apache   *  0.0  0.0 220444  2488 ?        S    15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line">apache   *  0.0  0.0 220444  2488 ?        S    15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line">apache   *  0.0  0.0 220444  2488 ?        S    15:46   0:00 /usr/sbin/httpd -DFOREGROUND</div><div class="line"></div><div class="line"># 停止服务</div><div class="line">$ sudo systemctl stop httpd.service</div><div class="line"></div><div class="line"># 重启服务</div><div class="line">$ sudo systemctl restart httpd.service</div></pre></td></tr></table></figure>
<p>启动服务后，可以在外网通过服务器的IP地址访问。可以看到如下界面：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/apache.png" alt="image"></p>
<h2 id="3-配置自己可以在外部访问的内容"><a href="#3-配置自己可以在外部访问的内容" class="headerlink" title="3. 配置自己可以在外部访问的内容"></a>3. 配置自己可以在外部访问的内容</h2><p>可以在<code>/var/www/html</code>下创建一个软链接，链接到你想要在外部访问的内容，同时要修改要访问目录的权限。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ln -s images your_directory</div><div class="line">$ sudo chmod 755 your_directory</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      Linux下启动和停止apache服务
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux的find命令</title>
    <link href="noahsnail.com/2017/05/26/2017-5-26-Linux%E7%9A%84find%E5%91%BD%E4%BB%A4/"/>
    <id>noahsnail.com/2017/05/26/2017-5-26-Linux的find命令/</id>
    <published>2017-05-26T05:33:22.000Z</published>
    <updated>2017-05-27T06:17:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>Linux的find命令主要用来查找系统中的文件。命令格式如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">find命令的格式： find  [-path ..] -options [-print -exec -ok]</div><div class="line">path：要查找的目录路径。</div><div class="line">~ 表示$HOME目录</div><div class="line">. 表示当前目录</div><div class="line">/ 表示根目录</div><div class="line">-print ：表示将结果输出到标准输出</div><div class="line">-exec ：对匹配的文件执行该参数所给出的shell命令。形式为 command  &#123;&#125; \; ，注意&#123;&#125;与\; 之间有空格</div><div class="line">-ok ：与-exec作用相同，区别在于，在执行命令之前，都会给出提示，让用户确认是否执行</div><div class="line"></div><div class="line">options常用的有下选项：</div><div class="line">-name 按照名字查找</div><div class="line">-perm 安装权限查找</div><div class="line">-prune 不再当前指定的目录下查找</div><div class="line">-user 文件属主来查找</div><div class="line">-group 所属组来查找</div><div class="line">-nogroup 查找无有效所属组的文件</div><div class="line">-nouser 查找无有效属主的文件</div><div class="line">-type 按照文件类型查找</div></pre></td></tr></table></figure>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"># 当前路径下查找名为source_code的文件或文件夹（递归子文件夹）</div><div class="line">$ find . -name source_code</div><div class="line">./source_code</div><div class="line"></div><div class="line"># 查找当前路径下的txt文件</div><div class="line">$ find . -name &quot;*.txt&quot;</div><div class="line">./crontab.txt</div><div class="line"></div><div class="line"># 根据文件权限查找，查找权限为777的文件</div><div class="line">$ find . -perm 777</div><div class="line">./test.sh</div><div class="line"></div><div class="line"># 根据类型查找，查找符号链接</div><div class="line">$ find . -type l</div><div class="line">./Chapter14/multem</div><div class="line"></div><div class="line"># 根据修改时间查找</div><div class="line">$ find . -mtime 7 -type f</div><div class="line">./model-zoo/.DS_Store</div><div class="line">./model-zoo/vgg19/train_val.prototxt</div><div class="line">./model-zoo/vgg19/VGG_ILSVRC_19_layers.caffemodel</div><div class="line"></div><div class="line"># 根据文件大小查找</div><div class="line">$ find . -size +1k -type f</div><div class="line">./.DS_Store</div><div class="line">./Chapter14/.DS_Store</div><div class="line">./Chapter15/.DS_Store</div><div class="line">./Chapter16/.DS_Store</div><div class="line">./Chapter17/.DS_Store</div><div class="line">./filename.txt</div><div class="line"></div><div class="line"># 查找文件并删除</div><div class="line">$ find . -size +1k -type f -ok rm &#123;&#125; \;</div><div class="line">&quot;rm ./.DS_Store&quot;? y</div><div class="line">&quot;rm ./Chapter14/.DS_Store&quot;? y</div><div class="line">&quot;rm ./Chapter15/.DS_Store&quot;? y</div><div class="line">&quot;rm ./Chapter16/.DS_Store&quot;? y</div><div class="line">&quot;rm ./Chapter17/.DS_Store&quot;? y</div><div class="line">&quot;rm ./filename.txt&quot;? n</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Linux的find命令
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Centos 7下Docker的安装与非root配置</title>
    <link href="noahsnail.com/2017/05/22/2017-5-22-Centos%207%E4%B8%8BDocker%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>noahsnail.com/2017/05/22/2017-5-22-Centos 7下Docker的安装与配置/</id>
    <published>2017-05-22T05:03:30.000Z</published>
    <updated>2017-05-22T05:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-CentOS-7下docker的安装"><a href="#1-CentOS-7下docker的安装" class="headerlink" title="1. CentOS 7下docker的安装"></a>1. CentOS 7下docker的安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 1. install yum-utils</span></div><div class="line">$ sudo yum install -y yum-utils</div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">base                                                                                          | 3.6 kB  00:00:00</div><div class="line">epel                                                                                          | 4.3 kB  00:00:00</div><div class="line">extras                                                                                        | 3.4 kB  00:00:00</div><div class="line">update                                                                                        | 3.4 kB  00:00:00</div><div class="line">(1/3): epel/7/x86_64/updateinfo                                                               | 797 kB  00:00:00</div><div class="line">(2/3): epel/7/x86_64/primary_db                                                               | 4.7 MB  00:00:00</div><div class="line">(3/3): update/7/x86_64/primary_db                                                             | 4.8 MB  00:00:00</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Package yum-utils-1.1.31-40.el7.noarch already installed and latest version</div><div class="line">Nothing to <span class="keyword">do</span></div><div class="line"></div><div class="line"><span class="comment"># 2. set up the stable repository</span></div><div class="line"><span class="variable">$sudo</span> yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">adding repo from: https://download.docker.com/linux/centos/docker-ce.repo</div><div class="line">grabbing file https://download.docker.com/linux/centos/docker-ce.repo to /etc/yum.repos.d/docker-ce.repo</div><div class="line">repo saved to /etc/yum.repos.d/docker-ce.repo</div><div class="line"></div><div class="line"><span class="comment"># 3. install docker</span></div><div class="line">$ sudo yum install docker-ce</div><div class="line">Loaded plugins: fastestmirror, langpacks</div><div class="line">docker-ce-stable                                                                              | 2.9 kB  00:00:00</div><div class="line">docker-ce-stable/x86_64/primary_db                                                            | 4.8 kB  00:00:00</div><div class="line">Loading mirror speeds from cached hostfile</div><div class="line">Resolving Dependencies</div><div class="line">--&gt; Running transaction check</div><div class="line">---&gt; Package docker-ce.x86_64 0:17.03.1.ce-1.el7.centos will be installed</div><div class="line">--&gt; Processing Dependency: docker-ce-selinux &gt;= 17.03.1.ce-1.el7.centos <span class="keyword">for</span> package: docker-ce-17.03.1.ce-1.el7.centos.x86_64</div><div class="line">--&gt; Processing Dependency: libcgroup <span class="keyword">for</span> package: docker-ce-17.03.1.ce-1.el7.centos.x86_64</div><div class="line">--&gt; Processing Dependency: libseccomp.so.2()(64bit) <span class="keyword">for</span> package: docker-ce-17.03.1.ce-1.el7.centos.x86_64</div><div class="line">--&gt; Running transaction check</div><div class="line">---&gt; Package docker-ce-selinux.noarch 0:17.03.1.ce-1.el7.centos will be installed</div><div class="line">--&gt; Processing Dependency: policycoreutils-python <span class="keyword">for</span> package: docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch</div><div class="line">---&gt; Package libcgroup.x86_64 0:0.41-11.el7 will be installed</div><div class="line">---&gt; Package libseccomp.x86_64 0:2.3.1-2.el7 will be installed</div><div class="line">--&gt; Running transaction check</div><div class="line">---&gt; Package policycoreutils-python.x86_64 0:2.5-11.el7_3 will be installed</div><div class="line">--&gt; Processing Dependency: setools-libs &gt;= 3.3.8-1 <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libsemanage-python &gt;= 2.5-5 <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: audit-libs-python &gt;= 2.1.3-4 <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: python-IPy <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libqpol.so.1(VERS_1.4)(64bit) <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libqpol.so.1(VERS_1.2)(64bit) <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libapol.so.4(VERS_4.0)(64bit) <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: checkpolicy <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libqpol.so.1()(64bit) <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Processing Dependency: libapol.so.4()(64bit) <span class="keyword">for</span> package: policycoreutils-python-2.5-11.el7_3.x86_64</div><div class="line">--&gt; Running transaction check</div><div class="line">---&gt; Package audit-libs-python.x86_64 0:2.6.5-3.el7_3.1 will be installed</div><div class="line">---&gt; Package checkpolicy.x86_64 0:2.5-4.el7 will be installed</div><div class="line">---&gt; Package libsemanage-python.x86_64 0:2.5-5.1.el7_3 will be installed</div><div class="line">---&gt; Package python-IPy.noarch 0:0.75-6.el7 will be installed</div><div class="line">---&gt; Package setools-libs.x86_64 0:3.3.8-1.1.el7 will be installed</div><div class="line">--&gt; Finished Dependency Resolution</div><div class="line"></div><div class="line">Dependencies Resolved</div><div class="line"></div><div class="line">=====================================================================================================================</div><div class="line"> Package                         Arch            Version                             Repository                 Size</div><div class="line">=====================================================================================================================</div><div class="line">Installing:</div><div class="line"> docker-ce                       x86_64          17.03.1.ce-1.el7.centos             docker-ce-stable           19 M</div><div class="line">Installing <span class="keyword">for</span> dependencies:</div><div class="line"> audit-libs-python               x86_64          2.6.5-3.el7_3.1                     update                     70 k</div><div class="line"> checkpolicy                     x86_64          2.5-4.el7                           base                      290 k</div><div class="line"> docker-ce-selinux               noarch          17.03.1.ce-1.el7.centos             docker-ce-stable           28 k</div><div class="line"> libcgroup                       x86_64          0.41-11.el7                         base                       65 k</div><div class="line"> libseccomp                      x86_64          2.3.1-2.el7                         base                       56 k</div><div class="line"> libsemanage-python              x86_64          2.5-5.1.el7_3                       update                    104 k</div><div class="line"> policycoreutils-python          x86_64          2.5-11.el7_3                        update                    445 k</div><div class="line"> python-IPy                      noarch          0.75-6.el7                          base                       32 k</div><div class="line"> setools-libs                    x86_64          3.3.8-1.1.el7                       base                      612 k</div><div class="line"></div><div class="line">Transaction Summary</div><div class="line">=====================================================================================================================</div><div class="line">Install  1 Package (+9 Dependent packages)</div><div class="line"></div><div class="line">Total download size: 20 M</div><div class="line">Installed size: 24 M</div><div class="line">Is this ok [y/d/N]: y</div><div class="line">Downloading packages:</div><div class="line">(1/10): audit-libs-python-2.6.5-3.el7_3.1.x86_64.rpm                                          |  70 kB  00:00:00</div><div class="line">(2/10): checkpolicy-2.5-4.el7.x86_64.rpm                                                      | 290 kB  00:00:00</div><div class="line">(3/10): libseccomp-2.3.1-2.el7.x86_64.rpm                                                     |  56 kB  00:00:00</div><div class="line">(4/10): libcgroup-0.41-11.el7.x86_64.rpm                                                      |  65 kB  00:00:00</div><div class="line">(5/10): policycoreutils-python-2.5-11.el7_3.x86_64.rpm                                        | 445 kB  00:00:00</div><div class="line">(6/10): setools-libs-3.3.8-1.1.el7.x86_64.rpm                                                 | 612 kB  00:00:00</div><div class="line">(7/10): libsemanage-python-2.5-5.1.el7_3.x86_64.rpm                                           | 104 kB  00:00:00</div><div class="line">(8/10): python-IPy-0.75-6.el7.noarch.rpm                                                      |  32 kB  00:00:00</div><div class="line">warning: /var/cache/yum/x86_64/7/docker-ce-stable/packages/docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch.rpm: Header V4 RSA/SHA512 Signature, key ID 621e9f35: NOKEY</div><div class="line">Public key <span class="keyword">for</span> docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch.rpm is not installed</div><div class="line">(9/10): docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch.rpm                                  |  28 kB  00:00:00</div><div class="line">(10/10): docker-ce-17.03.1.ce-1.el7.centos.x86_64.rpm                                         |  19 MB  00:00:00</div><div class="line">---------------------------------------------------------------------------------------------------------------------</div><div class="line">Total                                                                                 23 MB/s |  20 MB  00:00:00</div><div class="line">Retrieving key from https://download.docker.com/linux/centos/gpg</div><div class="line">Importing GPG key 0x621E9F35:</div><div class="line"> Userid     : <span class="string">"Docker Release (CE rpm) &lt;docker@docker.com&gt;"</span></div><div class="line"> Fingerprint: 060a 61c5 1b55 8a7f 742b 77aa c52f eb6b 621e 9f35</div><div class="line"> From       : https://download.docker.com/linux/centos/gpg</div><div class="line">Is this ok [y/N]: y</div><div class="line">Running transaction check</div><div class="line">Running transaction <span class="built_in">test</span></div><div class="line">Transaction <span class="built_in">test</span> succeeded</div><div class="line">Running transaction</div><div class="line">  Installing : libcgroup-0.41-11.el7.x86_64                                                                     1/10</div><div class="line">  Installing : setools-libs-3.3.8-1.1.el7.x86_64                                                                2/10</div><div class="line">  Installing : checkpolicy-2.5-4.el7.x86_64                                                                     3/10</div><div class="line">  Installing : libsemanage-python-2.5-5.1.el7_3.x86_64                                                          4/10</div><div class="line">  Installing : audit-libs-python-2.6.5-3.el7_3.1.x86_64                                                         5/10</div><div class="line">  Installing : python-IPy-0.75-6.el7.noarch                                                                     6/10</div><div class="line">  Installing : policycoreutils-python-2.5-11.el7_3.x86_64                                                       7/10</div><div class="line">  Installing : docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch                                                 8/10</div><div class="line">setsebool:  SELinux is disabled.</div><div class="line">libsemanage.semanage_direct_install_info: Overriding docker module at lower priority 100 with module at priority 400.</div><div class="line">  Installing : libseccomp-2.3.1-2.el7.x86_64                                                                    9/10</div><div class="line">  Installing : docker-ce-17.03.1.ce-1.el7.centos.x86_64                                                        10/10</div><div class="line">  Verifying  : libseccomp-2.3.1-2.el7.x86_64                                                                    1/10</div><div class="line">  Verifying  : python-IPy-0.75-6.el7.noarch                                                                     2/10</div><div class="line">  Verifying  : audit-libs-python-2.6.5-3.el7_3.1.x86_64                                                         3/10</div><div class="line">  Verifying  : libsemanage-python-2.5-5.1.el7_3.x86_64                                                          4/10</div><div class="line">  Verifying  : docker-ce-selinux-17.03.1.ce-1.el7.centos.noarch                                                 5/10</div><div class="line">  Verifying  : libcgroup-0.41-11.el7.x86_64                                                                     6/10</div><div class="line">  Verifying  : policycoreutils-python-2.5-11.el7_3.x86_64                                                       7/10</div><div class="line">  Verifying  : docker-ce-17.03.1.ce-1.el7.centos.x86_64                                                         8/10</div><div class="line">  Verifying  : checkpolicy-2.5-4.el7.x86_64                                                                     9/10</div><div class="line">  Verifying  : setools-libs-3.3.8-1.1.el7.x86_64                                                               10/10</div><div class="line"></div><div class="line">Installed:</div><div class="line">  docker-ce.x86_64 0:17.03.1.ce-1.el7.centos</div><div class="line"></div><div class="line">Dependency Installed:</div><div class="line">  audit-libs-python.x86_64 0:2.6.5-3.el7_3.1                    checkpolicy.x86_64 0:2.5-4.el7</div><div class="line">  docker-ce-selinux.noarch 0:17.03.1.ce-1.el7.centos            libcgroup.x86_64 0:0.41-11.el7</div><div class="line">  libseccomp.x86_64 0:2.3.1-2.el7                               libsemanage-python.x86_64 0:2.5-5.1.el7_3</div><div class="line">  policycoreutils-python.x86_64 0:2.5-11.el7_3                  python-IPy.noarch 0:0.75-6.el7</div><div class="line">  setools-libs.x86_64 0:3.3.8-1.1.el7</div><div class="line"></div><div class="line">Complete!</div><div class="line"></div><div class="line"><span class="comment"># 4. start docker</span></div><div class="line">$ sudo systemctl start docker</div><div class="line"></div><div class="line"><span class="comment"># 5. verify docker</span></div><div class="line">$ sudo docker run hello-world</div><div class="line">Unable to find image <span class="string">'hello-world:latest'</span> locally</div><div class="line">latest: Pulling from library/hello-world</div><div class="line">78445dd45222: Pull complete</div><div class="line">Digest: sha256:c5515758d4c5e1e838e9<span class="built_in">cd</span>307f6c6a0d620b5e07e6f927b07d05f6d12a1ac8d7</div><div class="line">Status: Downloaded newer image <span class="keyword">for</span> hello-world:latest</div><div class="line"></div><div class="line">Hello from Docker!</div><div class="line">This message shows that your installation appears to be working correctly.</div><div class="line"></div><div class="line">To generate this message, Docker took the following steps:</div><div class="line"> 1. The Docker client contacted the Docker daemon.</div><div class="line"> 2. The Docker daemon pulled the <span class="string">"hello-world"</span> image from the Docker Hub.</div><div class="line"> 3. The Docker daemon created a new container from that image <span class="built_in">which</span> runs the</div><div class="line">    executable that produces the output you are currently reading.</div><div class="line"> 4. The Docker daemon streamed that output to the Docker client, <span class="built_in">which</span> sent it</div><div class="line">    to your terminal.</div><div class="line"></div><div class="line">To try something more ambitious, you can run an Ubuntu container with:</div><div class="line"> $ docker run -it ubuntu bash</div><div class="line"></div><div class="line">Share images, automate workflows, and more with a free Docker ID:</div><div class="line"> https://cloud.docker.com/</div><div class="line"></div><div class="line">For more examples and ideas, visit:</div><div class="line"> https://docs.docker.com/engine/userguide/</div></pre></td></tr></table></figure>
<h2 id="2-docker非root配置"><a href="#2-docker非root配置" class="headerlink" title="2. docker非root配置"></a>2. docker非root配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 查看是否存在docker用户组</div><div class="line">$ cat /etc/group | grep docker</div><div class="line"></div><div class="line"># 如果不存在docker用户组，则创建</div><div class="line">$ sudo groupadd docker</div><div class="line"></div><div class="line"># 添加当前用户到docker组中</div><div class="line">$ sudo gpasswd -a $&#123;USER&#125; docker</div><div class="line"></div><div class="line"># 重启docker</div><div class="line">$ sudo systemctl restart docker</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Centos 7下Docker的安装与非root配置
    
    </summary>
    
      <category term="Docker学习笔记" scheme="noahsnail.com/categories/Docker%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Docker" scheme="noahsnail.com/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux的/bin、/sbin、/usr/sbin、/usr/bin、/usr/local/bin、/usr/local/sbin</title>
    <link href="noahsnail.com/2017/05/22/2017-5-22-Linux%E7%9A%84:bin%E3%80%81:sbin%E3%80%81:usr:sbin%E3%80%81:usr:bin/"/>
    <id>noahsnail.com/2017/05/22/2017-5-22-Linux的:bin、:sbin、:usr:sbin、:usr:bin/</id>
    <published>2017-05-22T01:51:31.000Z</published>
    <updated>2017-05-26T05:33:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>可以参考<a href="https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard" target="_blank" rel="external">https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard</a></p>
<p>1、Linux的/bin、/sbin、/usr/sbin、/usr/bin、/usr/local/bin、/usr/local/sbin</p>
<ul>
<li><p>/bin<br>bin为binary的简写，包含基本的用户命令，可被所有用户使用。包含能够同时被用户和系统管理员使用的命令（二进制程序），并且可以在不挂载任何其它文件系统的情况下使用。</p>
</li>
<li><p>/sbin<br>存放系统管理员以及其他需要root权限来运行的工具。同类型的工具同时也可以保存在<code>/usr/bin</code>、<code>/usr/local/sbin</code>。但是<code>/sbin</code>中保存的工具是在系统启动、复原、恢复和修复的过程中，作为<code>/bin</code>中工具的补充。</p>
</li>
</ul>
<ul>
<li><p>/usr/bin<br>非基本的命令二进制文件，所有用户可用。主要放置一些应用软件工具的必备执行档。</p>
</li>
<li><p>/usr/sbin<br>存放了系统管理员使用的、对于boot启动时非必须的二进制程序文件。在<code>/usr</code>确保被挂载的情况下，运行的管理员程序一般存放在<code>/usr/sbin</code>中，在本地安装的管理员程序则应当被存放在<code>/usr/local/sbin</code>中。</p>
</li>
<li><p>/usr/local/bin<br>本地站点用户使用的二进制程序文件。</p>
</li>
<li><p>/usr/local/sbin<br>本地站点管理员使用的二进制程序文件。</p>
</li>
</ul>
<p>总结：如果是用户和管理员必备的二进制文件，通常放在/bin。如果是系统管理员必备，但是一般用户根本不会用到的二进制文件，通常放在/sbin。相对而言，如果不是用户必备的二进制文件，通常会放在/usr/bin；如果不是系统管理员必备的工具，通常会放在/usr/sbin。</p>
<h2 id="2-Linux中的目录介绍"><a href="#2-Linux中的目录介绍" class="headerlink" title="2. Linux中的目录介绍"></a>2. Linux中的目录介绍</h2><p>•主目录：/root、/home/username<br>•用户可执行文件：/bin、/usr/bin、/usr/local/bin<br>•系统可执行文件：/sbin、/usr/sbin、/usr/local/sbin<br>•其他挂载点：/media、/mnt<br>•配置：/etc<br>•临时文件：/tmp<br>•内核和Bootloader：/boot<br>•服务器数据：/var、/srv<br>•系统信息：/proc、/sys<br>•共享库：/lib、/usr/lib、/usr/local/lib</p>
<p>参考资料：</p>
<ol>
<li><a href="http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2012/02/a_history_of_unix_directory_structure.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Linux的/bin、/sbin、/usr/sbin、/usr/bin、/usr/local/bin、/usr/local/sbin
    
    </summary>
    
      <category term="Linux" scheme="noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(三)——创建神经网络</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%89)%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-keras的基本用法(三)——创建神经网络/</id>
    <published>2017-05-10T14:55:02.000Z</published>
    <updated>2017-05-10T14:56:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">from keras.datasets import mnist</div><div class="line">from keras.utils import np_utils</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense, Activation, Conv2D, MaxPooling2D, Flatten</div><div class="line">from keras.optimizers import Adam</div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</div><div class="line"></div><div class="line"># 数据集预处理</div><div class="line">X_train = X_train.reshape(-1, 1, 28, 28)</div><div class="line">X_test = X_test.reshape(-1, 1, 28, 28)</div><div class="line"></div><div class="line"># 将label变为向量</div><div class="line">y_train = np_utils.to_categorical(y_train, 10)</div><div class="line">y_test = np_utils.to_categorical(y_test, 10)</div><div class="line"></div><div class="line"></div><div class="line"># 构建神经网络</div><div class="line">model = Sequential()</div><div class="line"></div><div class="line"># 卷积层一</div><div class="line">model.add(Conv2D(32, kernel_size = (5, 5), strides = (1, 1), padding = &apos;same&apos;, activation = &apos;relu&apos;, input_shape = (1, 28, 28)))</div><div class="line"></div><div class="line"># 池化层一</div><div class="line">model.add(MaxPooling2D(pool_size = (2, 2), strides = (1, 1), padding = &apos;same&apos;))</div><div class="line"></div><div class="line"># 卷积层二</div><div class="line">model.add(Conv2D(64, kernel_size = (5, 5), strides = (1, 1), padding = &apos;same&apos;, activation = &apos;relu&apos;))</div><div class="line"></div><div class="line"># 池化层二</div><div class="line">model.add(MaxPooling2D(pool_size = (2, 2), strides = (1, 1), padding = &apos;same&apos;))</div><div class="line"></div><div class="line"># 全连接层一</div><div class="line">model.add(Flatten())</div><div class="line">model.add(Dense(1024))</div><div class="line">model.add(Activation(&apos;relu&apos;))</div><div class="line"></div><div class="line"># 全连接层二</div><div class="line">model.add(Dense(10))</div><div class="line">model.add(Activation(&apos;softmax&apos;))</div><div class="line"></div><div class="line"># 选择并定义优化求解方法</div><div class="line">adam = Adam(lr = 1e-4)</div><div class="line"></div><div class="line"># 选择损失函数、求解方法、度量方法</div><div class="line">model.compile(optimizer = adam, loss = &apos;categorical_crossentropy&apos;, metrics = [&apos;accuracy&apos;])</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">model.fit(X_train, y_train, epochs = 2, batch_size = 32)</div><div class="line"></div><div class="line"># 评估模型</div><div class="line">loss, accuracy = model.evaluate(X_test, y_test)</div><div class="line"></div><div class="line">print &apos;&apos;</div><div class="line">print &apos;loss: &apos;, loss</div><div class="line">print &apos;accuracy: &apos;, accuracy</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Using TensorFlow backend.</div><div class="line">Epoch 1/2</div><div class="line">60000/60000 [==============================] - 55s - loss: 0.4141 - acc: 0.9234</div><div class="line">Epoch 2/2</div><div class="line">60000/60000 [==============================] - 56s - loss: 0.0743 - acc: 0.9770</div><div class="line"> 9920/10000 [============================&gt;.] - ETA: 0s</div><div class="line">loss:  0.103529265788</div><div class="line">accuracy:  0.9711</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(三)——创建神经网络
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(二)——定义分类器</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%BA%8C)%E2%80%94%E2%80%94%E5%AE%9A%E4%B9%89%E5%88%86%E7%B1%BB%E5%99%A8/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-keras的基本用法(二)——定义分类器/</id>
    <published>2017-05-10T13:44:57.000Z</published>
    <updated>2017-05-10T14:57:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">from keras.datasets import mnist</div><div class="line">from keras.utils import np_utils</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense, Activation</div><div class="line">from keras.optimizers import RMSprop</div><div class="line"></div><div class="line"># 加载数据集</div><div class="line">(X_train, y_train), (X_test, y_test) = mnist.load_data()</div><div class="line"></div><div class="line"># 数据集reshape, -1表示该参数不指定, 系统通过推断来获得</div><div class="line">X_train = X_train.reshape(X_train.shape[0], -1) / 255.0</div><div class="line">X_test = X_test.reshape(X_test.shape[0], -1) / 255.0</div><div class="line"></div><div class="line"># 将label变为向量</div><div class="line">y_train = np_utils.to_categorical(y_train, 10)</div><div class="line">y_test = np_utils.to_categorical(y_test, 10)</div><div class="line"></div><div class="line"></div><div class="line"># 构建分类器</div><div class="line">model = Sequential([</div><div class="line">    Dense(32, input_dim = 784),</div><div class="line">    Activation(&apos;relu&apos;),</div><div class="line">    Dense(10),</div><div class="line">    Activation(&apos;softmax&apos;)</div><div class="line">])</div><div class="line"></div><div class="line"># 选择并定义优化求解方法</div><div class="line">rmsprop = RMSprop(lr = 0.001, rho = 0.9, epsilon = 1e-8, decay = 0.0)</div><div class="line"></div><div class="line"># 选择损失函数、求解方法、度量方法</div><div class="line">model.compile(optimizer = rmsprop, loss = &apos;categorical_crossentropy&apos;, metrics = [&apos;accuracy&apos;])</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">model.fit(X_train, y_train, epochs = 2, batch_size = 32)</div><div class="line"></div><div class="line"># 评估模型</div><div class="line">loss, accuracy = model.evaluate(X_test, y_test)</div><div class="line"></div><div class="line">print &apos;&apos;</div><div class="line">print &apos;loss: &apos;, loss</div><div class="line">print &apos;accuracy: &apos;, accuracy</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Using TensorFlow backend.</div><div class="line">Epoch 1/2</div><div class="line">60000/60000 [==============================] - 2s - loss: 0.3382 - acc: 0.9048</div><div class="line">Epoch 2/2</div><div class="line">60000/60000 [==============================] - 2s - loss: 0.1913 - acc: 0.9454</div><div class="line"> 7680/10000 [======================&gt;.......] - ETA: 0s</div><div class="line">loss:  0.16181669073</div><div class="line">accuracy:  0.9535</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      keras的基本用法(二)——定义分类器
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十七)——保存figure</title>
    <link href="noahsnail.com/2017/05/10/2017-5-10-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E4%B8%83)%E2%80%94%E2%80%94%E4%BF%9D%E5%AD%98%E7%BB%98%E5%9B%BE/"/>
    <id>noahsnail.com/2017/05/10/2017-5-10-matplotlib的基本用法(十七)——保存绘图/</id>
    <published>2017-05-10T12:58:53.000Z</published>
    <updated>2017-05-10T13:04:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍matplotlib的一些用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">import matplotlib</div><div class="line">matplotlib.use(&apos;Agg&apos;)</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = np.arange(0, 10, 0.1)</div><div class="line">y = 0.05 * x ** 2</div><div class="line"></div><div class="line">#绘制图像</div><div class="line">plt.plot(x, y)</div><div class="line"></div><div class="line"># 设置坐标轴</div><div class="line">plt.xlabel(&apos;x data&apos;)</div><div class="line">plt.ylabel(&apos;y data&apos;)</div><div class="line"></div><div class="line"># 默认保存为png格式</div><div class="line">plt.savefig(&apos;test&apos;)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p>在文件夹下可看到<code>test.png</code>，如图：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/m17.png" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十七)——保存figure
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>keras的基本用法(一)——回归模型</title>
    <link href="noahsnail.com/2017/05/08/2017-5-8-Keras%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%80)%E2%80%94%E2%80%94%E5%9B%9E%E5%BD%92%E6%A8%A1%E5%9E%8B/"/>
    <id>noahsnail.com/2017/05/08/2017-5-8-Keras的基本用法(一)——回归模型/</id>
    <published>2017-05-08T14:26:54.000Z</published>
    <updated>2017-05-08T14:40:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍Keras的一些基本用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from keras.models import Sequential</div><div class="line">from keras.layers import Dense</div><div class="line"></div><div class="line"># 创建数据</div><div class="line">X = np.linspace(-1, 1, 200)</div><div class="line"># 数据随机化</div><div class="line">np.random.shuffle(X)</div><div class="line"># 创建数据及参数, 并加入噪声</div><div class="line">Y = 0.5 * X + 2 + np.random.normal(0, 0.05, (200,))</div><div class="line"></div><div class="line"># 绘制数据</div><div class="line">plt.scatter(X, Y)</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># 分为训练数据和测试数据</div><div class="line">X_train, Y_train = X[:160], Y[:160]</div><div class="line">X_test, Y_test = X[160:], Y[160:]</div><div class="line"></div><div class="line"># 使用keras创建神经网络</div><div class="line"># Sequential是指一层层堆叠的神经网络</div><div class="line"># Dense是指全连接层</div><div class="line"># 定义model</div><div class="line">model = Sequential()</div><div class="line"># 定义第一层, 由于是回归模型, 因此只有一层</div><div class="line">model.add(Dense(units = 1, input_dim = 1))</div><div class="line"></div><div class="line"># 选择损失函数和优化方法</div><div class="line">model.compile(loss = &apos;mse&apos;, optimizer = &apos;sgd&apos;)</div><div class="line"></div><div class="line">print &apos;----Training----&apos;</div><div class="line"># 训练过程</div><div class="line">for step in range(501):</div><div class="line">    # 进行训练, 返回损失(代价)函数</div><div class="line">    cost = model.train_on_batch(X_train, Y_train)</div><div class="line">    if step % 100 == 0:</div><div class="line">        print &apos;loss: &apos;, cost</div><div class="line"></div><div class="line">print &apos;----Testing----&apos;    </div><div class="line"># 训练结束进行测试</div><div class="line">cost = model.evaluate(X_test, Y_test, batch_size = 40)</div><div class="line">print &apos;test loss: &apos;, cost</div><div class="line"></div><div class="line"># 获取参数</div><div class="line">W, b = model.layers[0].get_weights()</div><div class="line">print &apos;Weights: &apos;,W</div><div class="line">print &apos;Biases: &apos;, b</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">----Training----</div><div class="line">loss:  3.97799</div><div class="line">loss:  0.100697</div><div class="line">loss:  0.0118289</div><div class="line">loss:  0.00448105</div><div class="line">loss:  0.00278243</div><div class="line">loss:  0.00232763</div><div class="line">----Testing----</div><div class="line">40/40 [==============================] - 0s</div><div class="line">test loss:  0.00307717337273</div><div class="line">Weights:  [[ 0.47406867]]</div><div class="line">Biases:  [ 1.99442744]</div></pre></td></tr></table></figure>
<p><img src="http://ocs628urt.bkt.clouddn.com/k1.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      keras的基本用法(一)——回归模型
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(八)——保存与加载模型</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%85%AB)%E2%80%94%E2%80%94%E4%BF%9D%E5%AD%98%E4%B8%8E%E5%8A%A0%E8%BD%BD%E6%A8%A1%E5%9E%8B/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-scikit-learn的基本用法(八)——保存与加载模型/</id>
    <published>2017-05-05T13:09:11.000Z</published>
    <updated>2017-05-05T13:15:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的模型的保存与加载。</p>
<ul>
<li>Demo 1</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">import pickle</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn import datasets</div><div class="line"></div><div class="line"># 定义分类器</div><div class="line">svm = SVC()</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">svm.fit(X, y)</div><div class="line"></div><div class="line"># 保存成python支持的文件格式pickle, 在当前目录下可以看到svm.pickle</div><div class="line">with open(&apos;svm.pickle&apos;, &apos;wb&apos;) as fw:</div><div class="line">    pickle.dump(svm, fw)</div><div class="line"></div><div class="line"># 加载svm.pickle</div><div class="line">with open(&apos;svm.pickle&apos;, &apos;rb&apos;) as fr:</div><div class="line">    new_svm = pickle.load(fr)</div><div class="line">    print new_svm.predict(X[0:1])</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[0]</div></pre></td></tr></table></figure>
<ul>
<li>Demo 2</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">from sklearn.externals import joblib</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn import datasets</div><div class="line"></div><div class="line"># 定义分类器</div><div class="line">svm = SVC()</div><div class="line"></div><div class="line"># 加载iris数据集</div><div class="line">iris = datasets.load_iris()</div><div class="line"># 读取特征</div><div class="line">X = iris.data</div><div class="line"># 读取分类标签</div><div class="line">y = iris.target</div><div class="line"></div><div class="line"># 训练模型</div><div class="line">svm.fit(X, y)</div><div class="line"></div><div class="line"># 保存成sklearn自带的文件格式</div><div class="line">joblib.dump(svm, &apos;svm.pkl&apos;)</div><div class="line"></div><div class="line"># 加载svm.pkl</div><div class="line">new_svm = joblib.load(&apos;svm.pkl&apos;)</div><div class="line">print new_svm.predict(X[0:1])</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[0]</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(八)——保存与加载模型
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>scikit-learn的基本用法(七)——交叉验证3</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-scikit-learn%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E4%B8%83)%E2%80%94%E2%80%94%E4%BA%A4%E5%8F%89%E9%AA%8C%E8%AF%813/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-scikit-learn的基本用法(七)——交叉验证3/</id>
    <published>2017-05-05T12:56:21.000Z</published>
    <updated>2017-05-05T12:57:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍scikit-learn中的交叉验证。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from sklearn.datasets import load_digits</div><div class="line">from sklearn.cross_validation import train_test_split</div><div class="line">from sklearn.svm import SVC</div><div class="line">from sklearn.learning_curve import validation_curve</div><div class="line">from sklearn.model_selection import cross_val_score </div><div class="line"></div><div class="line"># 选取合适的参数gamma</div><div class="line"># 加载数据集</div><div class="line">digits = load_digits()</div><div class="line">X = digits.data</div><div class="line">y = digits.target</div><div class="line"></div><div class="line"># 定义gamma参数</div><div class="line">param_range = np.logspace(-6, -2.3, 5)</div><div class="line"></div><div class="line"># 用SVM进行学习并记录loss</div><div class="line">train_loss, test_loss = validation_curve(SVC(), X, y, param_name = &apos;gamma&apos;, param_range = param_range, </div><div class="line">                                         cv = 10, scoring = &apos;mean_squared_error&apos;)</div><div class="line"></div><div class="line"># 训练误差均值</div><div class="line">train_loss_mean = -np.mean(train_loss, axis = 1)</div><div class="line"># 测试误差均值</div><div class="line">test_loss_mean = -np.mean(test_loss, axis = 1)</div><div class="line"></div><div class="line"># 绘制误差曲线</div><div class="line">plt.plot(param_range, train_loss_mean, &apos;o-&apos;, color = &apos;r&apos;, label = &apos;Training&apos;)</div><div class="line">plt.plot(param_range, test_loss_mean, &apos;o-&apos;, color = &apos;g&apos;, label = &apos;Cross-Validation&apos;)</div><div class="line"></div><div class="line">plt.xlabel(&apos;gamma&apos;)</div><div class="line">plt.ylabel(&apos;Loss&apos;)</div><div class="line">plt.legend(loc = &apos;best&apos;)</div><div class="line">plt.show()</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sk7.png" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      scikit-learn的基本用法(七)——交叉验证3
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
  <entry>
    <title>matplotlib的基本用法(十六)——创建动画</title>
    <link href="noahsnail.com/2017/05/05/2017-5-5-matplotlib%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95(%E5%8D%81%E5%85%AD)%E2%80%94%E2%80%94%E5%88%9B%E5%BB%BA%E5%8A%A8%E7%94%BB/"/>
    <id>noahsnail.com/2017/05/05/2017-5-5-matplotlib的基本用法(十六)——创建动画/</id>
    <published>2017-05-05T11:52:29.000Z</published>
    <updated>2017-05-05T11:54:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p>本文主要介绍matplotlib的一些用法。</p>
<ul>
<li>Demo</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">import numpy as np</div><div class="line">import matplotlib.pyplot as plt</div><div class="line">from matplotlib import animation</div><div class="line"></div><div class="line"></div><div class="line"># 定义figure</div><div class="line">fig, ax = plt.subplots()</div><div class="line"></div><div class="line"># 定义数据</div><div class="line">x = np.arange(0, 2 * np.pi, 0.01)</div><div class="line"># line, 表示只取返回值中的第一个元素</div><div class="line">line, = ax.plot(x, np.sin(x))</div><div class="line"></div><div class="line"># 定义动画的更新</div><div class="line">def update(i):</div><div class="line">    line.set_ydata(np.sin(x + i/10))</div><div class="line">    return line,</div><div class="line"></div><div class="line"># 定义动画的初始值</div><div class="line">def init():</div><div class="line">    line.set_ydata(np.sin(x))</div><div class="line">    return line,</div><div class="line"></div><div class="line"># 创建动画</div><div class="line">ani = animation.FuncAnimation(fig = fig, func = update, init_func = init, interval = 10, blit = False, frames = 200)</div><div class="line"></div><div class="line"># 展示动画</div><div class="line">plt.show()</div><div class="line"></div><div class="line"># 动画保存</div><div class="line">ani.save(&apos;sin.gif&apos;, writer = &apos;imagemagick&apos;, fps = 30, dpi = 100)</div></pre></td></tr></table></figure>
<ul>
<li>结果</li>
</ul>
<p><img src="http://ocs628urt.bkt.clouddn.com/sin.gif" alt="图像"></p>
<p>创建下雨的动画：</p>
<p><img src="http://ocs628urt.bkt.clouddn.com/rain.gif" alt="图像"></p>
]]></content>
    
    <summary type="html">
    
      matplotlib的基本用法(十六)——创建动画
    
    </summary>
    
      <category term="tensorflow" scheme="noahsnail.com/categories/tensorflow/"/>
    
    
      <category term="tensorflow" scheme="noahsnail.com/tags/tensorflow/"/>
    
  </entry>
  
</feed>
