<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noahsnail.com/"/>
  <updated>2019-05-28T07:01:15.000Z</updated>
  <id>http://noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python调用C</title>
    <link href="http://noahsnail.com/2019/05/27/2019-05-27-Python%E8%B0%83%E7%94%A8C/"/>
    <id>http://noahsnail.com/2019/05/27/2019-05-27-Python调用C/</id>
    <published>2019-05-27T06:05:37.000Z</published>
    <updated>2019-05-28T07:01:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>众所周知，Python语言简单、易学、开源、具有丰富的库，Python的第一个编译器是用C语言实现的。但Python的缺点也非常明显，最让人诟病的就是Python的性能问题。因此，为了提高程序的运行效率，通常会将程序的关键部分使用C或C++重写，编译成动态链接库，然后在Python（CPython）中进行调用。运行环境：Ubuntu 16.04、Python 2.7、Python 3.5。</p>
<h2 id="2-Python-C扩展"><a href="#2-Python-C扩展" class="headerlink" title="2. Python C扩展"></a>2. Python C扩展</h2><h3 id="2-1-普通C函数"><a href="#2-1-普通C函数" class="headerlink" title="2.1 普通C函数"></a>2.1 普通C函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">void hello()</div><div class="line">&#123;</div><div class="line">	printf(&quot;Hello World!\n&quot;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">int add(int a, int b)</div><div class="line">&#123;</div><div class="line">	return a + b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-2-Python-C扩展"><a href="#2-2-Python-C扩展" class="headerlink" title="2.2 Python C扩展"></a>2.2 Python C扩展</h3><p>Python扩展模块由以下几部分组成：</p>
<ul>
<li>头文件<python.h></python.h></li>
<li>调用的C函数</li>
<li>模块方法表</li>
<li>模块初始化函数</li>
</ul>
<p>具体实现<code>demo.c</code>如下：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 包含Python头文件</span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Python.h&gt;</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 兼容Python3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">if</span> PY_MAJOR_VERSION &gt;= 3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> PYTHON3</span></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// hello函数实现</span></div><div class="line"><span class="function"><span class="keyword">static</span> PyObject* <span class="title">hello</span><span class="params">(PyObject *self, PyObject *args)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World\n"</span>);</div><div class="line">    <span class="keyword">return</span> Py_None;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// add函数实现</span></div><div class="line"><span class="function"><span class="keyword">static</span> PyObject* <span class="title">add</span><span class="params">(PyObject *self, PyObject *args)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> a, b;</div><div class="line">    <span class="keyword">if</span>(!PyArg_ParseTuple(args, <span class="string">"ii"</span>, &amp;a, &amp;b))</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> Py_BuildValue(<span class="string">"i"</span>, a + b);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 模块方法表</span></div><div class="line"><span class="keyword">static</span> PyMethodDef TwoMethods[] = &#123;</div><div class="line">    &#123; <span class="string">"hello"</span>, hello, METH_NOARGS, <span class="string">"Print Hello"</span> &#125;,</div><div class="line">    &#123; <span class="string">"add"</span>, add, METH_VARARGS, <span class="string">"Add two integers"</span>&#125;,</div><div class="line">    &#123; <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span> &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> PYTHON3</span></div><div class="line"><span class="comment">// Python3模块定义结构体</span></div><div class="line"><span class="keyword">static</span> <span class="keyword">struct</span> PyModuleDef testModule = &#123;</div><div class="line">	PyModuleDef_HEAD_INIT,</div><div class="line">	<span class="string">"testModule"</span>,</div><div class="line">	<span class="string">"Test Module"</span>,</div><div class="line">	<span class="number">-1</span>,</div><div class="line">	TwoMethods</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// Python3模块初始化函数</span></div><div class="line"><span class="function">PyMODINIT_FUNC <span class="title">PyInit_demo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">	<span class="keyword">return</span> PyModule_Create(&amp;testModule);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">else</span></span></div><div class="line"><span class="comment">// Python2模块初始化函数</span></div><div class="line"><span class="function">PyMODINIT_FUNC <span class="title">initdemo</span><span class="params">(<span class="keyword">void</span>)</span></span></div><div class="line">&#123;</div><div class="line">    Py_InitModule(<span class="string">"demo"</span>, TwoMethods);</div><div class="line">&#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<h3 id="2-3-编译并测试"><a href="#2-3-编译并测试" class="headerlink" title="2.3 编译并测试"></a>2.3 编译并测试</h3><p>编写<code>setup.py</code>文件：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> distutils.core <span class="keyword">import</span> setup, Extension</div><div class="line"></div><div class="line">demo = Extension(<span class="string">'demo'</span>, sources = [<span class="string">'demo.c'</span>])</div><div class="line"></div><div class="line">setup(name = <span class="string">'C extension module'</span>, version = <span class="string">'1.0'</span>, description = <span class="string">'This is a demo'</span>, ext_modules = [demo])</div></pre></td></tr></table></figure>
<p>生成动态链接库的命令如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#python2</span></div><div class="line">$ python setup.py build_ext --inplace</div><div class="line">running build_ext</div><div class="line">building <span class="string">'demo'</span> extension</div><div class="line">x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fno-strict-aliasing -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security <span class="_">-f</span>PIC -I/usr/include/python2.7 -c demo.c -o build/temp.linux-x86_64-2.7/demo.o</div><div class="line">x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security -Wl,-Bsymbolic-functions -Wl,-z,relro -Wdate-time -D_FORTIFY_SOURCE=2 -g -fstack-protector-strong -Wformat -Werror=format-security build/temp.linux-x86_64-2.7/demo.o -o /workspace/python-c/demo.so</div><div class="line"></div><div class="line"><span class="comment">#python3</span></div><div class="line">$ python3 setup.py build_ext --inplace</div><div class="line">running build_ext</div><div class="line">building <span class="string">'demo'</span> extension</div><div class="line">x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 <span class="_">-f</span>PIC -I/usr/include/python3.5m -c demo.c -o build/temp.linux-x86_64-3.5/demo.o</div><div class="line">x86_64-linux-gnu-gcc -pthread -shared -Wl,-O1 -Wl,-Bsymbolic-functions -Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-Bsymbolic-functions -Wl,-z,relro -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 build/temp.linux-x86_64-3.5/demo.o -o /workspace/python-c/demo.cpython-35m-x86_64-linux-gnu.so</div></pre></td></tr></table></figure>
<p><code>hello</code>，<code>add</code>函数测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; from demo import hello, add</div><div class="line">&gt;&gt;&gt; hello()</div><div class="line">Hello World</div><div class="line">&gt;&gt;&gt; add(2, 3)</div><div class="line">5</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html" target="_blank" rel="external">https://www.cnblogs.com/vamei/archive/2013/02/06/2892628.html</a></li>
<li><a href="https://www.yanxurui.cc/posts/python/2017-06-18-3-ways-of-calling-c-functions-from-python/" target="_blank" rel="external">https://www.yanxurui.cc/posts/python/2017-06-18-3-ways-of-calling-c-functions-from-python/</a></li>
<li><a href="https://swe.mirsking.com/languages/python/pythoncallcplusplus" target="_blank" rel="external">https://swe.mirsking.com/languages/python/pythoncallcplusplus</a></li>
<li><a href="https://www.jianshu.com/p/cd28e8b0cce1" target="_blank" rel="external">https://www.jianshu.com/p/cd28e8b0cce1</a></li>
<li><a href="https://docs.python.org/2.7/extending/extending.html" target="_blank" rel="external">https://docs.python.org/2.7/extending/extending.html</a></li>
<li><a href="https://docs.python.org/2.7/extending/building.html" target="_blank" rel="external">https://docs.python.org/2.7/extending/building.html</a></li>
<li><a href="https://tutorialedge.net/python/python-c-extensions-tutorial/" target="_blank" rel="external">https://tutorialedge.net/python/python-c-extensions-tutorial/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python调用C
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>卷积神经网络中卷积运算的前向传播与反向传播推导</title>
    <link href="http://noahsnail.com/2019/05/21/2019-05-21-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E4%B8%AD%E7%9A%84%E5%89%8D%E5%90%91%E4%BC%A0%E6%92%AD%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BC%A0%E6%92%AD%E6%8E%A8%E5%AF%BC/"/>
    <id>http://noahsnail.com/2019/05/21/2019-05-21-卷积神经网络中的前向传播与反向传播推导/</id>
    <published>2019-05-21T07:22:56.000Z</published>
    <updated>2019-05-21T10:07:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; [简书](<a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">http://www.jianshu.com/users/7731e83f3a4e/latest_articles</a></p>
<h2 id="0-必备基础知识"><a href="#0-必备基础知识" class="headerlink" title="0. 必备基础知识"></a>0. 必备基础知识</h2><ul>
<li><p>卷积以及卷积的运算过程</p>
</li>
<li><p>微分相关知识，包括求偏导及链式法则</p>
</li>
</ul>
<h2 id="1-卷积运算的前向传播"><a href="#1-卷积运算的前向传播" class="headerlink" title="1. 卷积运算的前向传播"></a>1. 卷积运算的前向传播</h2><p>数学符号定义：</p>
<p>输入：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3ac602662d57192.png" height="150" width="300" alt="Input"></p>
<p>卷积核：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3ad4205d3476167.png" alt="Filter"></p>
<p>输出：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3aed9a5c9071482.png" alt="Output"></p>
<p>卷积运算：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3af11b3ece18152.png" alt="Convolution"></p>
<p><img src="https://i.loli.net/2019/05/21/5ce3b144a817112712.png" alt="Convolution"></p>
<p>定义损失函数，将损失函数定义为输出的和，这样方便反向传播计算的演示：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3b372458cb80571.png" alt="Loss Function"></p>
<p>从<code>X -&gt; Y -&gt; L</code>的过程是卷积运算的前向传播过程，为了简化这个过程，这里忽略了偏置项<code>b</code>以及卷积之后的激活函数。</p>
<h2 id="2-卷积运算的反向传播"><a href="#2-卷积运算的反向传播" class="headerlink" title="2. 卷积运算的反向传播"></a>2. 卷积运算的反向传播</h2><ul>
<li>计算损失函数<code>L</code>对输出<code>Y</code>的梯度</li>
</ul>
<p><img src="https://i.loli.net/2019/05/21/5ce3b615700b843254.png" alt="Derivation"></p>
<ul>
<li>计算输入<code>X</code>的梯度</li>
</ul>
<p><img src="https://i.loli.net/2019/05/21/5ce3c06b1ee5f25969.png" height="150" width="400" alt="Derivation"></p>
<p>计算其中每一项的梯度：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3c0b14ad7c70260.png" height="600" width="600" alt="Chain Rule"></p>
<ul>
<li>计算卷积核<code>W</code>的梯度</li>
</ul>
<p><img src="https://i.loli.net/2019/05/21/5ce3ca45f1d0114908.png" alt="Derivation"></p>
<p>计算其中每一项的梯度：</p>
<p><img src="https://i.loli.net/2019/05/21/5ce3cb1d9fee066058.png" alt="Chain Rule"></p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://plantsandbuildings.github.io/machine-learning/misc/math/2018/04/28/a-ground-up-c++-convnet-that-scores-0.973-on-the-kaggle-digit-recognizer-challenge.html" target="_blank" rel="external">https://plantsandbuildings.github.io/machine-learning/misc/math/2018/04/28/a-ground-up-c++-convnet-that-scores-0.973-on-the-kaggle-digit-recognizer-challenge.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      C++源文件到可执行程序
    
    </summary>
    
      <category term="数学之美" scheme="http://noahsnail.com/categories/%E6%95%B0%E5%AD%A6%E4%B9%8B%E7%BE%8E/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>C++源文件到可执行程序</title>
    <link href="http://noahsnail.com/2019/05/14/2019-05-14-C++%E6%BA%90%E6%96%87%E4%BB%B6%E5%88%B0%E5%8F%AF%E6%89%A7%E8%A1%8C%E7%A8%8B%E5%BA%8F/"/>
    <id>http://noahsnail.com/2019/05/14/2019-05-14-C++源文件到可执行程序/</id>
    <published>2019-05-14T08:58:23.000Z</published>
    <updated>2019-05-17T01:33:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>C++程序从源代码到可执行程序是一个复杂的过程，其流程为：<code>源代码 --&gt; 预处理 --&gt; 编译 --&gt; 优化 --&gt; 汇编 --&gt; 链接 --&gt; 可执行文件</code>，本文以一段C++代码为例，按执行顺序来描述这个过程。</p>
<h2 id="2-源代码"><a href="#2-源代码" class="headerlink" title="2. 源代码"></a>2. 源代码</h2><p>源代码文件分为两个，<code>hello.h</code>、<code>hello.cpp</code>和<code>main.cpp</code>，代码如下：</p>
<ul>
<li><p>hello.hpp</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HELLO_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> HELLO_HPP_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>hello.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"Hello, world!"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>main.cpp</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"hello.hpp"</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</div><div class="line">    hello();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="3-预处理"><a href="#3-预处理" class="headerlink" title="3. 预处理"></a>3. 预处理</h2><p>预处理是指C++程序源代码在编译之前，由预处理器（Preprocessor）对C++程序源代码进行的处理。在这个阶段，预处理器会处理以<code>#</code>开头的命令，处理完成之后会生成一个不包含预处理命令的纯C++文件，常见的预处理有：文件包含(#inlcude)、条件编译(<code>#ifndef #ifdef #endif</code>)、提供编译信息(<code>#pragma</code>)、宏替换(<code>#define</code>)等。</p>
<p>使用<code>g++</code>预处理<code>main.cpp</code>的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -E main.cpp -o main.ii</div></pre></td></tr></table></figure>
<p><code>-E</code>参数表示预处理后即停止，不进行编译，预处理后的代码送往标准输出，<code>-o</code>指定输出文件。输出文件<code>main.ii</code>的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 1 &quot;main.cpp&quot;</div><div class="line"># 1 &quot;&lt;built-in&gt;&quot;</div><div class="line"># 1 &quot;&lt;command-line&gt;&quot;</div><div class="line"># 1 &quot;/usr/include/stdc-predef.h&quot; 1 3 4</div><div class="line"># 1 &quot;&lt;command-line&gt;&quot; 2</div><div class="line"># 1 &quot;main.cpp&quot;</div><div class="line"># 1 &quot;hello.hpp&quot; 1</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">void hello();</div><div class="line"># 2 &quot;main.cpp&quot; 2</div><div class="line"></div><div class="line">int main(int argc, char *argv[]) &#123;</div><div class="line">    hello();</div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-编译"><a href="#4-编译" class="headerlink" title="4. 编译"></a>4. 编译</h2><p>在编译过程中，编译器主要作语法检查和词法分析。通过词法分析和语法分析，在确认所有的指令都符合语法规则之后，将其翻译成等价的中间代码表示或汇编代码。</p>
<p>编译<code>main.ii</code>的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -S main.ii</div></pre></td></tr></table></figure>
<p><code>-S</code>参数表示编译后即停止，不进行汇编。对于每个输入的非汇编语言文件，输出文件是汇编语言文件。输出文件<code>main.s</code>的内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">        .file   &quot;main.cpp&quot;</div><div class="line">        .text</div><div class="line">        .globl  main</div><div class="line">        .type   main, @function</div><div class="line">main:</div><div class="line">.LFB0:</div><div class="line">        .cfi_startproc</div><div class="line">        pushq   %rbp</div><div class="line">        .cfi_def_cfa_offset 16</div><div class="line">        .cfi_offset 6, -16</div><div class="line">        movq    %rsp, %rbp</div><div class="line">        .cfi_def_cfa_register 6</div><div class="line">        subq    $16, %rsp</div><div class="line">        movl    %edi, -4(%rbp)</div><div class="line">        movq    %rsi, -16(%rbp)</div><div class="line">        call    _Z5hellov</div><div class="line">        movl    $0, %eax</div><div class="line">        leave</div><div class="line">        .cfi_def_cfa 7, 8</div><div class="line">        ret</div><div class="line">        .cfi_endproc</div><div class="line">.LFE0:</div><div class="line">        .size   main, .-main</div><div class="line">        .ident  &quot;GCC: (GNU) 4.8.5 20150623 (Red Hat 4.8.5-16)&quot;</div><div class="line">        .section        .note.GNU-stack,&quot;&quot;,@progbits</div></pre></td></tr></table></figure>
<h2 id="5-优化"><a href="#5-优化" class="headerlink" title="5. 优化"></a>5. 优化</h2><p>优化是在编译过程中最重要的，也是最难的。它不仅与编译技术本身有关，而且跟机器的硬件环境也有很大的关系。优化可在编译的不同阶段进行，一类优化是对中间代码的优化，这类优化不依赖于具体的计算机，另一类优化是对目标代码的优化，这类优化与机器的硬件环境有关。</p>
<p><code>g++</code>编译器的编译优化参数为<code>-O</code>，分为四级，分别为<code>-O0</code>、<code>-O1</code>、<code>-O2</code>、<code>-O3</code>，默认为<code>-O0</code>。各级优化后的结果如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"># 默认优化，-O0</div><div class="line">[root@localhost:/workspace] $: g++ -c main.cpp hello.cpp</div><div class="line">[root@localhost:/workspace] $: nm -C main.o</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">000000000000007a t _GLOBAL__sub_I__Z5hellov</div><div class="line">0000000000000022 T main</div><div class="line">000000000000003d t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::cout</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</div><div class="line"></div><div class="line"></div><div class="line"># 优化级别-O1</div><div class="line">[root@localhost:/workspace] $: g++ -c -O1 main.cpp hello.cpp</div><div class="line">[root@localhost:/workspace] $: nm -C main.o</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">000000000000007d t _GLOBAL__sub_I__Z5hellov</div><div class="line">000000000000006a T main</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ctype&lt;char&gt;::_M_widen_init() const</div><div class="line">                 U std::ostream::put(char)</div><div class="line">                 U std::ostream::flush()</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*, long)</div><div class="line">                 U std::__throw_bad_cast()</div><div class="line">                 U std::cout</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line"></div><div class="line"># 优化级别-O2</div><div class="line">[root@localhost:/workspace] $: g++ -c -O2 main.cpp hello.cpp</div><div class="line">[root@localhost:/workspace] $: nm -C main.o</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">0000000000000010 t _GLOBAL__sub_I__Z5hellov</div><div class="line">0000000000000000 T main</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ctype&lt;char&gt;::_M_widen_init() const</div><div class="line">                 U std::ostream::put(char)</div><div class="line">                 U std::ostream::flush()</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::__ostream_insert&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*, long)</div><div class="line">                 U std::__throw_bad_cast()</div><div class="line">                 U std::cout</div><div class="line">0000000000000000 b std::__ioinit</div></pre></td></tr></table></figure>
<h2 id="6-汇编"><a href="#6-汇编" class="headerlink" title="6. 汇编"></a>6. 汇编</h2><p>汇编是把汇编语言代码翻译成目标机器指令的过程。</p>
<p>编译<code>main.s</code>的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -c main.s</div></pre></td></tr></table></figure>
<p><code>-c</code>参数表示编译或汇编源文件，但是不作连接，编译器输出对应于源文件的目标文件。输出文件为<code>main.o</code>，使用<code>nm -C main.o</code>命令来查看文件内容，文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">0000000000000000 T main</div><div class="line">                 U hello()</div></pre></td></tr></table></figure>
<h2 id="7-链接"><a href="#7-链接" class="headerlink" title="7. 链接"></a>7. 链接</h2><p>链接是将目标文件、启动代码、库文件链接成可执行文件的过程，得到的文件可以直接执行。经过汇编之后生成的目标文件<code>main.o</code>是不可以直接执行的。链接命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ main.o -o main</div><div class="line">main.o: In function `main&apos;:</div><div class="line">main.cpp:(.text+0x10): undefined reference to `hello()&apos;</div><div class="line">collect2: error: ld returned 1 exit status</div></pre></td></tr></table></figure>
<p>从上面可以看出，只链接<code>main.o</code>文件会报错，这是因为<code>main.cpp</code>引用了<code>hello.cpp</code>中定义的函数<code>hello</code>，因此需要链接文件<code>hello.cpp</code>才能生成可执行程序。重复上述过程，生成<code>hello.o</code>，链接两个文件的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ main.o hello.o -o main</div></pre></td></tr></table></figure>
<p>经过链接，多个文件被链接成了单一的可执行文件<code>main</code>，执行<code>main</code>程序：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: ./main</div><div class="line">Hello, world!</div></pre></td></tr></table></figure>
<h4 id="7-1-静态链接库"><a href="#7-1-静态链接库" class="headerlink" title="7.1 静态链接库"></a>7.1 静态链接库</h4><p>除了直接链接多个目标文件之外，还可以通过链接静态库生成可执行文件。静态链接库是编译器生成的一系列对象文件的集合，库中的成员包括普通函数，类定义，类的对象实例等。静态链接是指把要调用的函数或者过程链接到可执行文件中，成为可执行文件的一部分。可执行文件生成之后，就不再需要静态链接库，即编译后的可执行程序不需要外部函数库的支持。但如果静态链接库发生改变，则可执行程序需要重新编译。静态链接库属于编译时链接。</p>
<p>我们再添加两个<code>static.hpp</code>，<code>static.cpp</code>，并修改<code>main.cpp</code>，内容如下：</p>
<ul>
<li><p><code>static.hpp</code>文件：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> STATIC_HPP_</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> STATIC_HPP_</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
</li>
<li><p><code>static.cpp</code>文件：</p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"static.hpp"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"static lib"</span> &lt;&lt; <span class="built_in">endl</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>main.cpp</code>文件：</p>
</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</div><div class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123; </div><div class="line">    hello();</div><div class="line">    test();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译汇编<code>hello.cpp</code>、<code>static.cpp</code>之后可以得到两个文件<code>hello.o</code>和<code>static.o</code>，linux系统中的命令<code>ar</code>，可以将多个目标文件打包成为一个单独的文件，这个文件被称为静态库。生成静态库的命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: ar -r libstatic.a hello.o static.o</div><div class="line">ar: creating libstatic.a</div></pre></td></tr></table></figure>
<p>查看<code>libstatic.a</code>的内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: nm -C libstatic.a</div><div class="line"></div><div class="line">hello.o:</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">000000000000005f t _GLOBAL__sub_I__Z5hellov</div><div class="line">0000000000000022 t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::cout</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</div><div class="line"></div><div class="line">static.o:</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">000000000000005f t _GLOBAL__sub_I__Z4testv</div><div class="line">0000000000000022 t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000000000 T test()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::cout</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</div></pre></td></tr></table></figure>
<p>通过静态链接库生成可执行程序<code>main</code>并执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ main.o libstatic.a -o main</div><div class="line">[root@localhost:/workspace] $: ./main</div><div class="line">Hello, world!</div><div class="line">static lib</div></pre></td></tr></table></figure>
<p>另一种命令方式：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -L ./ main.cpp -lstatic -o main</div></pre></td></tr></table></figure>
<p>Linux静态库的命名惯例是名字以三个字母<code>lib</code>开头并以後缀<code>.a</code>结束。所有的系统库都采用这种命名惯例，并且它允许通过<code>-l(ell)</code>选项来简写命令行中的库名。<code>-lstatic</code>中的<code>-l</code>是要求编译器在系统库目录下查找<code>static</code>库，<code>static</code>是<code>libstatic.a</code>的简写。<code>-L</code>参数用来指定要具体的查找目录，如果缺少这个参数，则只会在系统库目录下查找<code>static</code>，会报错。错误如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ main.cpp -lstatic -o ltest</div><div class="line">/usr/bin/ld: cannot find -lstatic</div></pre></td></tr></table></figure>
<h4 id="7-2-共享库"><a href="#7-2-共享库" class="headerlink" title="7.2 共享库"></a>7.2 共享库</h4><p>共享库（Windows叫动态链接库）是编译器以一种特殊的方式生成的对象文件的集合。对象文件模块中所有地址（变量引用或函数调用）都是相对而不是绝对的，这使得共享模块可以在程序的运行过程中被动态地调用和执行。共享库属于运行时链接。当使用共享库时，只要共享库的接口不变，共享库修改之后，不需要重新编译可执行程序。</p>
<p>创建<code>dynamic.cpp</code>，内容如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">#include &lt;iostream&gt;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">void test() &#123;</div><div class="line">    cout &lt;&lt; &quot;dynamic lib&quot; &lt;&lt; endl;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编译<code>hello.cpp</code>和<code>dynamic.cpp</code>，<code>-fpic</code>表示生成的对象模块采用浮动（可重定位）地址，<code>pic</code>是位置无关代码（position independent code）的缩写。：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -c -fpic hello.cpp static.cpp</div></pre></td></tr></table></figure>
<p>使用<code>-fpic</code>与不使用<code>-fpic</code>生成的目标文件<code>hello.o</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"># 使用-fpic</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">                 U _GLOBAL_OFFSET_TABLE_</div><div class="line">0000000000000076 t _GLOBAL__sub_I_hello.cpp</div><div class="line">000000000000002e t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::cout</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</div><div class="line"></div><div class="line"># 不使用-fpic</div><div class="line">                 U __cxa_atexit</div><div class="line">                 U __dso_handle</div><div class="line">000000000000005f t _GLOBAL__sub_I__Z5hellov</div><div class="line">0000000000000022 t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000000000 T hello()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))</div><div class="line">                 U std::ios_base::Init::Init()</div><div class="line">                 U std::ios_base::Init::~Init()</div><div class="line">                 U std::cout</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)</div><div class="line">0000000000000000 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)</div></pre></td></tr></table></figure>
<p>创建共享库<code>dynamic.so</code>，<code>-shared</code>表示生成共享目标文件。：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ -shared hello.o dynamic.o -o libdynamic.so</div></pre></td></tr></table></figure>
<p>编译<code>main.cpp</code>并链接共享库：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: g++ main.cpp libdynamic.so -o main</div></pre></td></tr></table></figure>
<p>执行<code>main</code>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: ./main</div><div class="line">./main: error while loading shared libraries: dynamic.so: cannot open shared object file: No such file or directory</div></pre></td></tr></table></figure>
<p>报错是因为当前工作目录可能不在共享库的查找路径中，因此需要将当前目录添加到环境变量<code>LD_LIBRARY_PATH</code>中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[root@localhost:/workspace] $: export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:./</div><div class="line">[root@localhost:/workspace] $: ./main</div><div class="line">Hello, world!</div><div class="line">dynamic lib</div></pre></td></tr></table></figure>
<p>查看链接静态库和共享库生成的两个可执行<code>main</code>文件：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line"># 共享库</div><div class="line">[root@localhost:/workspace] $: nm -C main</div><div class="line">000000000060103c B __bss_start</div><div class="line">000000000060103c b completed.6354</div><div class="line">0000000000601038 D __data_start</div><div class="line">0000000000601038 W data_start</div><div class="line">0000000000400650 t deregister_tm_clones</div><div class="line">00000000004006c0 t __do_global_dtors_aux</div><div class="line">0000000000600dd8 t __do_global_dtors_aux_fini_array_entry</div><div class="line">00000000004007b8 R __dso_handle</div><div class="line">0000000000600de8 d _DYNAMIC</div><div class="line">000000000060103c D _edata</div><div class="line">0000000000601040 B _end</div><div class="line">00000000004007a4 T _fini</div><div class="line">00000000004006e0 t frame_dummy</div><div class="line">0000000000600dd0 t __frame_dummy_init_array_entry</div><div class="line">00000000004008e8 r __FRAME_END__</div><div class="line">0000000000601000 d _GLOBAL_OFFSET_TABLE_</div><div class="line">                 w __gmon_start__</div><div class="line">00000000004005a8 T _init</div><div class="line">0000000000600dd8 t __init_array_end</div><div class="line">0000000000600dd0 t __init_array_start</div><div class="line">00000000004007b0 R _IO_stdin_used</div><div class="line">                 w _ITM_deregisterTMCloneTable</div><div class="line">                 w _ITM_registerTMCloneTable</div><div class="line">0000000000600de0 d __JCR_END__</div><div class="line">0000000000600de0 d __JCR_LIST__</div><div class="line">                 w _Jv_RegisterClasses</div><div class="line">00000000004007a0 T __libc_csu_fini</div><div class="line">0000000000400730 T __libc_csu_init</div><div class="line">                 U __libc_start_main@@GLIBC_2.2.5</div><div class="line">000000000040070d T main</div><div class="line">0000000000400680 t register_tm_clones</div><div class="line">0000000000400620 T _start</div><div class="line">0000000000601040 D __TMC_END__</div><div class="line">                 U test()</div><div class="line">                 U hello()</div><div class="line"></div><div class="line"></div><div class="line"># 静态库</div><div class="line">[root@localhost:/workspace] $: nm -C main</div><div class="line">000000000060105c B __bss_start</div><div class="line">0000000000601170 b completed.6354</div><div class="line">                 U __cxa_atexit@@GLIBC_2.2.5</div><div class="line">0000000000601058 D __data_start</div><div class="line">0000000000601058 W data_start</div><div class="line">00000000004007b0 t deregister_tm_clones</div><div class="line">0000000000400820 t __do_global_dtors_aux</div><div class="line">0000000000600de8 t __do_global_dtors_aux_fini_array_entry</div><div class="line">0000000000400a08 R __dso_handle</div><div class="line">0000000000600df8 d _DYNAMIC</div><div class="line">000000000060105c D _edata</div><div class="line">0000000000601178 B _end</div><div class="line">00000000004009f4 T _fini</div><div class="line">0000000000400840 t frame_dummy</div><div class="line">0000000000600dd0 t __frame_dummy_init_array_entry</div><div class="line">0000000000400c40 r __FRAME_END__</div><div class="line">0000000000601000 d _GLOBAL_OFFSET_TABLE_</div><div class="line">0000000000400960 t _GLOBAL__sub_I__Z4testv</div><div class="line">00000000004008ec t _GLOBAL__sub_I__Z5hellov</div><div class="line">                 w __gmon_start__</div><div class="line">00000000004006d0 T _init</div><div class="line">0000000000600de8 t __init_array_end</div><div class="line">0000000000600dd0 t __init_array_start</div><div class="line">0000000000400a00 R _IO_stdin_used</div><div class="line">                 w _ITM_deregisterTMCloneTable</div><div class="line">                 w _ITM_registerTMCloneTable</div><div class="line">0000000000600df0 d __JCR_END__</div><div class="line">0000000000600df0 d __JCR_LIST__</div><div class="line">                 w _Jv_RegisterClasses</div><div class="line">00000000004009f0 T __libc_csu_fini</div><div class="line">0000000000400980 T __libc_csu_init</div><div class="line">                 U __libc_start_main@@GLIBC_2.2.5</div><div class="line">000000000040086d T main</div><div class="line">00000000004007e0 t register_tm_clones</div><div class="line">0000000000400780 T _start</div><div class="line">0000000000601060 D __TMC_END__</div><div class="line">00000000004008af t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000400923 t __static_initialization_and_destruction_0(int, int)</div><div class="line">0000000000400901 T test()</div><div class="line">000000000040088d T hello()</div><div class="line">                 U std::ostream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))@@GLIBCXX_3.4</div><div class="line">                 U std::ios_base::Init::Init()@@GLIBCXX_3.4</div><div class="line">                 U std::ios_base::Init::~Init()@@GLIBCXX_3.4</div><div class="line">0000000000601060 B std::cout@@GLIBCXX_3.4</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::endl&lt;char, std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;)@@GLIBCXX_3.4</div><div class="line">0000000000601171 b std::__ioinit</div><div class="line">0000000000601172 b std::__ioinit</div><div class="line">                 U std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::operator&lt;&lt; &lt;std::char_traits&lt;char&gt; &gt;(std::basic_ostream&lt;char, std::char_traits&lt;char&gt; &gt;&amp;, char const*)@@GLIBCXX_3.4</div></pre></td></tr></table></figure>
<h2 id="8-可执行文件"><a href="#8-可执行文件" class="headerlink" title="8. 可执行文件"></a>8. 可执行文件</h2><p>可执行文件指的是可以由操作系统进行加载执行的文件。在不同的操作系统环境下，可执行程序的呈现方式不一样。例如上面生成的<code>main</code>就是Linux系统下的可执行文件，windows系统下的可执行文件一般为<code>*.exe</code>。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://wiki.ubuntu.org.cn/Compiling_Cpp" target="_blank" rel="external">https://wiki.ubuntu.org.cn/Compiling_Cpp</a></li>
<li><a href="https://tech.meituan.com/2015/01/22/linker.html" target="_blank" rel="external">https://tech.meituan.com/2015/01/22/linker.html</a></li>
<li><a href="http://notes.maxwi.com/3416/06/05/source-to-program/" target="_blank" rel="external">http://notes.maxwi.com/3416/06/05/source-to-program/</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/11/compiler.html" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/11/compiler.html</a></li>
<li><a href="https://blog.csdn.net/zhengqijun_/article/details/51881149" target="_blank" rel="external">https://blog.csdn.net/zhengqijun_/article/details/51881149</a></li>
<li><a href="https://www.cnblogs.com/Goldworm/archive/2012/05/21/2511910.html" target="_blank" rel="external">https://www.cnblogs.com/Goldworm/archive/2012/05/21/2511910.html</a></li>
<li><a href="https://juejin.im/entry/5c0d23b35188253b7e7480db" target="_blank" rel="external">https://juejin.im/entry/5c0d23b35188253b7e7480db</a></li>
<li><a href="https://www.zhihu.com/question/280665935" target="_blank" rel="external">https://www.zhihu.com/question/280665935</a></li>
<li><a href="http://www.shanghai.ws/gnu/gcc_1.htm" target="_blank" rel="external">http://www.shanghai.ws/gnu/gcc_1.htm</a></li>
<li><a href="https://wiki.ubuntu.org.cn/Compiling_C" target="_blank" rel="external">https://wiki.ubuntu.org.cn/Compiling_C</a></li>
<li><a href="https://www.cnblogs.com/sunsky303/p/7731911.html" target="_blank" rel="external">https://www.cnblogs.com/sunsky303/p/7731911.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      C++源文件到可执行程序
    
    </summary>
    
      <category term="Linux" scheme="http://noahsnail.com/categories/Linux/"/>
    
    
      <category term="C++" scheme="http://noahsnail.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>U-Net - Convolutional Networks for Biomedical Image Segmentation论文翻译——中文版</title>
    <link href="http://noahsnail.com/2019/05/13/2019-05-13-U-Net-Convolutional%20Networks%20for%20Biomedical%20Image%20Segmentation%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E4%B8%AD%E6%96%87%E7%89%88/"/>
    <id>http://noahsnail.com/2019/05/13/2019-05-13-U-Net-Convolutional Networks for Biomedical Image Segmentation论文翻译——中文版/</id>
    <published>2019-05-13T07:57:03.000Z</published>
    <updated>2019-05-23T03:36:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p><strong>声明：作者翻译论文仅为学习，如有侵权请联系作者删除博文，谢谢！</strong></p>
<p>翻译论文汇总：<a href="https://github.com/SnailTyan/deep-learning-papers-translation" target="_blank" rel="external">https://github.com/SnailTyan/deep-learning-papers-translation</a></p>
<h1 id="U-Net-Convolutional-Networks-for-Biomedical-Image-Segmentation"><a href="#U-Net-Convolutional-Networks-for-Biomedical-Image-Segmentation" class="headerlink" title="U-Net: Convolutional Networks for Biomedical Image Segmentation"></a>U-Net: Convolutional Networks for Biomedical Image Segmentation</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>许多人都赞同深度网络的成功训练需要大量标注的训练样本。在本文中，我们提出了一种网络及训练策略，它依赖于大量使用数据增强，以便更有效地使用获得的标注样本。这个架构包括捕获上下文的收缩路径和能够精确定位的对称扩展路径。我们证明了这种网络可以从非常少的图像进行端到端训练，并且优于之前的ISBI赛挑战赛的最好方法（滑动窗口卷积网络），ISBI赛挑战赛主要是在电子显微镜堆叠中进行神经元结构分割。使用在透射光显微镜图像（相位衬度和DIC）上训练的相同网络，我们在这些类别中大幅度地赢得了2015年ISBI细胞追踪挑战赛。而且，网络速度很快。在最新的GPU上，分割一张512x512的图像不到一秒钟。网络的完整实现（基于Caffe）和预训练网络可在<a href="http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net" target="_blank" rel="external">http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net</a>上获得。</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>在过去两年，深度卷积网络在许多视觉识别任务中的表现都优于当前的最新技术，例如[7,3]。虽然卷积网络已经存在了很长时间[8]，但由于可用训练集的大小和所考虑网络的规模，它们的成功受到了限制。Krizhevsky等人[7]的突破是通过大型网络在ImageNet数据集上的监督训练实现的，其中大型网络有8个网络层和数百万参数，ImageNet数据集包含百万张训练图像。从那时起，即使更大更深的网络也已经得到了训练[12]。</p>
<p>卷积网络的典型用途是分类任务，其中图像输出是单个的类别标签。然而，在许多视觉任务中，尤其是在生物医学图像处理中，期望的输出应该包括位置，即类别标签应该分配给每个像素。此外，生物医学任务中通常无法获得数千张训练图像。因此，Ciresan等人[1]在滑动窗口设置中训练网络，通过提供像素周围局部区域（patch）作为输入来预测每个像素的类别标签。首先，这个网络可以定位。其次，局部块方面的训练数据远大于训练图像的数量。由此产生的网络大幅度地赢得了ISBI 2012EM分割挑战赛。</p>
<p>显然，Ciresan等人[1]的策略有两个缺点。首先，它非常慢，因为必须为每个图像块单独运行网络，并且由于图像块重叠而存在大量冗余。其次，定位准确性与上下文的使用之间存在着权衡。较大的图像块需要更多的最大池化层，从而降低了定位精度，而较小的图像块则允许网络只能看到很少的上下文。许多最近的方法[11，4]提出了一种分类器输出，其考虑了来自多个层的特征。同时具有良好的定位和上下文的使用是可能的。</p>
<p>在本文中，我们构建了一个更优雅的架构，即所谓的“全卷积网络”[9]。我们对这种架构进行了修改和扩展，使得它只需很少的训练图像就可以取得更精确的分割; 参见图1。[9]中的主要思想是通过连续层补充通常的收缩网络，其中的池化运算符由上采样运算符替换。因此，这些层增加了输出的分辨率。为了进行定位，来自收缩路径的高分辨率特征与上采样输出相结合。然后，后续卷积层可以基于该信息学习组装更精确的输出。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd198243fa74325.png" alt="Figure 1"></p>
<p>图1. U-net架构（最低分辨率为32x32像素的示例）。每个蓝色框对应于一张多通道特征映射。通道数在框的顶部。<code>x-y</code>尺寸提供在框的左下边。白框表示复制的特征映射。箭头表示不同的操作。</p>
<p>我们架构中的一个重要修改是在上采样部分中我们还有大量的特征通道，这些通道允许网络将上下文信息传播到具有更高分辨率的层。因此，扩展路径或多或少地与收缩路径对称，并产生U形结构。网络没有任何全连接层，并且仅使用每个卷积的有效部分，即分割映射仅包含在输入图像中可获得完整上下文的像素。该策略允许通过重叠图像区策略无缝分割任意大小的图像（参见图2）。为了预测图像边界区域中的像素，通过镜像输入图像来外推缺失的上下文。这种图像块策略对于将网络应用于大的图像非常重要，否则分辨率将受到GPU内存的限制。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd68de246d25163.png" alt="Figure 2"></p>
<p>图2. 重叠图像块策略可以无缝分割任意大小的图像（EM堆叠中的神经元结构分割）。分割的预测在黄色区域，要求蓝色区域的图像数据作为输入。缺失的输入数据通过镜像外推。</p>
<p>对于我们的任务，可用的训练数据非常少，我们通过对可用的训练图像应用弹性变形来使用更多的数据增强。这允许网络学习这种变形的不变性，而不需要在标注图像语料库中看到这些变形。 这在生物医学分割中尤其重要，因为变形曾经是组织中最常见的变化，并且可以有效地模拟真实的变形。Dosovitskiy等人[2]在无监督特征学习的领域内已经证明了数据增强在学习不变性中的价值。</p>
<p>许多细胞分割任务中的另一个挑战是分离同类的接触目标，见图3。为此，我们建议使用加权损失，其中接触单元之间的分离背景标签在损失函数中获得较大的权重。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbdb9fd656556641.png" alt="Figure 3"></p>
<p>图3. 用DIC（差异干涉对比）显微镜记录玻璃上的HeLa细胞。（a）原始图像。（b）覆盖的实际分割。不同的颜色表示不同的HeLa细胞实例。（c）生成分割掩码（白色：前景，黑色：背景）。（d）以像素损失权重的映射来迫使网络学习边界像素。</p>
<p>由此产生的网络适用于各种生物医学分割问题。在本文中，我们展示了EM堆叠中神经元结构的分割结果（从ISBI 2012开始的持续竞赛），其中我们的表现优于Ciresan等人[1]的网络。此外，我们展示了2015 ISBI细胞追踪挑战赛光学显微镜图像中的细胞分割结果。我们在两个最具挑战性的2D透射光数据集上以巨大的优势赢得了比赛。</p>
<h2 id="2-网络架构"><a href="#2-网络架构" class="headerlink" title="2 网络架构"></a>2 网络架构</h2><p>网络架构如图1所示。它由一个收缩路径（左侧）和一个扩展路径（右侧）组成。收缩路径遵循卷积网络的典型架构。它包括重复使用两个3x3卷积（无填充卷积），每个卷积后跟一个线性修正单元（ReLU）和一个2x2最大池化操作，步长为2的下采样。在每个下采样步骤中，我们将特征通道的数量加倍。扩展路径中的每一步都包括特征映射的上采样，然后进行2x2卷积（“向上卷积”），将特征通道数量减半，与来自收缩路径的相应裁剪特征映射串联，然后是两个3x3卷积，每个卷积后面接ReLU。由于每一次卷积都会丢失边界像素，因此裁剪是必要的。在最后一层，使用1x1卷积将每个64分量特征向量映射到所需数量的类别上。网络总共有23个卷积层。</p>
<p>为了允许输出分割映射的无缝平铺（参见图2），选择输入的图像块大小非常重要，这样所有的2x2最大池化操作都可以应用在具有偶数x和偶数y大小的层上。</p>
<h2 id="3-训练"><a href="#3-训练" class="headerlink" title="3 训练"></a>3 训练</h2><p>使用输入图像及其相应的分割映射来训练带有随机梯度下降的网络，网络是采用Caffe[6]实现的。由于无填充卷积，输出图像比输入少恒定的边界宽度。为了最小化开销并最大限度地利用GPU内存，我们倾向于在大批量数据大小的情况下使用大的输入图像块，从而将批量数据大小减少到单张图像。因此，我们使用高动量（0.99），使得大量先前看到的训练样本确定当前优化步骤中的更新。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p>Ciresan, D.C., Gambardella, L.M., Giusti, A., Schmidhuber, J.: Deep neural networks segment neuronal membranes in electron microscopy images. In: NIPS. pp. 2852–2860 (2012)</p>
</li>
<li><p>Dosovitskiy, A., Springenberg, J.T., Riedmiller, M., Brox, T.: Discriminative unsupervised feature learning with convolutional neural networks. In: NIPS (2014)</p>
</li>
<li><p>Girshick, R., Donahue, J., Darrell, T., Malik, J.: Rich feature hierarchies for accurate object detection and semantic segmentation. In: Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR) (2014)</p>
</li>
<li><p>Hariharan, B., Arbelez, P., Girshick, R., Malik, J.: Hypercolumns for object segmentation and fine-grained localization (2014), arXiv:1411.5752 [cs.CV]</p>
</li>
<li><p>He, K., Zhang, X., Ren, S., Sun, J.: Delving deep into rectifiers: Surpassing human-level performance on imagenet classification (2015), arXiv:1502.01852 [cs.CV]</p>
</li>
<li><p>Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R., Guadarrama, S., Darrell, T.: Ca↵e: Convolutional architecture for fast feature embedding (2014), arXiv:1408.5093 [cs.CV]</p>
</li>
<li><p>Krizhevsky, A., Sutskever, I., Hinton, G.E.: Imagenet classification with deep convolutional neural networks. In: NIPS. pp. 1106–1114 (2012)</p>
</li>
<li><p>LeCun, Y., Boser, B., Denker, J.S., Henderson, D., Howard, R.E., Hubbard, W., Jackel, L.D.: Backpropagation applied to handwritten zip code recognition. Neural Computation 1(4), 541–551 (1989)</p>
</li>
<li><p>Long, J., Shelhamer, E., Darrell, T.: Fully convolutional networks for semantic segmentation (2014), arXiv:1411.4038 [cs.CV]</p>
</li>
<li><p>Maska, M., (…), de Solorzano, C.O.: A benchmark for comparison of cell tracking algorithms. Bioinformatics 30, 1609–1617 (2014)</p>
</li>
<li><p>Seyedhosseini, M., Sajjadi, M., Tasdizen, T.: Image segmentation with cascaded hierarchical models and logistic disjunctive normal networks. In: Computer Vision (ICCV), 2013 IEEE International Conference on. pp. 2168–2175 (2013)</p>
</li>
<li><p>Simonyan, K., Zisserman, A.: Very deep convolutional networks for large-scale image recognition (2014), arXiv:1409.1556 [cs.CV]</p>
</li>
<li><p>WWW: Web page of the cell tracking challenge, <a href="http://www.codesolorzano.com/celltrackingchallenge/Cell_Tracking_Challenge/Welcome.html" target="_blank" rel="external">http://www.codesolorzano.com/celltrackingchallenge/Cell_Tracking_Challenge/Welcome.html</a></p>
</li>
<li><p>WWW: Web page of the em segmentation challenge, <a href="http://brainiac2.mit.edu/isbi_challenge/" target="_blank" rel="external">http://brainiac2.mit.edu/isbi_challenge/</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      U-Net - Convolutional Networks for Biomedical Image Segmentation论文翻译——中文版
    
    </summary>
    
      <category term="深度学习" scheme="http://noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>U-Net - Convolutional Networks for Biomedical Image Segmentation论文翻译——中英文对照</title>
    <link href="http://noahsnail.com/2019/05/13/2019-05-13-U-Net-Convolutional%20Networks%20for%20Biomedical%20Image%20Segmentation%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/"/>
    <id>http://noahsnail.com/2019/05/13/2019-05-13-U-Net-Convolutional Networks for Biomedical Image Segmentation论文翻译——中英文对照/</id>
    <published>2019-05-13T07:56:22.000Z</published>
    <updated>2019-05-31T02:53:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p><strong>声明：作者翻译论文仅为学习，如有侵权请联系作者删除博文，谢谢！</strong></p>
<p>翻译论文汇总：<a href="https://github.com/SnailTyan/deep-learning-papers-translation" target="_blank" rel="external">https://github.com/SnailTyan/deep-learning-papers-translation</a></p>
<h1 id="U-Net-Convolutional-Networks-for-Biomedical-Image-Segmentation"><a href="#U-Net-Convolutional-Networks-for-Biomedical-Image-Segmentation" class="headerlink" title="U-Net: Convolutional Networks for Biomedical Image Segmentation"></a>U-Net: Convolutional Networks for Biomedical Image Segmentation</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>There is large consent that successful training of deep networks requires many thousand annotated training samples. In this paper, we present a network and training strategy that relies on the strong use of data augmentation to use the available annotated samples more efficiently. The architecture consists of a contracting path to capture context and a symmetric expanding path that enables precise localization. We show that such a network can be trained end-to-end from very few images and outperforms the prior best method (a sliding-window convolutional network) on the ISBI challenge for segmentation of neuronal structures in electron microscopic stacks. Using the same network trained on transmitted light microscopy images (phase contrast and DIC) we won the ISBI cell tracking challenge 2015 in these categories by a large margin. Moreover, the network is fast. Segmentation of a 512x512 image takes less than a second on a recent GPU. The full implementation (based on Caffe) and the trained networks are available at <a href="http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net" target="_blank" rel="external">http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net</a>.</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>许多人都赞同深度网络的成功训练需要大量标注的训练样本。在本文中，我们提出了一种网络及训练策略，它依赖于大量使用数据增强，以便更有效地使用获得的标注样本。这个架构包括捕获上下文的收缩路径和能够精确定位的对称扩展路径。我们证明了这种网络可以从非常少的图像进行端到端训练，并且优于之前的ISBI赛挑战赛的最好方法（滑动窗口卷积网络），ISBI赛挑战赛主要是在电子显微镜堆叠中进行神经元结构分割。使用在透射光显微镜图像（相位衬度和DIC）上训练的相同网络，我们在这些类别中大幅度地赢得了2015年ISBI细胞追踪挑战赛。而且，网络速度很快。在最新的GPU上，分割一张512x512的图像不到一秒钟。网络的完整实现（基于Caffe）和预训练网络可在<a href="http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net" target="_blank" rel="external">http://lmb.informatik.uni-freiburg.de/people/ronneber/u-net</a>上获得。</p>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><p>In the last two years, deep convolutional networks have outperformed the state of the art in many visual recognition tasks, e.g. [7,3]. While convolutional networks have already existed for a long time [8], their success was limited due to the size of the available training sets and the size of the considered networks. The breakthrough by Krizhevsky et al. [7] was due to supervised training of a large network with 8 layers and millions of parameters on the ImageNet dataset with 1 million training images. Since then, even larger and deeper networks have been trained [12].</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>在过去两年，深度卷积网络在许多视觉识别任务中的表现都优于当前的最新技术，例如[7,3]。虽然卷积网络已经存在了很长时间[8]，但由于可用训练集的大小和所考虑网络的规模，它们的成功受到了限制。Krizhevsky等人[7]的突破是通过大型网络在ImageNet数据集上的监督训练实现的，其中大型网络有8个网络层和数百万参数，ImageNet数据集包含百万张训练图像。从那时起，即使更大更深的网络也已经得到了训练[12]。</p>
<p>The typical use of convolutional networks is on classification tasks, where the output to an image is a single class label. However, in many visual tasks, especially in biomedical image processing, the desired output should include localization, i.e., a class label is supposed to be assigned to each pixel. Moreover, thousands of training images are usually beyond reach in biomedical tasks. Hence, Ciresan et al. [1] trained a network in a sliding-window setup to predict the class label of each pixel by providing a local region (patch) around that pixel as input. First, this network can localize. Secondly, the training data in terms of patches is much larger than the number of training images. The resulting network won the EM segmentation challenge at ISBI 2012 by a large margin.</p>
<p>卷积网络的典型用途是分类任务，其中图像输出是单个的类别标签。然而，在许多视觉任务中，尤其是在生物医学图像处理中，期望的输出应该包括位置，即类别标签应该分配给每个像素。此外，生物医学任务中通常无法获得数千张训练图像。因此，Ciresan等人[1]在滑动窗口设置中训练网络，通过提供像素周围局部区域（patch）作为输入来预测每个像素的类别标签。首先，这个网络可以定位。其次，局部块方面的训练数据远大于训练图像的数量。由此产生的网络大幅度地赢得了ISBI 2012EM分割挑战赛。</p>
<p>Obviously, the strategy in Ciresan et al. [1] has two drawbacks. First, it is quite slow because the network must be run separately for each patch, and there is a lot of redundancy due to overlapping patches. Secondly, there is a trade-off between localization accuracy and the use of context. Larger patches require more max-pooling layers that reduce the localization accuracy, while small patches allow the network to see only little context. More recent approaches [11,4] proposed a classifier output that takes into account the features from multiple layers. Good localization and the use of context are possible at the same time.</p>
<p>显然，Ciresan等人[1]的策略有两个缺点。首先，它非常慢，因为必须为每个图像块单独运行网络，并且由于图像块重叠而存在大量冗余。其次，定位准确性与上下文的使用之间存在着权衡。较大的图像块需要更多的最大池化层，从而降低了定位精度，而较小的图像块则允许网络只能看到很少的上下文。许多最近的方法[11，4]提出了一种分类器输出，其考虑了来自多个层的特征。同时具有良好的定位和上下文的使用是可能的。</p>
<p>In this paper, we build upon a more elegant architecture, the so-called “fully convolutional network” [9]. We modify and extend this architecture such that it works with very few training images and yields more precise segmentations; see Figure 1. The main idea in [9] is to supplement a usual contracting network by successive layers, where pooling operators are replaced by upsampling operators. Hence, these layers increase the resolution of the output. In order to localize, high resolution features from the contracting path are combined with the upsampled output. A successive convolution layer can then learn to assemble a more precise output based on this information.</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd198243fa74325.png" alt="Figure 1"></p>
<p>Fig. 1. U-net architecture (example for 32x32 pixels in the lowest resolution). Each blue box corresponds to a multi-channel feature map. The number of channels is denoted on top of the box. The x-y-size is provided at the lower left edge of the box. White boxes represent copied feature maps. The arrows denote the different operations.</p>
<p>在本文中，我们构建了一个更优雅的架构，即所谓的“全卷积网络”[9]。我们对这种架构进行了修改和扩展，使得它只需很少的训练图像就可以取得更精确的分割; 参见图1。[9]中的主要思想是通过连续层补充通常的收缩网络，其中的池化运算符由上采样运算符替换。因此，这些层增加了输出的分辨率。为了进行定位，来自收缩路径的高分辨率特征与上采样输出相结合。然后，后续卷积层可以基于该信息学习组装更精确的输出。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd198243fa74325.png" alt="Figure 1"></p>
<p>图1. U-net架构（最低分辨率为32x32像素的示例）。每个蓝色框对应于一张多通道特征映射。通道数在框的顶部。<code>x-y</code>尺寸提供在框的左下边。白框表示复制的特征映射。箭头表示不同的操作。</p>
<p>One important modification in our architecture is that in the upsampling part we have also a large number of feature channels, which allow the network to propagate context information to higher resolution layers. As a consequence, the expansive path is more or less symmetric to the contracting path, and yields a u-shaped architecture. The network does not have any fully connected layers and only uses the valid part of each convolution, i.e., the segmentation map only contains the pixels, for which the full context is available in the input image. This strategy allows the seamless segmentation of arbitrarily large images by an overlap-tile strategy (see Figure 2). To predict the pixels in the border region of the image, the missing context is extrapolated by mirroring the input image. This tiling strategy is important to apply the network to large images, since otherwise the resolution would be limited by the GPU memory.</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd68de246d25163.png" alt="Figure 2"></p>
<p>Fig. 2. Overlap-tile strategy for seamless segmentation of arbitrary large images (here segmentation of neuronal structures in EM stacks). Prediction of the segmentation in the yellow area, requires image data within the blue area as input. Missing input data is extrapolated by mirroring</p>
<p>我们架构中的一个重要修改是在上采样部分中我们还有大量的特征通道，这些通道允许网络将上下文信息传播到具有更高分辨率的层。因此，扩展路径或多或少地与收缩路径对称，并产生U形结构。网络没有任何全连接层，并且仅使用每个卷积的有效部分，即分割映射仅包含在输入图像中可获得完整上下文的像素。该策略允许通过重叠图像区策略无缝分割任意大小的图像（参见图2）。为了预测图像边界区域中的像素，通过镜像输入图像来外推缺失的上下文。这种图像块策略对于将网络应用于大的图像非常重要，否则分辨率将受到GPU内存的限制。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbd68de246d25163.png" alt="Figure 2"></p>
<p>图2. 重叠图像块策略可以无缝分割任意大小的图像（EM堆叠中的神经元结构分割）。分割的预测在黄色区域，要求蓝色区域的图像数据作为输入。缺失的输入数据通过镜像外推。</p>
<p>As for our tasks there is very little training data available, we use excessive data augmentation by applying elastic deformations to the available training images. This allows the network to learn invariance to such deformations, without the need to see these transformations in the annotated image corpus. This is particularly important in biomedical segmentation, since deformation used to be the most common variation in tissue and realistic deformations can be simulated e ciently. The value of data augmentation for learning invariance has been shown in Dosovitskiy et al. [2] in the scope of unsupervised feature learning.</p>
<p>对于我们的任务，可用的训练数据非常少，我们通过对可用的训练图像应用弹性变形来使用更多的数据增强。这允许网络学习这种变形的不变性，而不需要在标注图像语料库中看到这些变形。 这在生物医学分割中尤其重要，因为变形曾经是组织中最常见的变化，并且可以有效地模拟真实的变形。Dosovitskiy等人[2]在无监督特征学习的领域内已经证明了数据增强在学习不变性中的价值。</p>
<p>Another challenge in many cell segmentation tasks is the separation of touching objects of the same class; see Figure 3. To this end, we propose the use of a weighted loss, where the separating background labels between touching cells obtain a large weight in the loss function.</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbdb9fd656556641.png" alt="Figure 3"></p>
<p>Fig. 3. HeLa cells on glass recorded with DIC (differential interference contrast) microscopy. (a) raw image. (b) overlay with ground truth segmentation. Different colors indicate di↵erent instances of the HeLa cells. (c) generated segmentation mask (white: foreground, black: background). (d) map with a pixel-wise loss weight to force the network to learn the border pixels.</p>
<p>许多细胞分割任务中的另一个挑战是分离同类的接触目标，见图3。为此，我们建议使用加权损失，其中接触单元之间的分离背景标签在损失函数中获得较大的权重。</p>
<p><img src="https://i.loli.net/2019/05/15/5cdbdb9fd656556641.png" alt="Figure 3"></p>
<p>图3. 用DIC（差异干涉对比）显微镜记录玻璃上的HeLa细胞。（a）原始图像。（b）覆盖的实际分割。不同的颜色表示不同的HeLa细胞实例。（c）生成分割掩码（白色：前景，黑色：背景）。（d）以像素损失权重的映射来迫使网络学习边界像素。</p>
<p>The resulting network is applicable to various biomedical segmentation problems. In this paper, we show results on the segmentation of neuronal structures in EM stacks (an ongoing competition started at ISBI 2012), where we outperformed the network of Ciresan et al. [1]. Furthermore, we show results for cell segmentation in light microscopy images from the ISBI cell tracking challenge 2015. Here we won with a large margin on the two most challenging 2D transmitted light datasets.</p>
<p>由此产生的网络适用于各种生物医学分割问题。在本文中，我们展示了EM堆叠中神经元结构的分割结果（从ISBI 2012开始的持续竞赛），其中我们的表现优于Ciresan等人[1]的网络。此外，我们展示了2015 ISBI细胞追踪挑战赛光学显微镜图像中的细胞分割结果。我们在两个最具挑战性的2D透射光数据集上以巨大的优势赢得了比赛。</p>
<h2 id="2-Network-Architecture"><a href="#2-Network-Architecture" class="headerlink" title="2 Network Architecture"></a>2 Network Architecture</h2><p>The network architecture is illustrated in Figure 1. It consists of a contracting path (left side) and an expansive path (right side). The contracting path follows the typical architecture of a convolutional network. It consists of the repeated application of two 3x3 convolutions (unpadded convolutions), each followed by a rectified linear unit (ReLU) and a 2x2 max pooling operation with stride 2 for downsampling. At each downsampling step we double the number of feature channels. Every step in the expansive path consists of an upsampling of the feature map followed by a 2x2 convolution (“up-convolution”) that halves the number of feature channels, a concatenation with the correspondingly cropped feature map from the contracting path, and two 3x3 convolutions, each followed by a ReLU. The cropping is necessary due to the loss of border pixels in every convolution. At the final layer a 1x1 convolution is used to map each 64-component feature vector to the desired number of classes. In total the network has 23 convolutional layers.</p>
<h2 id="2-网络架构"><a href="#2-网络架构" class="headerlink" title="2 网络架构"></a>2 网络架构</h2><p>网络架构如图1所示。它由一个收缩路径（左侧）和一个扩展路径（右侧）组成。收缩路径遵循卷积网络的典型架构。它包括重复使用两个3x3卷积（无填充卷积），每个卷积后跟一个线性修正单元（ReLU）和一个2x2最大池化操作，步长为2的下采样。在每个下采样步骤中，我们将特征通道的数量加倍。扩展路径中的每一步都包括特征映射的上采样，然后进行2x2卷积（“向上卷积”），将特征通道数量减半，与来自收缩路径的相应裁剪特征映射串联，然后是两个3x3卷积，每个卷积后面接ReLU。由于每一次卷积都会丢失边界像素，因此裁剪是必要的。在最后一层，使用1x1卷积将每个64分量特征向量映射到所需数量的类别上。网络总共有23个卷积层。</p>
<p>To allow a seamless tiling of the output segmentation map (see Figure 2), it is important to select the input tile size such that all 2x2 max-pooling operations are applied to a layer with an even x- and y-size.</p>
<p>为了允许输出分割映射的无缝平铺（参见图2），选择输入的图像块大小非常重要，这样所有的2x2最大池化操作都可以应用在具有偶数x和偶数y大小的层上。</p>
<h2 id="3-Training"><a href="#3-Training" class="headerlink" title="3 Training"></a>3 Training</h2><p>The input images and their corresponding segmentation maps are used to train the network with the stochastic gradient descent implementation of Caffe [6]. Due to the unpadded convolutions, the output image is smaller than the input by a constant border width. To minimize the overhead and make maximum use of the GPU memory, we favor large input tiles over a large batch size and hence reduce the batch to a single image. Accordingly we use a high momentum (0.99) such that a large number of the previously seen training samples determine the update in the current optimization step.</p>
<h2 id="3-训练"><a href="#3-训练" class="headerlink" title="3 训练"></a>3 训练</h2><p>使用输入图像及其相应的分割映射来训练带有随机梯度下降的网络，网络是采用Caffe[6]实现的。由于无填充卷积，输出图像比输入少恒定的边界宽度。为了最小化开销并最大限度地利用GPU内存，我们倾向于在大批量数据大小的情况下使用大的输入图像块，从而将批量数据大小减少到单张图像。因此，我们使用高动量值（0.99），使得大量先前看到的训练样本确定当前优化步骤中的更新。</p>
<p>The energy function is computed by a pixel-wise soft-max over the final feature map combined with the cPross entropy loss function. The soft-max is defined as $$ where $$ denotes the activation in feature channel $k$ at the pixel position $$ with $$. $K$ is the number of classes and $pk(x)$ is the approximated maximum-function. I.e. $pk(x)$ 1 for the $k$ that has the maximum activation $ak(x)$ and $pk(x)0$ for all other $k$. The cross entropy then penalizes at each position the deviation of $$ from $1$ using $$ $$ where $ {1,…,K}$ is the true label of each pixel and $wR$ is a weight map that we introduced to give some pixels more importance in the training.</p>
<p>We pre-compute the weight map for each ground truth segmentation to com- pensate the di↵erent frequency of pixels from a certain class in the training data set, and to force the network to learn the small separation borders that we introduce between touching cells (See Figure 3c and d).</p>
<p>The separation border is computed using morphological operations. The weight map is then computed as $$$$ where $wc : ⌦ ! R $ is the weight map to balance the class frequencies, $d1 : ⌦ ! R $ denotes the distance to the border of the nearest cell and $d2 : ⌦ ! R$ the distance to the border of the second nearest cell. In our experiments we set $w0 = 10$ and  $ ⇡ 5 $ pixels.</p>
<p>In deep networks with many convolutional layers and di↵erent paths through the network, a good initialization of the weights is extremely important. Otherwise, parts of the network might give excessive activations, while other parts never contribute. Ideally the initial weights should be adapted such that each feature map in the network has approximately unit variance. For a network with our architecture (alternating convolution and ReLU layers) this can be achieved by drawing pthe initial weights from a Gaussian distribution with a standard deviation of 2/N, where N denotes the number of incoming nodes of one neu- ron [5]. E.g. for a 3x3 convolution and 64 feature channels in the previous layer N =9·64=576.</p>
<h3 id="3-1-Data-Augmentation"><a href="#3-1-Data-Augmentation" class="headerlink" title="3.1 Data Augmentation"></a>3.1 Data Augmentation</h3><p>Data augmentation is essential to teach the network the desired invariance and robustness properties, when only few training samples are available. In case of microscopical images we primarily need shift and rotation invariance as well as robustness to deformations and gray value variations. Especially random elastic deformations of the training samples seem to be the key concept to train a segmentation network with very few annotated images. We generate smooth deformations using random displacement vectors on a coarse 3 by 3 grid. The displacements are sampled from a Gaussian distribution with 10 pixels standard deviation. Per-pixel displacements are then computed using bicubic interpolation. Drop-out layers at the end of the contracting path perform further implicit data augmentation.</p>
<h2 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4 Experiments"></a>4 Experiments</h2><p>We demonstrate the application of the u-net to three different segmentation tasks. The first task is the segmentation of neuronal structures in electron mi- croscopic recordings. An example of the data set and our obtained segmentation is displayed in Figure 2. We provide the full result as Supplementary Material. The data set is provided by the EM segmentation challenge [14] that was started at ISBI 2012 and is still open for new contributions. The training data is a set of 30 images (512x512 pixels) from serial section transmission electron microscopy of the Drosophila first instar larva ventral nerve cord (VNC). Each image comes with a corresponding fully annotated ground truth segmentation map for cells (white) and membranes (black). The test set is publicly available, but its segmentation maps are kept secret. An evaluation can be obtained by sending the predicted membrane probability map to the organizers. The evaluation is done by thresholding the map at 10 different levels and computation of the “warping error”, the “Rand error” and the “pixel error” [14].</p>
<p>The u-net (averaged over 7 rotated versions of the input data) achieves without any further <code>pre-</code> or postprocessing a warping error of 0.0003529 (the new best score, see Table 1) and a rand-error of 0.0382.</p>
<p>This is significantly better than the sliding-window convolutional network result by Ciresan et al. [1], whose best submission had a warping error of 0.000420 and a rand error of 0.0504. In terms of rand error the only better performing algorithms on this data set use highly data set specific post-processing methods1 applied to the probability map of Ciresan et al. [1].</p>
<p>We also applied the u-net to a cell segmentation task in light microscopic images. This segmenation task is part of the ISBI cell tracking challenge 2014 and 2015 [10,13]. The first data set “PhC-U373”2 contains Glioblastoma-astrocytoma U373 cells on a polyacrylimide substrate recorded by phase contrast microscopy (see Figure 4a,b and Supp. Material). It contains 35 partially annotated training images. Here we achieve an average IOU (“intersection over union”) of $92\%$, which is significantly better than the second best algorithm with $83\%$ (see Table 2). The second data set “DIC-HeLa”3 are HeLa cells on a flat glass recorded by differential interference contrast (DIC) microscopy (see Figure 3, Figure 4c,d and Supp. Material). It contains 20 partially annotated training images. Here we achieve an average IOU of 77.5% which is significantly better than the second best algorithm with $46\%$.</p>
<h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5 Conclusion"></a>5 Conclusion</h2><p>The u-net architecture achieves very good performance on very different biomedical segmentation applications. Thanks to data augmentation with elastic deformations, it only needs very few annotated images and has a very reasonable training time of only 10 hours on a NVidia Titan GPU (6 GB). We provide the full Caffe[6]-based implementation and the trained networks4. We are sure that the u-net architecture can be applied easily to many more tasks.</p>
<h2 id="Acknowlegements"><a href="#Acknowlegements" class="headerlink" title="Acknowlegements"></a>Acknowlegements</h2><p>This study was supported by the Excellence Initiative of the German Federal and State governments (EXC 294) and by the BMBF (Fkz 0316185B).</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p>Ciresan, D.C., Gambardella, L.M., Giusti, A., Schmidhuber, J.: Deep neural networks segment neuronal membranes in electron microscopy images. In: NIPS. pp. 2852–2860 (2012)</p>
</li>
<li><p>Dosovitskiy, A., Springenberg, J.T., Riedmiller, M., Brox, T.: Discriminative unsupervised feature learning with convolutional neural networks. In: NIPS (2014)</p>
</li>
<li><p>Girshick, R., Donahue, J., Darrell, T., Malik, J.: Rich feature hierarchies for accurate object detection and semantic segmentation. In: Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition (CVPR) (2014)</p>
</li>
<li><p>Hariharan, B., Arbelez, P., Girshick, R., Malik, J.: Hypercolumns for object segmentation and fine-grained localization (2014), arXiv:1411.5752 [cs.CV]</p>
</li>
<li><p>He, K., Zhang, X., Ren, S., Sun, J.: Delving deep into rectifiers: Surpassing human-level performance on imagenet classification (2015), arXiv:1502.01852 [cs.CV]</p>
</li>
<li><p>Jia, Y., Shelhamer, E., Donahue, J., Karayev, S., Long, J., Girshick, R., Guadarrama, S., Darrell, T.: Ca↵e: Convolutional architecture for fast feature embedding (2014), arXiv:1408.5093 [cs.CV]</p>
</li>
<li><p>Krizhevsky, A., Sutskever, I., Hinton, G.E.: Imagenet classification with deep convolutional neural networks. In: NIPS. pp. 1106–1114 (2012)</p>
</li>
<li><p>LeCun, Y., Boser, B., Denker, J.S., Henderson, D., Howard, R.E., Hubbard, W., Jackel, L.D.: Backpropagation applied to handwritten zip code recognition. Neural Computation 1(4), 541–551 (1989)</p>
</li>
<li><p>Long, J., Shelhamer, E., Darrell, T.: Fully convolutional networks for semantic segmentation (2014), arXiv:1411.4038 [cs.CV]</p>
</li>
<li><p>Maska, M., (…), de Solorzano, C.O.: A benchmark for comparison of cell tracking algorithms. Bioinformatics 30, 1609–1617 (2014)</p>
</li>
<li><p>Seyedhosseini, M., Sajjadi, M., Tasdizen, T.: Image segmentation with cascaded hierarchical models and logistic disjunctive normal networks. In: Computer Vision (ICCV), 2013 IEEE International Conference on. pp. 2168–2175 (2013)</p>
</li>
<li><p>Simonyan, K., Zisserman, A.: Very deep convolutional networks for large-scale image recognition (2014), arXiv:1409.1556 [cs.CV]</p>
</li>
<li><p>WWW: Web page of the cell tracking challenge, <a href="http://www.codesolorzano.com/celltrackingchallenge/Cell_Tracking_Challenge/Welcome.html" target="_blank" rel="external">http://www.codesolorzano.com/celltrackingchallenge/Cell_Tracking_Challenge/Welcome.html</a></p>
</li>
<li><p>WWW: Web page of the em segmentation challenge, <a href="http://brainiac2.mit.edu/isbi_challenge/" target="_blank" rel="external">http://brainiac2.mit.edu/isbi_challenge/</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      U-Net - Convolutional Networks for Biomedical Image Segmentation论文翻译——中英文对照
    
    </summary>
    
      <category term="深度学习" scheme="http://noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Linux登录信息查询</title>
    <link href="http://noahsnail.com/2019/05/09/2019-05-09-Linux%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/"/>
    <id>http://noahsnail.com/2019/05/09/2019-05-09-Linux登录信息查询/</id>
    <published>2019-05-09T03:34:26.000Z</published>
    <updated>2019-05-09T07:18:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Linux登录日志的存储"><a href="#1-Linux登录日志的存储" class="headerlink" title="1. Linux登录日志的存储"></a>1. Linux登录日志的存储</h2><p>在Linux系统中，登录日志主要存储在三个文件中，<code>/var/log/wtmp</code>，<code>/var/run/utmp</code>，<code>/var/log/lastlog</code>。常用的查询命令有<code>w</code>，<code>who</code>，<code>last</code>，<code>users</code>，<code>lastlog</code>等。</p>
<h2 id="2-w命令"><a href="#2-w命令" class="headerlink" title="2. w命令"></a>2. w命令</h2><ul>
<li><code>w</code>命令可用于显示当前登录系统的用户信息。</li>
<li>执行这项指令可查询目前登录系统的用户有哪些人，以及正在执行的程序。</li>
<li>单独执行<code>w</code>指令会显示所有的用户，也可以指定用户名称，仅显示某位用户的相关信息。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ w</div><div class="line">19:30  up 48 days,  3:05, 2 users, load averages: 2.11 2.11 2.14</div><div class="line">USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT</div><div class="line">root     pts/2    192.168.0.1      Wed14    0.00s  0.08s  0.00s w</div><div class="line">root     pts/16   192.168.0.1      Wed11    5:20   0.08s  0.08s -bash</div></pre></td></tr></table></figure>
<p><code>w</code>命令显示的对应信息如下：</p>
<p>当前时间，系统启动到现在的时间，登录用户的数目，系统在最近1秒、5秒和15秒的平均负载。</p>
<p>USER: 登录帐号<br>TTY : 终端名称<br>FROM: 远程主机名<br>LOGIN@: 登录时间<br>IDLE: 空闲时间<br>JCPU: 该TTY终端连接的所有进程的占用时间<br>PCPU: 当前进程(即w项中显示的)的占用时间<br>WHAT: 当前正在运行进程的命令行</p>
<h2 id="3-who命令"><a href="#3-who命令" class="headerlink" title="3. who命令"></a>3. who命令</h2><p><code>who</code>命令用于显示系统中有哪些登录用户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ who</div><div class="line">root   pts/2        2019-05-08 19:14 (192.168.0.1)</div><div class="line">root   pts/16       2019-05-08 18:39 (192.168.0.1)</div></pre></td></tr></table></figure>
<p><code>who</code>命令显示的对应信息如下：</p>
<p>登录帐号，终端名称，日期和时间，用户登录IP地址。</p>
<p><code>who am i</code>用来查看当前登陆者的信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ who am i</div><div class="line">root   pts/2        2019-05-08 19:14 (192.168.0.1)</div></pre></td></tr></table></figure>
<h2 id="4-last命令"><a href="#4-last命令" class="headerlink" title="4. last命令"></a>4. last命令</h2><p><code>last</code>命令用于显示用户最近登录信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ last -n 3</div><div class="line">root   pts/21       192.168.0.1    Thu May  9 12:01 - 19:00  (00:00)</div><div class="line">root   pts/6        192.168.0.1    Wed May  8 18:30   still logged in</div><div class="line">root   pts/2        192.168.0.1    Wed May  8 18:14   still logged in</div><div class="line"></div><div class="line">wtmp begins Sun Dec 30 19:10:00 2018</div></pre></td></tr></table></figure>
<p><code>last</code>命令显示的对应信息如下：</p>
<p>用户名称，终端名称，远程主机名，日志活动发生时间，括号中的数字表示连接持续了多少小时和分钟。</p>
<h2 id="5-users命令"><a href="#5-users命令" class="headerlink" title="5. users命令"></a>5. users命令</h2><p><code>users</code>命令用于显示当前登录系统的所有用户列表。每个用户名对应一个登录会话。如果一个用户有不止一个登录会话，则用户名将显示相同的次数。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ users</div><div class="line">root root</div></pre></td></tr></table></figure>
<h2 id="6-lastlog命令"><a href="#6-lastlog命令" class="headerlink" title="6. lastlog命令"></a>6. lastlog命令</h2><p><code>lastlog</code>命令用于显示系统中所有用户最近一次的登录信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ lastlog</div><div class="line">Username         Port     From             Latest</div><div class="line">root             pts/6    192.168.0.1      Sun Apr 28 18:38:20 +0800 2019</div><div class="line">daemon                                     **Never logged in**</div><div class="line">bin                                        **Never logged in**</div><div class="line">sys                                        **Never logged in**</div><div class="line">sync                                       **Never logged in**</div><div class="line">games                                      **Never logged in**</div><div class="line">man                                        **Never logged in**</div><div class="line">lp                                         **Never logged in**</div><div class="line">mail                                       **Never logged in**</div><div class="line">news                                       **Never logged in**</div><div class="line">uucp                                       **Never logged in**</div><div class="line">proxy                                      **Never logged in**</div><div class="line">www-data                                   **Never logged in**</div><div class="line">backup                                     **Never logged in**</div><div class="line">list                                       **Never logged in**</div><div class="line">irc                                        **Never logged in**</div><div class="line">gnats                                      **Never logged in**</div><div class="line">nobody                                     **Never logged in**</div><div class="line">systemd-timesync                           **Never logged in**</div><div class="line">systemd-network                            **Never logged in**</div><div class="line">systemd-resolve                            **Never logged in**</div><div class="line">systemd-bus-proxy                           **Never logged in**</div><div class="line">_apt                                       **Never logged in**</div><div class="line">sshd                                       **Never logged in**</div></pre></td></tr></table></figure>
<h2 id="7-ac命令"><a href="#7-ac命令" class="headerlink" title="7. ac命令"></a>7. ac命令</h2><p><code>ac</code>命令计算所有用户总的连接时间，默认单位是小时，基于<code>/var/log/wtmp</code>文件统计。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">root@0b6987cc587f /workspace $ ac</div><div class="line">total     4595.16</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="http://www.runoob.com/linux/linux-comm-w.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-comm-w.html</a></li>
<li><a href="http://www.runoob.com/linux/linux-comm-who.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-comm-who.html</a></li>
<li><a href="https://linux.cn/article-2437-1.html" target="_blank" rel="external">https://linux.cn/article-2437-1.html</a></li>
<li><a href="http://www.runoob.com/linux/linux-comm-last.html" target="_blank" rel="external">http://www.runoob.com/linux/linux-comm-last.html</a></li>
<li><a href="http://man.linuxde.net/users" target="_blank" rel="external">http://man.linuxde.net/users</a></li>
<li><a href="http://man.linuxde.net/lastlog" target="_blank" rel="external">http://man.linuxde.net/lastlog</a></li>
<li><a href="https://cnbin.github.io/blog/2015/06/26/linux-ac-ming-ling/" target="_blank" rel="external">https://cnbin.github.io/blog/2015/06/26/linux-ac-ming-ling/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Linux登录信息查询
    
    </summary>
    
      <category term="Linux" scheme="http://noahsnail.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 139. Word Break</title>
    <link href="http://noahsnail.com/2019/05/06/2019-05-06-Leetcode-139--Word-Break/"/>
    <id>http://noahsnail.com/2019/05/06/2019-05-06-Leetcode-139--Word-Break/</id>
    <published>2019-05-06T03:15:37.000Z</published>
    <updated>2019-05-13T07:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://i.loli.net/2019/05/06/5ccfa5fc5a3e8.png" alt="Word Break"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; flags(s.size(), <span class="number">-1</span>);</div><div class="line">        <span class="built_in">unordered_set</span>&lt;<span class="built_in">string</span>&gt; dict(wordDict.begin(), wordDict.end());</div><div class="line">        <span class="keyword">return</span> split(s, dict, flags, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">split</span><span class="params">(<span class="built_in">string</span>&amp; s, <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;&amp; dict, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; flags, <span class="keyword">int</span> start)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(start == s.size()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(flags[start] != <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> flags[start];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start + <span class="number">1</span>; i &lt;= s.size(); i++) &#123;</div><div class="line">            <span class="built_in">string</span> temp = s.substr(start, i - start);</div><div class="line">            <span class="keyword">if</span>(dict.find(temp) != dict.end() &amp;&amp; split(s, dict, flags, i)) &#123;</div><div class="line">                flags[start] = <span class="number">1</span>;</div><div class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        flags[start] = <span class="number">0</span>;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict(wordDict.begin(), wordDict.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(s.size() + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        flag[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.size(); i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</div><div class="line">                <span class="keyword">if</span>(flag[j] &amp;&amp; dict.find(s.substr(j, i - j)) != dict.end()) &#123;</div><div class="line">                    flag[i] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag[s.size()];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">wordBreak</span><span class="params">(<span class="built_in">string</span> s, <span class="built_in">vector</span>&lt;<span class="built_in">string</span>&gt;&amp; wordDict)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(s.size() == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; dict(wordDict.begin(), wordDict.end());</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">bool</span>&gt; flag(s.size() + <span class="number">1</span>, <span class="literal">false</span>);</div><div class="line">        flag[<span class="number">0</span>] = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s.size(); i++) &#123;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</div><div class="line">                <span class="keyword">if</span>(flag[j] &amp;&amp; dict.find(s.substr(j, i - j)) != dict.end()) &#123;</div><div class="line">                    flag[i] = <span class="literal">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> flag[s.size()];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/word-break/" target="_blank" rel="external">https://leetcode.com/problems/word-break/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 139. Word Break
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python中list的切片操作</title>
    <link href="http://noahsnail.com/2019/04/29/2019-04-29-Python%E4%B8%ADlist%E7%9A%84%E5%88%87%E7%89%87%E6%93%8D%E4%BD%9C/"/>
    <id>http://noahsnail.com/2019/04/29/2019-04-29-Python中list的切片操作/</id>
    <published>2019-04-29T06:02:46.000Z</published>
    <updated>2019-04-29T06:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-list的切片操作"><a href="#1-list的切片操作" class="headerlink" title="1. list的切片操作"></a>1. list的切片操作</h2><p>Python中可以对list使用索引来进行切片操作，其语法(Python3)如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">a[:]           # a copy of the whole array</div><div class="line">a[start:]      # items start through the rest of the array</div><div class="line">a[:stop]       # items from the beginning through stop-1</div><div class="line">a[start:stop]  # items start through stop-1</div><div class="line"></div><div class="line">a[start:stop:step] # start through not past stop, by step</div><div class="line"></div><div class="line">a[-1]    # last item in the array</div><div class="line">a[-2:]   # last two items in the array</div><div class="line">a[:-2]   # everything except the last two items</div><div class="line"></div><div class="line"></div><div class="line">a[::-1]    # all items in the array, reversed</div><div class="line">a[1::-1]   # the first two items, reversed</div><div class="line">a[:-3:-1]  # the last two items, reversed</div><div class="line">a[-3::-1]  # everything except the last two items, reversed</div></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从0开始索引列表，索引值为整数</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = list(range(<span class="number">10</span>))  <span class="comment"># 定义列表a</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:]  <span class="comment"># 复制列表</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">0</span>:]  <span class="comment"># 从索引为0的列表元素开始迭代列表至列表结束</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>:]  <span class="comment"># 从索引为1的列表元素开始迭代列表至列表结束</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">9</span>]  <span class="comment"># 从索引为0的列表元素开始迭代列表至索引为8的列表元素，不包含索引为9的列表元素</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">5</span>] <span class="comment"># 从索引为3的列表元素开始迭代列表至索引为4的列表元素，不包含索引为5的列表元素</span></div><div class="line">[<span class="number">3</span>, <span class="number">4</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">1</span>] <span class="comment"># 从索引为0的列表元素开始索引列表，每次迭代索引值加1，直至列表结束</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">2</span>] <span class="comment"># 从索引为0的列表元素开始索引列表，每次迭代索引值加2，直至列表结束</span></div><div class="line">[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">3</span>:<span class="number">9</span>:<span class="number">2</span>] <span class="comment"># 从索引为3的列表元素开始索引列表，每次迭代索引值加2，直至索引为8的列表元素，不包含索引为9的列表元素</span></div><div class="line">[<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line"><span class="comment"># 当索引值为负数时</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-1</span>] <span class="comment"># 列表的最后一个元素</span></div><div class="line"><span class="number">9</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-2</span>:] <span class="comment"># 从列表的倒数第二个元素直至列表结束，即从索引值为-2的元素直至列表结束</span></div><div class="line">[<span class="number">8</span>, <span class="number">9</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">-1</span>] <span class="comment"># 从列表的第一个元素直至列表的倒数第二个元素结束，不包含最后一个列表元素</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">-2</span>] <span class="comment"># 从列表的第一个元素直至列表的倒数第三个元素结束，不包含最后两个个列表元素</span></div><div class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># 当step为负值时，表示逆向索引列表</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[::<span class="number">-1</span>] <span class="comment"># 反转列表，从列表最后一个元素到列表的第一个元素</span></div><div class="line">[<span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">1</span>::<span class="number">-1</span>] <span class="comment"># 从索引值为1的列表元素开始，逆向索引直列表开头</span></div><div class="line">[<span class="number">1</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[<span class="number">-3</span>::<span class="number">-1</span>] <span class="comment"># 从索引值为-3的列表元素开始，逆向索引直列表开头</span></div><div class="line">[<span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a[:<span class="number">-3</span>:<span class="number">-1</span>] <span class="comment"># 从索引值为-1，逆向索引直索引为-2的元素结束，不包含索引为-3的元素</span></div><div class="line">[<span class="number">9</span>, <span class="number">8</span>]</div></pre></td></tr></table></figure>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://stackoverflow.com/questions/509211/understanding-slice-notation" target="_blank" rel="external">https://stackoverflow.com/questions/509211/understanding-slice-notation</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python中list的切片操作
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>理解PyTorch的contiguous()</title>
    <link href="http://noahsnail.com/2019/04/29/2019-04-29-%E7%90%86%E8%A7%A3PyTorch%E7%9A%84contiguous()/"/>
    <id>http://noahsnail.com/2019/04/29/2019-04-29-理解PyTorch的contiguous()/</id>
    <published>2019-04-29T02:33:32.000Z</published>
    <updated>2019-04-29T02:49:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; [简书](<a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">http://www.jianshu.com/users/7731e83f3a4e/latest_articles</a></p>
<h2 id="1-PyTorch中的Tensor操作"><a href="#1-PyTorch中的Tensor操作" class="headerlink" title="1. PyTorch中的Tensor操作"></a>1. PyTorch中的Tensor操作</h2><p>在PyTorch中，有一些对Tensor的操作不会真正改变Tensor的内容，改变的仅仅是Tensor中字节位置的索引。这些操作有：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">narrow(), view(), expand(), transpose()</div></pre></td></tr></table></figure>
<p>例如执行<code>view</code>操作之后，不会开辟新的内存空间来存放处理之后的数据，实际上新数据与原始数据共享同一块内存。</p>
<p>而在调用<code>contiguous()</code>之后，PyTorch会开辟一块新的内存空间存放变换之后的数据，并会真正改变Tensor的内容，按照变换之后的顺序存放数据。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://stackoverflow.com/questions/48915810/pytorch-contiguous" target="_blank" rel="external">https://stackoverflow.com/questions/48915810/pytorch-contiguous</a></li>
<li><a href="https://www.zhihu.com/question/60321866" target="_blank" rel="external">https://www.zhihu.com/question/60321866</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      理解PyTorch的contiguous()
    
    </summary>
    
      <category term="PyTorch" scheme="http://noahsnail.com/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://noahsnail.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>理解Python中super</title>
    <link href="http://noahsnail.com/2019/03/19/2019-03-19-%E7%90%86%E8%A7%A3Python%E4%B8%ADsuper/"/>
    <id>http://noahsnail.com/2019/03/19/2019-03-19-理解Python中super/</id>
    <published>2019-03-19T07:22:58.000Z</published>
    <updated>2019-03-20T05:22:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-单继承"><a href="#1-单继承" class="headerlink" title="1. 单继承"></a>1. 单继承</h2><p>在单继承时，<code>super().__init__()</code>与<code>Base.__init__()</code>是一样的。super()避免了基类的显式调用。代码如下：</p>
<ul>
<li>super().<strong>init</strong>()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &apos;Create Base&apos;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        Base.__init__(self)</div><div class="line">        print &apos;Create A&apos;</div><div class="line"></div><div class="line">A()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line">Create Base</div><div class="line">Create A</div></pre></td></tr></table></figure>
<ul>
<li>Base.<strong>init</strong>()</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &apos;Create Base&apos;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        super(A, self).__init__()</div><div class="line">        # super().__init()  python3</div><div class="line">        print &apos;Create A&apos;</div><div class="line"></div><div class="line">A()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line">Create Base</div><div class="line">Create A</div></pre></td></tr></table></figure>
<h2 id="2-多继承"><a href="#2-多继承" class="headerlink" title="2. 多继承"></a>2. 多继承</h2><p><code>super</code>与父类没有实质性的关联。在单继承时，<code>super</code>获取的类刚好是父类，但多继承时，<code>super</code>获取的是继承顺序中的下一个类。以下面的继承方式为例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  Base</div><div class="line">  /  \</div><div class="line"> /    \</div><div class="line">A      B</div><div class="line"> \    /</div><div class="line">  \  /</div><div class="line">   C</div></pre></td></tr></table></figure>
<p>使用super，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter Base&quot;</div><div class="line">        print &quot;leave Base&quot;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter A&quot;</div><div class="line">        super(A, self).__init__()</div><div class="line">        print &quot;leave A&quot;</div><div class="line"></div><div class="line">class B(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter B&quot;</div><div class="line">        super(B, self).__init__()</div><div class="line">        print &quot;leave B&quot;</div><div class="line"></div><div class="line">class C(A, B):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter C&quot;</div><div class="line">        super(C, self).__init__()</div><div class="line">        print &quot;leave C&quot;</div><div class="line"></div><div class="line">C()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line">enter C</div><div class="line">enter A</div><div class="line">enter B</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave B</div><div class="line">leave A</div><div class="line">leave C</div></pre></td></tr></table></figure>
<p>如果不使用<code>super</code>，代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter Base&quot;</div><div class="line">        print &quot;leave Base&quot;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter A&quot;</div><div class="line">        Base().__init__()</div><div class="line">        print &quot;leave A&quot;</div><div class="line"></div><div class="line">class B(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter B&quot;</div><div class="line">        Base().__init__()</div><div class="line">        print &quot;leave B&quot;</div><div class="line"></div><div class="line">class C(A, B):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter C&quot;</div><div class="line">        A().__init__()</div><div class="line">        B().__init__()</div><div class="line">        print &quot;leave C&quot;</div><div class="line"></div><div class="line">C()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line">enter C</div><div class="line">enter A</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave A</div><div class="line">enter A</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave A</div><div class="line">enter B</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave B</div><div class="line">enter B</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">enter Base</div><div class="line">leave Base</div><div class="line">leave B</div><div class="line">leave C</div></pre></td></tr></table></figure>
<p>从上面可以看到如果不使用<code>super</code>，会导致基类被多次调用，开销非常大。</p>
<p>对于定义的类，在Python中会创建一个MRO(Method Resolution Order)列表，它代表了类继承的顺序。查看MRO列表：</p>
<ul>
<li>使用super</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;Create Base&quot;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        super(A, self).__init__()</div><div class="line">        print &quot;Create A&quot;</div><div class="line"></div><div class="line">class B(Base):</div><div class="line">    def __init__(self):</div><div class="line">        super(B, self).__init__()</div><div class="line">        print &quot;Create B&quot;</div><div class="line"></div><div class="line">class C(A, B):</div><div class="line">    def __init__(self):</div><div class="line">        super(C, self).__init__()</div><div class="line">        print &quot;Create C&quot;</div><div class="line"></div><div class="line">print C.mro()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line"></div><div class="line">[&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.Base&apos;&gt;, &lt;type &apos;object&apos;&gt;]</div></pre></td></tr></table></figure>
<ul>
<li>不使用super</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class Base(object):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter Base&quot;</div><div class="line">        print &quot;leave Base&quot;</div><div class="line"></div><div class="line">class A(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter A&quot;</div><div class="line">        Base().__init__()</div><div class="line">        print &quot;leave A&quot;</div><div class="line"></div><div class="line">class B(Base):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter B&quot;</div><div class="line">        Base().__init__()</div><div class="line">        print &quot;leave B&quot;</div><div class="line"></div><div class="line">class C(A, B):</div><div class="line">    def __init__(self):</div><div class="line">        print &quot;enter C&quot;</div><div class="line">        A().__init__()</div><div class="line">        B().__init__()</div><div class="line">        print &quot;leave C&quot;</div><div class="line"></div><div class="line">print C.mro()</div><div class="line"></div><div class="line"># 测试结果</div><div class="line">[&lt;class &apos;__main__.C&apos;&gt;, &lt;class &apos;__main__.A&apos;&gt;, &lt;class &apos;__main__.B&apos;&gt;, &lt;class &apos;__main__.Base&apos;&gt;, &lt;type &apos;object&apos;&gt;]</div></pre></td></tr></table></figure>
<p>从测试结果来看，两种方式的MRO列表是一样的。MRO的查找顺序是按广度优先来的(基类继承object，Python 2.3之后)。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol>
<li><a href="https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods" target="_blank" rel="external">https://stackoverflow.com/questions/576169/understanding-python-super-with-init-methods</a></li>
<li><a href="https://my.oschina.net/jhao104/blog/682322" target="_blank" rel="external">https://my.oschina.net/jhao104/blog/682322</a></li>
<li><a href="http://funhacks.net/explore-python/Class/super.html" target="_blank" rel="external">http://funhacks.net/explore-python/Class/super.html</a></li>
<li><a href="https://www.artima.com/weblogs/viewpost.jsp?thread=236275" target="_blank" rel="external">https://www.artima.com/weblogs/viewpost.jsp?thread=236275</a></li>
<li><a href="https://docs.python.org/2/library/functions.html#super" target="_blank" rel="external">https://docs.python.org/2/library/functions.html#super</a></li>
<li><a href="https://blog.51cto.com/freshair/2063290" target="_blank" rel="external">https://blog.51cto.com/freshair/2063290</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      理解Python中super
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 31. Next Permutation</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-31--Next-Permutation/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-31--Next-Permutation/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-5a3abde7bb036f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Next Permutation"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">nextPermutation</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = <span class="number">-1</span>;</div><div class="line">        <span class="keyword">int</span> min = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = nums.size() - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[i - <span class="number">1</span>] ) &#123;</div><div class="line">                index = i - <span class="number">1</span>;</div><div class="line">                min = i;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(index == <span class="number">-1</span>) &#123;</div><div class="line">            <span class="keyword">return</span> reverse(nums.begin(), nums.end());</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = index + <span class="number">1</span>; i &lt; nums.size(); i++) &#123;</div><div class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[index] &amp;&amp; nums[i] &lt; nums[min]) &#123;</div><div class="line">                min = i;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        swap(nums[index], nums[min]);</div><div class="line">        sort(nums.begin() + index + <span class="number">1</span>, nums.end());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; a, <span class="keyword">int</span>&amp; b)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> temp = a;</div><div class="line">        a = b;</div><div class="line">        b = temp;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/next-permutation/description/" target="_blank" rel="external">https://leetcode.com/problems/next-permutation/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 31. Next Permutation
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 100. Same Tree</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-100--Same-Tree/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-100--Same-Tree/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-faefbb6691769499.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Same Tree"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Recurrent</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSameTree</span><span class="params">(TreeNode* p, TreeNode* q)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!p &amp;&amp; !q) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span>((!p &amp;&amp; q) || (p &amp;&amp; !q)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(p-&gt;val != q-&gt;val) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isSameTree(p-&gt;left, q-&gt;left) &amp;&amp; isSameTree(p-&gt;right, q-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="external">https://leetcode.com/problems/same-tree/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 100. Same Tree
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 101. Symmetric Tree</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-101--Symmetric-Tree/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-101--Symmetric-Tree/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-fc873a6d82ec7d81.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Symmetric Tree"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Recursive</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> isMirror(root-&gt;left, root-&gt;right);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isMirror</span><span class="params">(TreeNode* left, TreeNode* right)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(left == <span class="literal">NULL</span> || right == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> left-&gt;val == right-&gt;val &amp;&amp; isMirror(left-&gt;left, right-&gt;right) &amp;&amp; isMirror(left-&gt;right, right-&gt;left);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Iterative<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isSymmetric</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(root == <span class="literal">NULL</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">queue</span>&lt;TreeNode*&gt; nodes;</div><div class="line">        nodes.push(root);</div><div class="line">        nodes.push(root);</div><div class="line">        <span class="keyword">while</span>(!nodes.empty()) &#123;</div><div class="line">            TreeNode* left = nodes.front();</div><div class="line">            nodes.pop();</div><div class="line">            TreeNode* right = nodes.front();</div><div class="line">            nodes.pop();</div><div class="line">            <span class="keyword">if</span>(left == <span class="literal">NULL</span> &amp;&amp; right == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">continue</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(left == <span class="literal">NULL</span> || right == <span class="literal">NULL</span>) &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(left-&gt;val == right-&gt;val) &#123;</div><div class="line">                nodes.push(left-&gt;left);</div><div class="line">                nodes.push(right-&gt;right);</div><div class="line">                nodes.push(left-&gt;right);</div><div class="line">                nodes.push(right-&gt;left);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="external">https://leetcode.com/problems/symmetric-tree/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 101. Symmetric Tree
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 99. Recover Binary Search Tree</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-99--Recover-Binary-Search-Tree/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-99--Recover-Binary-Search-Tree/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <summary type="html">
    
      Leetcode 99. Recover Binary Search Tree
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 98. Validate Binary Search Tree</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-98--Validate-Binary-Search-Tree/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-98--Validate-Binary-Search-Tree/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-302f74a4dbd1b837.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Validate Binary Search Tree"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Recurrent</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isValidBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> validate(root, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">validate</span><span class="params">(TreeNode* root, TreeNode* max, TreeNode* min)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>((min &amp;&amp; root-&gt;val &lt;= min-&gt;val) || (max &amp;&amp; root-&gt;val &gt;= max-&gt;val)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> validate(root-&gt;left, root, min) &amp;&amp; validate(root-&gt;right, max, root);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/validate-binary-search-tree/description/" target="_blank" rel="external">https://leetcode.com/problems/validate-binary-search-tree/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 98. Validate Binary Search Tree
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 96. Unique Binary Search Trees</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-96--Unique-Binary-Search-Trees/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-96--Unique-Binary-Search-Trees/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-22a02bb2659c41b5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Unique Binary Search Trees"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>参考<br><a href="https://leetcode.com/problems/unique-binary-search-trees/discuss/31666/DP-Solution-in-6-lines-with-explanation.-F(i-n" target="_blank" rel="external">DP Solution in 6 lines with explanation. F(i, n) = G(i-1) * G(n-i)</a>-G(i-1)-*-G(n-i)?page=2)</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> total[n + <span class="number">1</span>];</div><div class="line">        total[<span class="number">0</span>] = total[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</div><div class="line">            total[i] = <span class="number">0</span>;</div><div class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</div><div class="line">                total[i] += total[j - <span class="number">1</span>] * total[i - j];</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> total[n];</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/unique-binary-search-trees/description/" target="_blank" rel="external">https://leetcode.com/problems/unique-binary-search-trees/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 96. Unique Binary Search Trees
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 92. Reverse Linked List II</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-92--Reverse-Linked-List-II/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-92--Reverse-Linked-List-II/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-f4e06f7f5d634709.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Reverse Linked List II"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for singly-linked list.</div><div class="line"> * struct ListNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     ListNode *next;</div><div class="line"> *     ListNode(int x) : val(x), next(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">ListNode* <span class="title">reverseBetween</span><span class="params">(ListNode* head, <span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(m == n) &#123;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        ListNode* start = <span class="literal">nullptr</span>;</div><div class="line">        ListNode* end = <span class="literal">nullptr</span>;</div><div class="line">        ListNode* left = <span class="literal">nullptr</span>;</div><div class="line">        ListNode* right = <span class="literal">nullptr</span>;</div><div class="line"></div><div class="line">        ListNode* pre = <span class="literal">nullptr</span>;</div><div class="line">        ListNode* current = head;</div><div class="line">        ListNode* next = <span class="literal">nullptr</span>;</div><div class="line">        <span class="keyword">int</span> diff = n - m + <span class="number">1</span>;</div><div class="line">        m--;</div><div class="line">        <span class="keyword">while</span>(m) &#123;</div><div class="line">            pre = current;</div><div class="line">            current = current-&gt;next;</div><div class="line">            m--;</div><div class="line">        &#125;</div><div class="line">        start = pre;</div><div class="line">        right = current;</div><div class="line">        <span class="keyword">while</span>(diff) &#123;</div><div class="line">            next = current-&gt;next;</div><div class="line">            current-&gt;next = pre;</div><div class="line">            pre = current;</div><div class="line">            current = next;</div><div class="line">            diff--;</div><div class="line">        &#125;</div><div class="line">        left = pre;</div><div class="line">        end = current;</div><div class="line">        right-&gt;next = end;</div><div class="line">        <span class="keyword">if</span>(start) &#123;</div><div class="line">            start-&gt;next = left;</div><div class="line">            <span class="keyword">return</span> head;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> left;</div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/reverse-linked-list-ii/description/" target="_blank" rel="external">https://leetcode.com/problems/reverse-linked-list-ii/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 92. Reverse Linked List II
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 9. Palindrome Number</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-9--Palindrome-Number/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-9--Palindrome-Number/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-ea245db403bb5f2c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Palindrome Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = x;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(m) &#123;</div><div class="line">            y = y * <span class="number">10</span> + m % <span class="number">10</span>;</div><div class="line">            m /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x == y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Version 2<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || (x != <span class="number">0</span> &amp;&amp; x % <span class="number">10</span> == <span class="number">0</span>)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> m = x;</div><div class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</div><div class="line">        <span class="keyword">while</span>(m) &#123;</div><div class="line">            y = y * <span class="number">10</span> + m % <span class="number">10</span>;</div><div class="line">            m /= <span class="number">10</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> x == y;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/palindrome-number/description/" target="_blank" rel="external">https://leetcode.com/problems/palindrome-number/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 9. Palindrome Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 897. Increasing Order Search Tree</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-897--Increasing-Order-Search-Tree/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-897--Increasing-Order-Search-Tree/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-c0be25bc8091620f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Increasing Order Search Tree"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">vector</span>&lt;TreeNode*&gt; nodes;</div><div class="line">        inorder(root, nodes);</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nodes.size() - <span class="number">1</span>; i++) &#123;</div><div class="line">            nodes[i]-&gt;right = nodes[i + <span class="number">1</span>];</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> nodes[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, <span class="built_in">vector</span>&lt;TreeNode*&gt;&amp; nodes)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        inorder(root-&gt;left, nodes);</div><div class="line">        root-&gt;left = <span class="literal">nullptr</span>;</div><div class="line">        nodes.push_back(root);</div><div class="line">        inorder(root-&gt;right, nodes);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Definition for a binary tree node.</div><div class="line"> * struct TreeNode &#123;</div><div class="line"> *     int val;</div><div class="line"> *     TreeNode *left;</div><div class="line"> *     TreeNode *right;</div><div class="line"> *     TreeNode(int x) : val(x), left(NULL), right(NULL) &#123;&#125;</div><div class="line"> * &#125;;</div><div class="line"> */</div><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="function">TreeNode* <span class="title">increasingBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span> root;</div><div class="line">        &#125;</div><div class="line">        TreeNode* head = <span class="keyword">new</span> TreeNode(<span class="number">0</span>);</div><div class="line">        TreeNode* current = head;</div><div class="line">        inorder(root, current);</div><div class="line">        <span class="keyword">return</span> head-&gt;right;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">inorder</span><span class="params">(TreeNode* root, TreeNode* current)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!root) &#123;</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        inorder(root-&gt;left);</div><div class="line">        root-&gt;left = <span class="literal">nullptr</span>;</div><div class="line">        current-&gt;right = root;</div><div class="line">        current = root;</div><div class="line">        inorder(root-&gt;right);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/increasing-order-search-tree/description/" target="_blank" rel="external">https://leetcode.com/problems/increasing-order-search-tree/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 897. Increasing Order Search Tree
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 89. Gray Code</title>
    <link href="http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-89--Gray-Code/"/>
    <id>http://noahsnail.com/2018/12/12/2018-12-12-Leetcode-89--Gray-Code/</id>
    <published>2018-12-12T05:23:49.000Z</published>
    <updated>2018-12-12T05:38:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="https://upload-images.jianshu.io/upload_images/3232548-099396be7dad2d3a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Gray Code"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; grayCode(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="built_in">bitset</span>&lt;32&gt; code;</div><div class="line">        traverse(result, code, n - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; result, <span class="built_in">bitset</span>&lt;<span class="number">32</span>&gt;&amp; code, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">int</span> value = code.to_ulong();</div><div class="line">            result.push_back(value);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        traverse(result, code, pos - <span class="number">1</span>);</div><div class="line">        code.flip(pos);</div><div class="line">        traverse(result, code, pos - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">class</span> Solution &#123;</div><div class="line"><span class="keyword">public</span>:</div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; grayCode(<span class="keyword">int</span> n) &#123;</div><div class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; result;</div><div class="line">        <span class="keyword">int</span> code = <span class="number">0</span>;</div><div class="line">        traverse(result, code, n - <span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"><span class="keyword">private</span>:</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">traverse</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; result, <span class="keyword">int</span>&amp; code, <span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(pos &lt; <span class="number">0</span>) &#123;</div><div class="line">            result.push_back(code);</div><div class="line">            <span class="keyword">return</span>;</div><div class="line">        &#125;</div><div class="line">        traverse(result, code, pos - <span class="number">1</span>);</div><div class="line">        code ^= (<span class="number">1</span> &lt;&lt; pos);</div><div class="line">        traverse(result, code, pos - <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/gray-code/description/" target="_blank" rel="external">https://leetcode.com/problems/gray-code/description/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 89. Gray Code
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
