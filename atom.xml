<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SnailTyan</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://noahsnail.com/"/>
  <updated>2021-02-04T07:43:36.515Z</updated>
  <id>http://noahsnail.com/</id>
  
  <author>
    <name>Tyan</name>
    <email>Tyan.Liu.Git@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode 322. Coin Change</title>
    <link href="http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-322-Coin-Change/"/>
    <id>http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-322-Coin-Change/</id>
    <published>2021-02-04T05:25:38.656Z</published>
    <updated>2021-02-04T07:43:36.515Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Coin_Change.png" alt="Coin Change"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></div><div class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        stat = [<span class="number">0</span>] * (amount + <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</div><div class="line">                <span class="keyword">if</span> i - coin &gt; <span class="number">0</span> <span class="keyword">and</span> stat[i - coin] &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> stat[i] &gt; <span class="number">0</span>:</div><div class="line">                        stat[i] = min(<span class="number">1</span> + stat[i - coin], stat[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        stat[i] = <span class="number">1</span> + stat[i - coin]</div><div class="line">                <span class="keyword">elif</span> i - coin == <span class="number">0</span>:</div><div class="line">                    stat[i] = <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> stat[amount] <span class="keyword">if</span> stat[amount] &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">coinChange</span><span class="params">(self, coins, amount)</span>:</span></div><div class="line">        <span class="keyword">if</span> amount == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        stat = [<span class="number">0</span> <span class="keyword">if</span> i <span class="keyword">not</span> <span class="keyword">in</span> coins <span class="keyword">else</span> <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>)]</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(amount + <span class="number">1</span>):</div><div class="line">            <span class="keyword">for</span> coin <span class="keyword">in</span> coins:</div><div class="line">                <span class="keyword">if</span> i - coin &gt; <span class="number">0</span> <span class="keyword">and</span> stat[i - coin] &gt; <span class="number">0</span>:</div><div class="line">                    <span class="keyword">if</span> stat[i] &gt; <span class="number">0</span>:</div><div class="line">                        stat[i] = min(<span class="number">1</span> + stat[i - coin], stat[i])</div><div class="line">                    <span class="keyword">else</span>:</div><div class="line">                        stat[i] = <span class="number">1</span> + stat[i - coin]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> stat[amount] <span class="keyword">if</span> stat[amount] &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/coin-change/" target="_blank" rel="external">https://leetcode.com/problems/coin-change/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 322. Coin Change
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 997. Find the Town Judge</title>
    <link href="http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-997-Find-the-Town-Judge/"/>
    <id>http://noahsnail.com/2021/02/04/2021-02-04-Leetcode-997-Find-the-Town-Judge/</id>
    <published>2021-02-04T01:10:51.331Z</published>
    <updated>2021-02-04T01:29:43.272Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Find_the_Town_Judge.png" alt="Find the Town Judge"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N, trust)</span>:</span></div><div class="line">        <span class="keyword">if</span> N == <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> len(trust) &lt; N - <span class="number">1</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        judge = &#123;&#125;</div><div class="line">        people = &#123;&#125;</div><div class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> trust:</div><div class="line">            people[pair[<span class="number">0</span>]] = people.get(pair[<span class="number">0</span>], <span class="number">0</span>) + <span class="number">1</span></div><div class="line">            judge[pair[<span class="number">1</span>]] = judge.get(pair[<span class="number">1</span>], <span class="number">0</span>) + <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">for</span> key, value <span class="keyword">in</span> judge.items():</div><div class="line">            <span class="keyword">if</span> value == N - <span class="number">1</span> <span class="keyword">and</span> key <span class="keyword">not</span> <span class="keyword">in</span> people:</div><div class="line">                <span class="keyword">return</span> key</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findJudge</span><span class="params">(self, N, trust)</span>:</span></div><div class="line">        count = [<span class="number">0</span>] * (N + <span class="number">1</span>)</div><div class="line">        <span class="keyword">for</span> pair <span class="keyword">in</span> trust:</div><div class="line">            count[pair[<span class="number">0</span>]] -= <span class="number">1</span></div><div class="line">            count[pair[<span class="number">1</span>]] += <span class="number">1</span></div><div class="line">        </div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, len(count)):</div><div class="line">            <span class="keyword">if</span> count[i] == N - <span class="number">1</span>:</div><div class="line">                <span class="keyword">return</span> i</div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span></div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/find-the-town-judge/submissions/" target="_blank" rel="external">https://leetcode.com/problems/find-the-town-judge/submissions/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 997. Find the Town Judge
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 171. Excel Sheet Column Number</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-171-Excel-Sheet-Column-Number/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-171-Excel-Sheet-Column-Number/</id>
    <published>2021-02-03T09:35:44.554Z</published>
    <updated>2021-02-03T09:40:26.053Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Excel_Sheet_Column_Number.png" alt="Excel Sheet Column Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">        result = <span class="number">0</span></div><div class="line">        mapping = &#123;chr(<span class="number">64</span>+i): i <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">27</span>)&#125;</div><div class="line">        s = list(s)</div><div class="line">        s.reverse()</div><div class="line"></div><div class="line">        <span class="keyword">for</span> index, ch <span class="keyword">in</span> enumerate(s):</div><div class="line">            result = result + mapping[ch] * math.pow(<span class="number">26</span>, index)</div><div class="line">        <span class="keyword">return</span> int(result)</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">titleToNumber</span><span class="params">(self, s)</span>:</span></div><div class="line">        result = <span class="number">0</span></div><div class="line">        <span class="keyword">for</span> ch <span class="keyword">in</span> s:</div><div class="line">            result = result * <span class="number">26</span> + ord(ch) - <span class="number">64</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/excel-sheet-column-number/" target="_blank" rel="external">https://leetcode.com/problems/excel-sheet-column-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 171. Excel Sheet Column Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 168. Excel Sheet Column Title</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-168-Excel-Sheet-Column-Title/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-168-Excel-Sheet-Column-Title/</id>
    <published>2021-02-03T09:19:43.693Z</published>
    <updated>2021-02-03T09:23:41.442Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Excel_Sheet_Column_Title.png" alt="Excel Sheet Column Title"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line"></div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            remainder = n % <span class="number">26</span></div><div class="line">            quotient = n // <span class="number">26</span></div><div class="line">            result = mapping[remainder - <span class="number">1</span>] + result</div><div class="line">            <span class="keyword">if</span> remainder == <span class="number">0</span>:</div><div class="line">                quotient -= <span class="number">1</span></div><div class="line">            n = quotient</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            remainder = n % <span class="number">26</span></div><div class="line">            n = (n - <span class="number">1</span>) // <span class="number">26</span></div><div class="line">            result = mapping[remainder - <span class="number">1</span>] + result</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">convertToTitle</span><span class="params">(self, n)</span>:</span></div><div class="line">        result = <span class="string">''</span></div><div class="line">        mapping = [chr(<span class="number">65</span>+i) <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">26</span>)]</div><div class="line">        <span class="keyword">while</span> n:</div><div class="line">            result = mapping[n % <span class="number">26</span> - <span class="number">1</span>] + result</div><div class="line">            n = (n - <span class="number">1</span>) // <span class="number">26</span></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/excel-sheet-column-title/" target="_blank" rel="external">https://leetcode.com/problems/excel-sheet-column-title/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 168. Excel Sheet Column Title
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 228. Summary Ranges</title>
    <link href="http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-228-Summary-Ranges/"/>
    <id>http://noahsnail.com/2021/02/03/2021-02-03-Leetcode-228-Summary-Ranges/</id>
    <published>2021-02-03T06:52:53.399Z</published>
    <updated>2021-02-03T07:03:29.209Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Summary_Ranges.png" alt="Maximum Swap"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summaryRanges</span><span class="params">(self, nums)</span>:</span></div><div class="line">        result = []</div><div class="line">        length = len(nums)</div><div class="line"></div><div class="line">        i = <span class="number">0</span></div><div class="line">        <span class="keyword">while</span> i &lt; length:</div><div class="line">            <span class="keyword">if</span> i == length - <span class="number">1</span> <span class="keyword">or</span> nums[i] + <span class="number">1</span> != nums[i + <span class="number">1</span>]:</div><div class="line">                result.append(str(nums[i]))</div><div class="line">                i += <span class="number">1</span></div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            start = nums[i]</div><div class="line">            <span class="keyword">while</span> i + <span class="number">1</span> &lt; length <span class="keyword">and</span> nums[i] + <span class="number">1</span> == nums[i + <span class="number">1</span>]:</div><div class="line">                i += <span class="number">1</span></div><div class="line">            end = nums[i]</div><div class="line">            result.append(str(start) + <span class="string">'-&gt;'</span> + str(end))</div><div class="line">            i += <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">summaryRanges</span><span class="params">(self, nums)</span>:</span></div><div class="line">        result = []</div><div class="line"></div><div class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> nums:</div><div class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums <span class="keyword">and</span> num + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                result.append(str(num))</div><div class="line">                <span class="keyword">continue</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> num - <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                start = num</div><div class="line"></div><div class="line">            <span class="keyword">if</span> num + <span class="number">1</span> <span class="keyword">not</span> <span class="keyword">in</span> nums:</div><div class="line">                end = num</div><div class="line">                result.append(str(start) + <span class="string">'-&gt;'</span> + str(end))</div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/summary-ranges/" target="_blank" rel="external">https://leetcode.com/problems/summary-ranges/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 228. Summary Ranges
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 670. Maximum Swap</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-670-Maximum-Swap/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-670-Maximum-Swap/</id>
    <published>2021-02-02T09:56:47.361Z</published>
    <updated>2021-02-03T06:07:18.089Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Maximum_Swap.png" alt="Maximum Swap"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(self, num)</span>:</span></div><div class="line">        s = list(str(num))</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line"></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - <span class="number">1</span>):</div><div class="line">            max_index = i</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(i + <span class="number">1</span>, length):</div><div class="line">                <span class="keyword">if</span> s[j] &gt;= s[max_index] <span class="keyword">and</span> s[i] != s[j]:</div><div class="line">                    max_index = j</div><div class="line">            <span class="keyword">if</span> max_index != i:</div><div class="line">                temp = s[i]</div><div class="line">                s[i] = s[max_index]</div><div class="line">                s[max_index] = temp</div><div class="line">                <span class="keyword">break</span> </div><div class="line"></div><div class="line">        <span class="keyword">return</span> int(<span class="string">''</span>.join(s))</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maximumSwap</span><span class="params">(self, num)</span>:</span></div><div class="line">        s = list(str(num))</div><div class="line">        length = len(s)</div><div class="line">        <span class="keyword">if</span> length &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> num</div><div class="line"></div><div class="line">        pre = <span class="number">0</span></div><div class="line">        post = <span class="number">0</span></div><div class="line">        max_index = length - <span class="number">1</span></div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(length - <span class="number">1</span>, <span class="number">-1</span>, <span class="number">-1</span>):</div><div class="line">            <span class="keyword">if</span> s[i] &gt; s[max_index]:</div><div class="line">                max_index = i</div><div class="line">            <span class="keyword">elif</span> s[i] &lt; s[max_index]:</div><div class="line">                pre = i</div><div class="line">                post = max_index</div><div class="line"></div><div class="line"></div><div class="line">        temp = s[pre]</div><div class="line">        s[pre] = s[post]</div><div class="line">        s[post] = temp</div><div class="line">        </div><div class="line"></div><div class="line">        <span class="keyword">return</span> int(<span class="string">''</span>.join(s))</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/maximum-swap/" target="_blank" rel="external">https://leetcode.com/problems/maximum-swap/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 670. Maximum Swap
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 321. Create Maximum Number</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-321-Create-Maximum-Number/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-321-Create-Maximum-Number/</id>
    <published>2021-02-02T07:20:53.355Z</published>
    <updated>2021-02-02T09:16:14.954Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Create_Maximum_Number.png" alt="Create Maximum Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p><strong>解析</strong>：</p>
<ol>
<li>首先将问题分解为两个子问题，即分别求两个序列的最大值，得到两个子序列（保留顺序），两个子序列的长度和为<code>k</code>。</li>
<li>合并两个子序列</li>
<li>比较所有合并后的序列，返回值最大的序列</li>
</ol>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> nums1 <span class="keyword">or</span> nums2:</div><div class="line">            <span class="keyword">if</span> self.compare(nums1, nums2):</div><div class="line">                result.append(nums1.pop(<span class="number">0</span>))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result.append(nums2.pop(<span class="number">0</span>))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, nums1, nums2)</span>:</span></div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        min_value = min(m, n)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(min_value):</div><div class="line">            <span class="keyword">if</span> nums1[i] &gt; nums2[i]:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">            <span class="keyword">if</span> nums1[i] &lt; nums2[i]:</div><div class="line">                <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line">        <span class="keyword">if</span> m &gt;= n:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> a <span class="keyword">or</span> b:</div><div class="line">            <span class="keyword">if</span> self.compare(a, b):</div><div class="line">                result.append(a.pop(<span class="number">0</span>))</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                result.append(b.pop(<span class="number">0</span>))</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        <span class="keyword">if</span> max(a, b) == a:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">True</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> <span class="keyword">False</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<ul>
<li>Version 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">maxNumber</span><span class="params">(self, nums1, nums2, k)</span>:</span></div><div class="line">        result = []</div><div class="line">        m = len(nums1)</div><div class="line">        n = len(nums2)</div><div class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(k + <span class="number">1</span>):</div><div class="line">            <span class="keyword">if</span> i &gt; m <span class="keyword">or</span> k - i &gt; n:</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            candidate = self.merge(self.getMaxNumber(nums1, i), self.getMaxNumber(nums2, k - i))</div><div class="line">            result = max(result, candidate)</div><div class="line">        <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">merge</span><span class="params">(self, a, b)</span>:</span></div><div class="line">        <span class="keyword">return</span> [max(a, b).pop(<span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(a) + len(b))]</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getMaxNumber</span><span class="params">(self, nums, k)</span>:</span></div><div class="line">        nums = nums[:]</div><div class="line">        <span class="keyword">if</span> len(nums) == k:</div><div class="line">            <span class="keyword">return</span> nums</div><div class="line">        result = []</div><div class="line">        <span class="keyword">while</span> k &gt; <span class="number">0</span>:</div><div class="line">            length = len(nums)</div><div class="line">            max_value = nums[<span class="number">0</span>]</div><div class="line">            max_index = <span class="number">0</span></div><div class="line">            <span class="keyword">for</span> index, num <span class="keyword">in</span> enumerate(nums):</div><div class="line">                <span class="keyword">if</span> length - index &lt; k:</div><div class="line">                    <span class="keyword">break</span></div><div class="line">                <span class="keyword">if</span> num &gt; max_value:</div><div class="line">                    max_value = num</div><div class="line">                    max_index = index</div><div class="line"></div><div class="line">            nums = nums[max_index + <span class="number">1</span>:]</div><div class="line">            result.append(max_value)</div><div class="line">            k -= <span class="number">1</span></div><div class="line"></div><div class="line">        <span class="keyword">return</span> result</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/create-maximum-number/" target="_blank" rel="external">https://leetcode.com/problems/create-maximum-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 321. Create Maximum Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 435. Non-overlapping Intervals</title>
    <link href="http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-435-Non-overlapping-Intervals/"/>
    <id>http://noahsnail.com/2021/02/02/2021-02-02-Leetcode-435-Non-overlapping-Intervals/</id>
    <published>2021-02-02T01:32:55.919Z</published>
    <updated>2021-02-02T01:34:44.802Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Non-overlapping-Intervals.png" alt="Non-overlapping Intervals"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">eraseOverlapIntervals</span><span class="params">(self, intervals)</span>:</span></div><div class="line">        count = <span class="number">0</span></div><div class="line">        <span class="keyword">if</span> len(intervals) &lt; <span class="number">2</span>:</div><div class="line">            <span class="keyword">return</span> count</div><div class="line">        intervals.sort(key=<span class="keyword">lambda</span> interval: interval[<span class="number">1</span>])</div><div class="line">        overlap = intervals[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> index <span class="keyword">in</span> range(<span class="number">1</span>, len(intervals)):</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &gt; intervals[index][<span class="number">0</span>]:</div><div class="line">                count += <span class="number">1</span></div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                overlap = intervals[index]</div><div class="line"></div><div class="line">        <span class="keyword">return</span> count</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/non-overlapping-intervals/" target="_blank" rel="external">https://leetcode.com/problems/non-overlapping-intervals/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 435. Non-overlapping Intervals
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 452. Minimum Number of Arrows to Burst Balloons</title>
    <link href="http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-452-Minimum-Number-of-Arrows-to-Burst-Balloons/"/>
    <id>http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-452-Minimum-Number-of-Arrows-to-Burst-Balloons/</id>
    <published>2021-02-01T09:58:10.569Z</published>
    <updated>2021-02-01T10:06:51.185Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Minimum_Number_of_Arrows_to_Burst Balloons.png" alt="Minimum Number of Arrows to Burst Balloons"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(points) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        points.sort(key=<span class="keyword">lambda</span> p: p[<span class="number">0</span>])</div><div class="line">        total = <span class="number">1</span></div><div class="line">        overlap = points[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &lt; point[<span class="number">0</span>]:</div><div class="line">                total += <span class="number">1</span></div><div class="line">                overlap = point</div><div class="line">            <span class="keyword">else</span>:</div><div class="line">                overlap[<span class="number">0</span>] = point[<span class="number">0</span>]</div><div class="line">                overlap[<span class="number">1</span>] = min(overlap[<span class="number">1</span>], point[<span class="number">1</span>])</div><div class="line"></div><div class="line">        <span class="keyword">return</span> total</div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findMinArrowShots</span><span class="params">(self, points)</span>:</span></div><div class="line">        <span class="keyword">if</span> len(points) == <span class="number">0</span>:</div><div class="line">            <span class="keyword">return</span> <span class="number">0</span></div><div class="line">        points.sort(key=<span class="keyword">lambda</span> p: p[<span class="number">1</span>])</div><div class="line">        total = <span class="number">1</span></div><div class="line">        overlap = points[<span class="number">0</span>]</div><div class="line">        <span class="keyword">for</span> point <span class="keyword">in</span> points:</div><div class="line">            <span class="keyword">if</span> overlap[<span class="number">1</span>] &lt; point[<span class="number">0</span>]:</div><div class="line">                total += <span class="number">1</span></div><div class="line">                overlap = point</div><div class="line"></div><div class="line">        <span class="keyword">return</span> total</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/" target="_blank" rel="external">https://leetcode.com/problems/minimum-number-of-arrows-to-burst-balloons/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 452. Minimum Number of Arrows to Burst Balloons
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode 179. Largest Number</title>
    <link href="http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-179-Largest-Number/"/>
    <id>http://noahsnail.com/2021/02/01/2021-02-01-Leetcode-179-Largest-Number/</id>
    <published>2021-02-01T06:32:47.783Z</published>
    <updated>2021-02-01T10:06:23.548Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-Description"><a href="#1-Description" class="headerlink" title="1. Description"></a>1. Description</h2><p><img src="http://noahsnail.com/images/leetcode/Largest_Number.png" alt="Largest Number"></p>
<h2 id="2-Solution"><a href="#2-Solution" class="headerlink" title="2. Solution"></a>2. Solution</h2><p>解析：这道题的关键在于想到需要编写一个比较函数来比较两个数字的“大小”，即两个数字排列的先后顺序。</p>
<ul>
<li>Version 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">        nums_str = [str(num) <span class="keyword">for</span> num <span class="keyword">in</span> nums]</div><div class="line">        nums_str = sorted(nums_str, key=functools.cmp_to_key(self.compare), reverse=<span class="keyword">True</span>)</div><div class="line"></div><div class="line">        result = <span class="string">''</span>.join(nums_str)</div><div class="line">        <span class="keyword">if</span> result[<span class="number">0</span>] == <span class="string">'0'</span>:</div><div class="line">            <span class="keyword">return</span> <span class="string">'0'</span></div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            <span class="keyword">return</span> result</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(self, x, y)</span>:</span></div><div class="line">        s1 = x + y</div><div class="line">        s2 = y + x</div><div class="line"></div><div class="line">        <span class="keyword">if</span> s1 &gt; s2:</div><div class="line">            <span class="keyword">return</span> <span class="number">1</span></div><div class="line">        <span class="keyword">if</span> s1 &lt; s2:</div><div class="line">            <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">        <span class="keyword">return</span> <span class="number">0</span></div></pre></td></tr></table></figure>
<ul>
<li>Version 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> functools</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">largestNumber</span><span class="params">(self, nums)</span>:</span></div><div class="line">        nums_str = list(map(str, nums))</div><div class="line">        cmp = <span class="keyword">lambda</span> x, y: <span class="number">1</span> <span class="keyword">if</span> x + y &gt; y + x <span class="keyword">else</span> <span class="number">-1</span> <span class="keyword">if</span> x + y &lt; y + x <span class="keyword">else</span> <span class="number">0</span></div><div class="line">        nums_str = sorted(nums_str, key=functools.cmp_to_key(cmp), reverse=<span class="keyword">True</span>)</div><div class="line">        <span class="keyword">return</span> str(int(<span class="string">''</span>.join(nums_str)))</div></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://leetcode.com/problems/largest-number/" target="_blank" rel="external">https://leetcode.com/problems/largest-number/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Leetcode 179. Largest Number
    
    </summary>
    
      <category term="基础算法" scheme="http://noahsnail.com/categories/%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="http://noahsnail.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>vim移除自动添加的换行符</title>
    <link href="http://noahsnail.com/2020/12/18/2020-12-18-vim%E7%A7%BB%E9%99%A4%E8%87%AA%E5%8A%A8%E6%B7%BB%E5%8A%A0%E7%9A%84%E6%8D%A2%E8%A1%8C%E7%AC%A6/"/>
    <id>http://noahsnail.com/2020/12/18/2020-12-18-vim移除自动添加的换行符/</id>
    <published>2020-12-18T06:22:18.270Z</published>
    <updated>2020-12-18T09:27:58.184Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在使用vim编辑文件时，默认情况下，vim会在文件末尾自动添加换行符(<code>endofline</code>)。如果需要移除文件末尾自动添加的换行符，就需要对文件重新编辑设置一下。</p>
<h2 id="2-移除换行符"><a href="#2-移除换行符" class="headerlink" title="2. 移除换行符"></a>2. 移除换行符</h2><p>使用vim编辑<code>test.txt</code>，文件内容为<code>abc</code>，保存。测试如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 统计文件行数</div><div class="line">root@ec18cf9b6d75:/workspace# wc -l test.txt</div><div class="line">1 test.txt</div><div class="line"></div><div class="line"># 统计文件字符数</div><div class="line">root@ec18cf9b6d75:/workspace# wc -m test.txt</div><div class="line">4 test.txt</div></pre></td></tr></table></figure>
<p>移除文件的自动换行符的vim命令如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">:set binary</div><div class="line">:set noendofline</div><div class="line">:wq</div><div class="line"></div><div class="line"># or</div><div class="line"></div><div class="line">:set bin noeol</div></pre></td></tr></table></figure>
<p>重新进行测试：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ec18cf9b6d75:/workspace# wc -l test.txt</div><div class="line">0 test.txt</div><div class="line">root@ec18cf9b6d75:/workspace# wc -m test.txt</div><div class="line">3 test.txt</div></pre></td></tr></table></figure>
<h2 id="3-测试结果解析"><a href="#3-测试结果解析" class="headerlink" title="3. 测试结果解析"></a>3. 测试结果解析</h2><p><code>wc -m</code>命令在统计文件的字符个数时会统计换行符，因此文件有换行符时字符统计数量为4，没有时为3。</p>
<p><code>wc -l</code>命令统计文件的行数时是统计换行符的个数，因此文件有换行符时行数统计数量为1，没有时为0。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://stackoverflow.com/questions/23488655/how-does-the-wc-c-in-linux-work" target="_blank" rel="external">https://stackoverflow.com/questions/23488655/how-does-the-wc-c-in-linux-work</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      vim移除自动添加的换行符
    
    </summary>
    
    
      <category term="Linux" scheme="http://noahsnail.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>PyTorch中的model.zero_grad() vs optimizer.zero_grad()</title>
    <link href="http://noahsnail.com/2020/09/29/2020-09-29-PyTorch%E4%B8%AD%E7%9A%84Model.zero_grad()%20vs%20optimizer.zero_grad()/"/>
    <id>http://noahsnail.com/2020/09/29/2020-09-29-PyTorch中的Model.zero_grad() vs optimizer.zero_grad()/</id>
    <published>2020-09-29T02:16:38.000Z</published>
    <updated>2020-09-29T03:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在PyTorch中，对模型参数的梯度置0时通常使用两种方式：<code>model.zero_grad()</code>和<code>optimizer.zero_grad()</code>。二者在训练代码都很常见，那么二者的区别在哪里呢？</p>
<h2 id="2-model-zero-grad"><a href="#2-model-zero-grad" class="headerlink" title="2. model.zero_grad()"></a>2. model.zero_grad()</h2><p><code>model.zero_grad()</code>的作用是将所有模型参数的梯度置为0。其源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> p <span class="keyword">in</span> self.parameters():</div><div class="line">    <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">        p.grad.detach_()</div><div class="line">        p.grad.zero_()</div></pre></td></tr></table></figure>
<h2 id="3-optimizer-zero-grad"><a href="#3-optimizer-zero-grad" class="headerlink" title="3. optimizer.zero_grad()"></a>3. optimizer.zero_grad()</h2><p><code>optimizer.zero_grad()</code>的作用是清除所有优化的<code>torch.Tensor</code>的梯度。其源码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> group <span class="keyword">in</span> self.param_groups:</div><div class="line">    <span class="keyword">for</span> p <span class="keyword">in</span> group[<span class="string">'params'</span>]:</div><div class="line">        <span class="keyword">if</span> p.grad <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</div><div class="line">            p.grad.detach_()</div><div class="line">            p.grad.zero_()</div></pre></td></tr></table></figure>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><ul>
<li><p>当使用<code>optimizer = optim.Optimizer(net.parameters())</code>设置优化器时，此时优化器中的<code>param_groups</code>等于模型中的<code>parameters()</code>，此时，二者是等效的，从二者的源码中也可以看出来。</p>
</li>
<li><p>当多个模型使用同一个优化器时，二者是不同的，此时需要根据实际情况选择梯度的清除方式。</p>
</li>
<li><p>当一个模型使用多个优化器时，二者是不同的，此时需要根据实际情况选择梯度的清除方式。</p>
</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://discuss.pytorch.org/t/model-zero-grad-or-optimizer-zero-grad/28426" target="_blank" rel="external">https://discuss.pytorch.org/t/model-zero-grad-or-optimizer-zero-grad/28426</a></p>
</li>
<li><p><a href="https://discuss.pytorch.org/t/whats-the-difference-between-optimizer-zero-grad-vs-nn-module-zero-grad/59233" target="_blank" rel="external">https://discuss.pytorch.org/t/whats-the-difference-between-optimizer-zero-grad-vs-nn-module-zero-grad/59233</a></p>
</li>
<li><p><a href="https://discuss.pytorch.org/t/zero-grad-optimizer-or-net/1887" target="_blank" rel="external">https://discuss.pytorch.org/t/zero-grad-optimizer-or-net/1887</a></p>
</li>
<li><p><a href="https://pytorch.org/docs/stable/optim.html" target="_blank" rel="external">https://pytorch.org/docs/stable/optim.html</a></p>
</li>
<li><p><a href="https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module" target="_blank" rel="external">https://pytorch.org/docs/stable/generated/torch.nn.Module.html#torch.nn.Module</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      PyTorch中的model.zero_grad() vs optimizer.zero_grad()
    
    </summary>
    
      <category term="Deep Learning" scheme="http://noahsnail.com/categories/Deep-Learning/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Python格式化字符串format</title>
    <link href="http://noahsnail.com/2020/06/18/2020-06-18-Python%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2format/"/>
    <id>http://noahsnail.com/2020/06/18/2020-06-18-Python格式化字符串format/</id>
    <published>2020-06-18T02:02:14.000Z</published>
    <updated>2020-06-18T06:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>Python中格式化字符串的方式有，一种是用<code>%</code>操作符来进行字符串格式化，一种是使用<code>str.format()</code>来进行字符串格式化，本文主要介绍<code>str.format()</code>方式，这种方式更主流，也是官方推荐的方式，<code>%</code>的方式后面会逐渐淘汰。</p>
<h2 id="2-格式化字符串"><a href="#2-格式化字符串" class="headerlink" title="2. 格式化字符串"></a>2. 格式化字符串</h2><h3 id="2-1-基本语法"><a href="#2-1-基本语法" class="headerlink" title="2.1 基本语法"></a>2.1 基本语法</h3><p>格式化字符串包含用大括号<code>{}</code>括起来的“替换字段”，。大括号中不包含的内容被视为正常文本，会原样输出。注意：如果要在文本中输出大括号，需要使用<code></code>来转义，不是使用场景的转义字符<code>\</code>。示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'This is a format &#123;&#125;.'</span>.format(<span class="string">'test'</span>)</div><div class="line"><span class="string">'This is a format test.'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'This is &#123;&#123;&#125;&#125; test.'</span>.format()</div><div class="line"><span class="string">'This is &#123;&#125; test.'</span></div></pre></td></tr></table></figure>
<p>下面是“替换字段”的语法，后面的示例中会具体讲到：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">replacement_field ::=  <span class="string">"&#123;"</span> [field_name] [<span class="string">"!"</span> conversion] [<span class="string">":"</span> format_spec] <span class="string">"&#125;"</span></div><div class="line">field_name        ::=  arg_name (<span class="string">"."</span> attribute_name | <span class="string">"["</span> element_index <span class="string">"]"</span>)*</div><div class="line">arg_name          ::=  [identifier | digit+]</div><div class="line">attribute_name    ::=  identifier</div><div class="line">element_index     ::=  digit+ | index_string</div><div class="line">index_string      ::=  &lt;any source character <span class="keyword">except</span> <span class="string">"]"</span>&gt; +</div><div class="line">conversion        ::=  <span class="string">"r"</span> | <span class="string">"s"</span> | <span class="string">"a"</span></div><div class="line">format_spec       ::=  &lt;described <span class="keyword">in</span> the next section&gt;</div></pre></td></tr></table></figure>
<h3 id="2-2-位置参数标识符"><a href="#2-2-位置参数标识符" class="headerlink" title="2.2 位置参数标识符"></a>2.2 位置参数标识符</h3><p>格式化字符串中，默认情况下<code>{}</code>中可以不加位置标识符，即<code>&#39;{} {}&#39;.format(a, b)</code>与<code>&#39;{0} {1}&#39;.format(a, b)</code>是等价的，但如果位置标识符在字符串中不是按参数顺序出现的，则需要显示的指明位置标识符。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125; &#123;1&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;&#125; &#123;&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'two one'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">'&#123;0&#125; &#123;1&#125; &#123;0&#125;'</span>.format(<span class="string">'one'</span>, <span class="string">'two'</span>)</div><div class="line"><span class="string">'one two one'</span></div></pre></td></tr></table></figure>
<h3 id="2-3-设置参数"><a href="#2-3-设置参数" class="headerlink" title="2.3 设置参数"></a>2.3 设置参数</h3><p>格式化字符串中可以使用变量、字典、列表索引、类的属性等来设置参数。示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(name=<span class="string">'Tyan'</span>, url=<span class="string">'http://noahsnail.com'</span>))</div><div class="line"></div><div class="line">name = <span class="string">'Tyan'</span></div><div class="line">url = <span class="string">'http://noahsnail.com'</span></div><div class="line">print(<span class="string">'Name: &#123;&#125;, URL: &#123;&#125;'</span>.format(name, url))</div><div class="line"></div><div class="line">site = &#123;<span class="string">'name'</span> : <span class="string">'Tyan'</span>, <span class="string">'url'</span> : <span class="string">'http://noahsnail.com'</span>&#125;</div><div class="line">print(<span class="string">'Name: &#123;site[name]&#125;, URL: &#123;site[url]&#125;'</span>.format(site=site))</div><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(**site))</div><div class="line"></div><div class="line">site = [<span class="string">'Tyan'</span>, <span class="string">'http://noahsnail.com'</span>]</div><div class="line">print(<span class="string">'Name: &#123;0[0]&#125;, URL: &#123;0[1]&#125;'</span>.format(site))</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.name = <span class="string">'Tyan'</span></div><div class="line">        self.url = <span class="string">'http://noahsnail.com'</span></div><div class="line"></div><div class="line">print(<span class="string">'Name: &#123;0.name&#125;, URL: &#123;0.url&#125;'</span>.format(Test()))</div><div class="line"></div><div class="line">site = &#123;<span class="string">'name'</span> : <span class="string">'Tyan'</span>, <span class="string">'url'</span> : <span class="string">'http://noahsnail.com'</span>&#125;</div><div class="line">print(<span class="string">'Name: &#123;name&#125;, URL: &#123;url&#125;'</span>.format(**site))</div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div><div class="line">Name: Tyan, URL: http://noahsnail.com</div></pre></td></tr></table></figure>
<h3 id="2-3-转换标志-conversion"><a href="#2-3-转换标志-conversion" class="headerlink" title="2.3 转换标志(conversion)"></a>2.3 转换标志(conversion)</h3><p>转换标志以<code>!</code>开始，主要有三种<code>!s</code>、<code>!r</code>、<code>!a</code>，分别会调用参数对象的<code>__str__</code>，<code>__repr__</code>，<code>__ascii__</code>方法。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">(object)</span>:</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test str function.'</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test repr function.'</span></div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ascii__</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> <span class="string">'Test ascii function.'</span></div><div class="line"></div><div class="line"></div><div class="line">print(<span class="string">'str: &#123;t!s&#125;, repr: &#123;t!r&#125;, ascii: &#123;t!a&#125;'</span>.format(t=Test()))</div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">str: Test str function., repr: Test repr function., ascii: Test repr function.</div></pre></td></tr></table></figure>
<h3 id="2-4-格式化说明-format-spec"><a href="#2-4-格式化说明-format-spec" class="headerlink" title="2.4 格式化说明(format_spec)"></a>2.4 格式化说明(format_spec)</h3><p>格式化说明包含了值表示的说明，包括字段宽度、对其方式、填充、小数准确率等，其以<code>:</code>开头。标准格式化说明符的一般形式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">format_spec     ::=  [[fill]align][sign][#][0][width][grouping_option][.precision][type]</div><div class="line">fill            ::=  &lt;any character&gt;</div><div class="line">align           ::=  &quot;&lt;&quot; | &quot;&gt;&quot; | &quot;=&quot; | &quot;^&quot;</div><div class="line">sign            ::=  &quot;+&quot; | &quot;-&quot; | &quot; &quot;</div><div class="line">width           ::=  digit+</div><div class="line">grouping_option ::=  &quot;_&quot; | &quot;,&quot;</div><div class="line">precision       ::=  digit+</div><div class="line">type            ::=  &quot;b&quot; | &quot;c&quot; | &quot;d&quot; | &quot;e&quot; | &quot;E&quot; | &quot;f&quot; | &quot;F&quot; | &quot;g&quot; | &quot;G&quot; | &quot;n&quot; | &quot;o&quot; | &quot;s&quot; | &quot;x&quot; | &quot;X&quot; | &quot;%&quot;</div></pre></td></tr></table></figure>
<ul>
<li><code>&lt;</code>表示输出结果左对齐，<code>&gt;</code>是右对齐，<code>^</code>是居中对其，<code>=</code>表示填充值在符号之后数字之前，例如<code>+00001234</code>。</li>
<li><code>+</code>表示正负数字都要带符号，<code>-</code>表示只有负数需要带负号，<code> </code>表示正数前面带空格，负数前面带负号。</li>
<li>数字表示。<code>b</code>表示二进制格式，<code>c</code>表示将整数转换为字符，<code>d</code>表示十进制整数，<code>o</code>表示八进制格式，<code>x，X</code>表示十六进制格式，<code>x</code>大于9的字母为小写，<code>X</code>大于9的字母为大写。默认为<code>d</code>。</li>
<li>其它说明符的具体解释可参考文档[1]。</li>
</ul>
<p>示例及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">print(<span class="string">'&#123;:&lt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:&gt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:^8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:*&gt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:*&lt;8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line">print(<span class="string">'&#123;:*^8&#125;'</span>.format(<span class="string">'1234'</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:+f&#125;; &#123;:+f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line">print(<span class="string">'&#123;: f&#125;; &#123;: f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line">print(<span class="string">'&#123;:-f&#125;; &#123;:-f&#125;'</span>.format(<span class="number">3.14</span>, <span class="number">-3.14</span>))</div><div class="line"></div><div class="line">print(<span class="string">'int: &#123;0:d&#125;;  hex: &#123;0:x&#125;;  oct: &#123;0:o&#125;;  bin: &#123;0:b&#125;'</span>.format(<span class="number">100</span>))</div><div class="line">print(<span class="string">'int: &#123;0:d&#125;;  hex: &#123;0:#x&#125;;  oct: &#123;0:#o&#125;;  bin: &#123;0:#b&#125;'</span>.format(<span class="number">100</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:,&#125;'</span>.format(<span class="number">100000000</span>))</div><div class="line"></div><div class="line">print(<span class="string">'&#123;:.2e&#125;'</span>.format(<span class="number">100000000</span>))</div><div class="line"></div><div class="line">print(<span class="string">'percentage: &#123;:.2%&#125;'</span>.format(<span class="number">1</span> / <span class="number">3</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">import</span> datetime</div><div class="line">print(<span class="string">'&#123;:%Y-%m-%d %H:%M:%S&#125;'</span>.format(datetime.datetime.now()))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line"><span class="number">1234</span>    </div><div class="line">    <span class="number">1234</span></div><div class="line">  <span class="number">1234</span>  </div><div class="line">****<span class="number">1234</span></div><div class="line"><span class="number">1234</span>****</div><div class="line">**<span class="number">1234</span>**</div><div class="line">+<span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line"> <span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line"><span class="number">3.140000</span>; <span class="number">-3.140000</span></div><div class="line">int: <span class="number">100</span>;  hex: <span class="number">64</span>;  oct: <span class="number">144</span>;  bin: <span class="number">1100100</span></div><div class="line">int: <span class="number">100</span>;  hex: <span class="number">0x64</span>;  oct: <span class="number">0o144</span>;  bin: <span class="number">0b1100100</span></div><div class="line"><span class="number">100</span>,<span class="number">000</span>,<span class="number">000</span></div><div class="line"><span class="number">1.00e+08</span></div><div class="line">percentage: <span class="number">33.33</span>%</div><div class="line"><span class="number">2020</span><span class="number">-06</span><span class="number">-18</span> <span class="number">19</span>:<span class="number">36</span>:<span class="number">38</span></div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://docs.python.org/3.8/library/string.html#format-string-syntax" target="_blank" rel="external">https://docs.python.org/3.8/library/string.html#format-string-syntax</a></p>
</li>
<li><p><a href="https://www.runoob.com/python/att-string-format.html" target="_blank" rel="external">https://www.runoob.com/python/att-string-format.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/1436703/difference-between-str-and-repr/1436756" target="_blank" rel="external">https://stackoverflow.com/questions/1436703/difference-between-str-and-repr/1436756</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/9196066/what-does-a-double-colon-followed-by-an-equals-sign-mean-in-programming-do" target="_blank" rel="external">https://stackoverflow.com/questions/9196066/what-does-a-double-colon-followed-by-an-equals-sign-mean-in-programming-do</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python格式化字符串format
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中list的append, extend, +=, +区别</title>
    <link href="http://noahsnail.com/2020/06/17/2020-06-17-python%E4%B8%ADlist%E7%9A%84append,%20extend%E5%8C%BA%E5%88%AB/"/>
    <id>http://noahsnail.com/2020/06/17/2020-06-17-python中list的append, extend区别/</id>
    <published>2020-06-17T01:48:53.000Z</published>
    <updated>2020-06-18T02:01:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9，<code>dis</code>库是Python自带的一个库，可以用来分析字节码，而字节码是CPython解释器的实现细节。</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在Python中，扩展<code>list</code>的方法有多种，<code>append</code>，<code>extend</code>，<code>+=</code>，<code>+</code>都是列表扩展的方式，但它们的使用又有些许不同，需要根据具体情况来选择，本文主要分析它们的差异。</p>
<h2 id="2-对比与分析"><a href="#2-对比与分析" class="headerlink" title="2. 对比与分析"></a>2. 对比与分析</h2><h3 id="2-1-list的函数方法"><a href="#2-1-list的函数方法" class="headerlink" title="2.1 list的函数方法"></a>2.1 <code>list</code>的函数方法</h3><ul>
<li>list.append(x)</li>
</ul>
<p><code>append</code>方法会将<code>x</code>作为<code>list</code>的一项添加到末尾。等价于<code>a[len(a):] = [x]</code>。</p>
<ul>
<li>list.extend(iterable)</li>
</ul>
<p><code>extend</code>方法会将后面的可迭代对象的所有项添加到列表中。</p>
<h3 id="2-2-代码测试"><a href="#2-2-代码测试" class="headerlink" title="2.2 代码测试"></a>2.2 代码测试</h3><ul>
<li>Test Case 1</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a += b</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a.append(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">a.extend(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">c = a + b</div><div class="line">print(a)</div><div class="line">print(c)</div><div class="line"></div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a += b</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a.append(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">a.extend(b)</div><div class="line">print(a)</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">c = a + b</div><div class="line">print(a)</div><div class="line">print(c)</div><div class="line"></div><div class="line"><span class="comment"># Output</span></div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'ef'</span>]</div><div class="line">[<span class="string">'ab'</span>, <span class="string">'cd'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"list_test.py"</span>, line <span class="number">40</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    c = a + b</div><div class="line">TypeError: can only concatenate list (<span class="keyword">not</span> <span class="string">"str"</span>) to list</div></pre></td></tr></table></figure>
<p>从输出结果来看，<code>extend</code>与<code>+=</code>是等价的，会扩展原有的列表，<code>+</code>只能用来连接列表，且不改变原有的列表，会返回一个新列表，<code>append</code>会往原有列表中添加一个新的元素。</p>
<ul>
<li>Test Case 2</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line"><span class="keyword">import</span> dis</div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test +'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a + b)</div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test extend'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a.extend(b))</div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test append'</span>)</div><div class="line">dis.dis(<span class="keyword">lambda</span> : a.append(b))</div><div class="line"></div><div class="line"></div><div class="line">a = [<span class="string">'ab'</span>, <span class="string">'cd'</span>]</div><div class="line">b = <span class="string">'ef'</span></div><div class="line">print(<span class="string">'Test +='</span>)</div><div class="line"><span class="comment">#dis.dis(lambda : a += b)</span></div><div class="line"></div><div class="line">print(<span class="string">'Test extend'</span>)</div><div class="line">dis.dis(compile(<span class="string">"s = []; s.extend('abc')"</span>, <span class="string">''</span>, <span class="string">'exec'</span>))</div><div class="line">print(<span class="string">'Test +='</span>)</div><div class="line">dis.dis(compile(<span class="string">"s = []; s += 'abc'"</span>, <span class="string">''</span>, <span class="string">'exec'</span>))</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">Test +</div><div class="line">  <span class="number">6</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_GLOBAL              <span class="number">1</span> (b)</div><div class="line">              <span class="number">4</span> BINARY_ADD</div><div class="line">              <span class="number">6</span> RETURN_VALUE</div><div class="line">Test extend</div><div class="line"> <span class="number">10</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_ATTR                <span class="number">1</span> (extend)</div><div class="line">              <span class="number">4</span> LOAD_GLOBAL              <span class="number">2</span> (b)</div><div class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">              <span class="number">8</span> RETURN_VALUE</div><div class="line">Test append</div><div class="line"> <span class="number">14</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (a)</div><div class="line">              <span class="number">2</span> LOAD_ATTR                <span class="number">1</span> (append)</div><div class="line">              <span class="number">4</span> LOAD_GLOBAL              <span class="number">2</span> (b)</div><div class="line">              <span class="number">6</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">              <span class="number">8</span> RETURN_VALUE</div><div class="line">Test +=</div><div class="line">Test extend</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">              <span class="number">4</span> LOAD_NAME                <span class="number">0</span> (s)</div><div class="line">              <span class="number">6</span> LOAD_ATTR                <span class="number">1</span> (extend)</div><div class="line">              <span class="number">8</span> LOAD_CONST               <span class="number">0</span> (<span class="string">'abc'</span>)</div><div class="line">             <span class="number">10</span> CALL_FUNCTION            <span class="number">1</span></div><div class="line">             <span class="number">12</span> POP_TOP</div><div class="line">             <span class="number">14</span> LOAD_CONST               <span class="number">1</span> (<span class="keyword">None</span>)</div><div class="line">             <span class="number">16</span> RETURN_VALUE</div><div class="line">Test +=</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">              <span class="number">4</span> LOAD_NAME                <span class="number">0</span> (s)</div><div class="line">              <span class="number">6</span> LOAD_CONST               <span class="number">0</span> (<span class="string">'abc'</span>)</div><div class="line">              <span class="number">8</span> INPLACE_ADD</div><div class="line">             <span class="number">10</span> STORE_NAME               <span class="number">0</span> (s)</div><div class="line">             <span class="number">12</span> LOAD_CONST               <span class="number">1</span> (<span class="keyword">None</span>)</div><div class="line">             <span class="number">14</span> RETURN_VALUE</div><div class="line"></div><div class="line"><span class="comment"># Errors</span></div><div class="line">  File <span class="string">"dis_test.py"</span>, line <span class="number">20</span></div><div class="line">    dis.dis(<span class="keyword">lambda</span> : a += b)</div><div class="line">                        ^</div><div class="line">SyntaxError: invalid syntax</div></pre></td></tr></table></figure>
<p>从输出结果来看，<code>+</code>，<code>+=</code>操作不会进行函数调用，而<code>extend</code>、<code>append</code>执行过程中会进行函数调用，当不注释<code>dis.dis(lambda : a += b)</code>时，执行会报错，虽然<code>extend</code>效果与<code>+=</code>是等价的，但<code>+=</code>在函数中不能使用非局部变量，而<code>extend</code>方法可以。</p>
<ul>
<li>Test case 3</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Code</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></div><div class="line">        <span class="keyword">return</span> self.a</div><div class="line"></div><div class="line">b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">temp = Test()</div><div class="line">print(<span class="string">'Before extend'</span>)</div><div class="line">print(temp.a)</div><div class="line">temp.get().extend(b)</div><div class="line">print(<span class="string">'After extend'</span>)</div><div class="line">print(temp.a)</div><div class="line"></div><div class="line">print(<span class="string">'+= ok'</span>)</div><div class="line">print(<span class="string">'Before +='</span>)</div><div class="line">print(temp.a)</div><div class="line">temp.a += b</div><div class="line">print(<span class="string">'After +='</span>)</div><div class="line">print(temp.a)</div><div class="line"></div><div class="line">print(<span class="string">'+= error'</span>)</div><div class="line"><span class="comment">#temp.get() += b</span></div><div class="line"></div><div class="line"><span class="comment"># Ouput</span></div><div class="line">Before extend</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">After extend</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">+= ok</div><div class="line">Before +=</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">After +=</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</div><div class="line">+= error</div><div class="line"></div><div class="line"><span class="comment"># Error</span></div><div class="line">    temp.get() += b</div><div class="line">    ^</div><div class="line">SyntaxError: can<span class="string">'t assign to function call</span></div></pre></td></tr></table></figure>
<p>上面这个例子是对<code>+=</code>与<code>extend</code>使用范围的对比。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><ul>
<li><code>extend</code>效果与<code>+=</code>是等价的，主要差异在于字节码执行的方式不同，<code>extend</code>方法涉及了函数调用，开销更大一些。<code>extend</code>比<code>+=</code>应用范围更广，某些情况下只能使用<code>extend</code>。</li>
<li><code>+=</code>会将后面的数据添加到原有的列表中，而<code>+</code>会返回一个新的列表，不改变原有列表。<code>+</code>只能连接列表。</li>
<li><code>append</code>方式会将参数作为列表的一项添加到原有的列表中。</li>
</ul>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://stackoverflow.com/questions/725782/in-python-what-is-the-difference-between-append-and/725882" target="_blank" rel="external">https://stackoverflow.com/questions/725782/in-python-what-is-the-difference-between-append-and/725882</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend" target="_blank" rel="external">https://stackoverflow.com/questions/252703/what-is-the-difference-between-pythons-list-methods-append-and-extend</a></p>
</li>
<li><p><a href="https://docs.python.org/3.6/tutorial/datastructures.html" target="_blank" rel="external">https://docs.python.org/3.6/tutorial/datastructures.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/3653298/concatenating-two-lists-difference-between-and-extend" target="_blank" rel="external">https://stackoverflow.com/questions/3653298/concatenating-two-lists-difference-between-and-extend</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/39689099/can-someone-explain-this-expression-alena-x-equivalent-to-list-append" target="_blank" rel="external">https://stackoverflow.com/questions/39689099/can-someone-explain-this-expression-alena-x-equivalent-to-list-append</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python中list的append, extend, +=, +区别
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的import vs from ... import</title>
    <link href="http://noahsnail.com/2020/06/17/2020-06-17-Python%E7%9A%84import%20vs%20from%20...%20import/"/>
    <id>http://noahsnail.com/2020/06/17/2020-06-17-Python的import vs from ... import/</id>
    <published>2020-06-17T01:09:06.000Z</published>
    <updated>2020-06-19T06:37:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>Python代码中，既可以导入模块，也可以导入模块中的对象，导入方式主要分为两种：<code>import &lt;module_name&gt;</code>和<code>from &lt;module_name&gt; import &lt;name(s)&gt;</code>。本文主要对二者进行比较。为了之后测试，定义了一个<code>module</code>模块，<code>module.py</code>文件定义如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line">b = <span class="string">'abc'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span><span class="params">()</span>:</span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></div><div class="line">        self.desc = <span class="string">'Test'</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_desc</span><span class="params">(self)</span>:</span></div><div class="line">        print(self.desc)</div></pre></td></tr></table></figure>
<h2 id="2-两种方式对比"><a href="#2-两种方式对比" class="headerlink" title="2. 两种方式对比"></a>2. 两种方式对比</h2><h3 id="2-1-import"><a href="#2-1-import" class="headerlink" title="2.1 import "></a>2.1 import <module_name></module_name></h3><p>Python模块导入的命令之一是<code>import &lt;module_name&gt;</code>，执行了<code>import &lt;module_name&gt;</code>命令之后，Python的运行过程如下：</p>
<ol>
<li>首先在<code>sys.modules</code>中查找<code>module_name</code>，<code>sys.modules</code>中包含所有之前导入模块的缓存。</li>
<li>如果在模块缓存中没找到<code>module_name</code>，Python会继续查找内置模块列表，这些是Python预先安装的模块，可以在Python标准库中找到。</li>
<li>如果还没找到，Python会在<code>sys.path</code>定义的目录列表中查找。这个列表中通常包含当前目录，会首先查找当前目录。</li>
<li>如果找到了<code>module_name</code>，会将其绑定到局部命名空间中，后面可以使用。如果没找到，则会抛出<code>ModuleNotFoundError</code>。</li>
</ol>
<p><strong>注：</strong>导入模块之后，可以通过模块的<code>__file__</code>属性来获取模块所在的目录，其是<code>sys.path</code>中的目录之一。<code>sys.path[0]</code>为空，表示当前目录。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; import module</div><div class="line">&gt;&gt;&gt; module.__file__</div><div class="line">&apos;/workspace/heatmap/module.py&apos;</div><div class="line">&gt;&gt;&gt; import re</div><div class="line">&gt;&gt;&gt; re.__file__</div><div class="line">&apos;/usr/lib/python3.6/re.py&apos;</div><div class="line">&gt;&gt;&gt; sys.path</div><div class="line">[&apos;&apos;, &apos;/usr/lib/python36.zip&apos;, &apos;/usr/lib/python3.6&apos;, &apos;/usr/lib/python3.6/lib-dynload&apos;, &apos;/usr/local/lib/python3.6/dist-packages&apos;, &apos;/usr/local/lib/python3.6/dist-packages/warpctc_pytorch-0.1-py3.6-linux-x86_64.egg&apos;, &apos;/usr/lib/python3/dist-packages&apos;]</div><div class="line">&gt;&gt;&gt; import os</div><div class="line">&gt;&gt;&gt; os.getcwd()</div><div class="line">&apos;/workspace/heatmap&apos;</div><div class="line">&gt;&gt;&gt; import mod</div><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</div><div class="line">ModuleNotFoundError: No module named &apos;mod&apos;</div></pre></td></tr></table></figure>
<p><code>import &lt;module_name&gt;</code>导入模块之后，并不可以直接访问模块中的内容，每个模块都有自己的私有符号表，其是模块中定义的所有对象的全局符号表，模块创建了一个单独的命名空间。执行<code>import &lt;module_name&gt;</code>之后，<code>&lt;module_name&gt;</code>放到了调用者的局部符号表里，但模块中定义的对象仍在模块的私有符号表里。访问模块中定义的对象需要使用<code>.</code>符号。示例如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> module</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">&lt;module <span class="string">'module'</span> <span class="keyword">from</span> <span class="string">'/workspace/heatmap/module.py'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'a'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.b</div><div class="line"><span class="string">'abc'</span></div></pre></td></tr></table></figure>
<p><code>import</code>导入模块时，有时候模块的名字非常长，每次访问模块的内容都很不方便，因此可以使用<code>import ... as ...</code>的方式为模块重命名，便于使用，示例代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> module <span class="keyword">as</span> mod</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mod</div><div class="line">&lt;module <span class="string">'module'</span> <span class="keyword">from</span> <span class="string">'/workspace/heatmap/module.py'</span>&gt;</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module.a</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>mod.a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div></pre></td></tr></table></figure>
<h3 id="2-2-from-import"><a href="#2-2-from-import" class="headerlink" title="2.2 from  import "></a>2.2 from <module_name> import <name(s)></name(s)></module_name></h3><p><code>from &lt;module_name&gt; import &lt;name(s)&gt;</code>命令可以直接导入模块中的对象，命令执行之后，模块中的对象被引用到调用者的环境中，可以直接对其访问，而不需要添加模块前缀。这是方式的导入会将模块中的对象直接添加到调用者的符合表里，并会覆盖调用者符号表里的同名对象。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> a</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>a</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> abc</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">ImportError: cannot <span class="keyword">import</span> name <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> b</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line"><span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>module</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">NameError: name <span class="string">'module'</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> module <span class="keyword">import</span> Test</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t = Test()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>t.print_desc()</div><div class="line">Test</div></pre></td></tr></table></figure>
<p>针对导入对象名称较长问题，也可以使用<code>from ... import ... as ...</code>对导入的对象进行重命名，这种方式也可以用来解决导入对象带来的名称冲突。</p>
<h3 id="2-3-from-import"><a href="#2-3-from-import" class="headerlink" title="2.3 from  import *"></a>2.3 from <module_name> import *</module_name></h3><p><code>from &lt;module_name&gt; import *</code>命令可以无差别导入模块中的大部分对象（下划线开头的部分除外），风险较高且代码阅读不直观，因此这里不对其进行详细介绍，也不推荐这种使用方式。</p>
<h3 id="2-4-dir"><a href="#2-4-dir" class="headerlink" title="2.4 dir()"></a>2.4 dir()</h3><p>Python内置函数<code>dir()</code>会返回命名空间定义的名称列表，通过<code>dir()</code>函数可以查看导入声明前后局部符号表的变化情况，也可以用来查看模块中定义的对象，示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;]</div><div class="line">&gt;&gt;&gt; a = [1, 2]</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;]</div><div class="line">&gt;&gt;&gt; from module import b</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;]</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;, &apos;module&apos;]</div><div class="line">&gt;&gt;&gt; from module import Test as t</div><div class="line">&gt;&gt;&gt; dir()</div><div class="line">[&apos;__annotations__&apos;, &apos;__builtins__&apos;, &apos;__doc__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;, &apos;module&apos;, &apos;t&apos;]</div><div class="line">&gt;&gt;&gt; dir(module)</div><div class="line">[&apos;Test&apos;, &apos;__builtins__&apos;, &apos;__cached__&apos;, &apos;__doc__&apos;, &apos;__file__&apos;, &apos;__loader__&apos;, &apos;__name__&apos;, &apos;__package__&apos;, &apos;__spec__&apos;, &apos;a&apos;, &apos;b&apos;]</div><div class="line">&gt;&gt;&gt; dir(module.Test)</div><div class="line">[&apos;__class__&apos;, &apos;__delattr__&apos;, &apos;__dict__&apos;, &apos;__dir__&apos;, &apos;__doc__&apos;, &apos;__eq__&apos;, &apos;__format__&apos;, &apos;__ge__&apos;, &apos;__getattribute__&apos;, &apos;__gt__&apos;, &apos;__hash__&apos;, &apos;__init__&apos;, &apos;__init_subclass__&apos;, &apos;__le__&apos;, &apos;__lt__&apos;, &apos;__module__&apos;, &apos;__ne__&apos;, &apos;__new__&apos;, &apos;__reduce__&apos;, &apos;__reduce_ex__&apos;, &apos;__repr__&apos;, &apos;__setattr__&apos;, &apos;__sizeof__&apos;, &apos;__str__&apos;, &apos;__subclasshook__&apos;, &apos;__weakref__&apos;, &apos;print_desc&apos;]</div></pre></td></tr></table></figure>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p><a href="https://realpython.com/absolute-vs-relative-python-imports/" target="_blank" rel="external">https://realpython.com/absolute-vs-relative-python-imports/</a></p>
</li>
<li><p><a href="https://realpython.com/python-modules-packages/" target="_blank" rel="external">https://realpython.com/python-modules-packages/</a></p>
</li>
<li><p><a href="https://docs.python.org/3/reference/import.html" target="_blank" rel="external">https://docs.python.org/3/reference/import.html</a></p>
</li>
<li><p><a href="https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import" target="_blank" rel="external">https://stackoverflow.com/questions/710551/use-import-module-or-from-module-import</a></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python的import vs from ... import
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>玩转pytorch中的torchvision.transforms</title>
    <link href="http://noahsnail.com/2020/06/12/2020-06-12-%E7%8E%A9%E8%BD%ACpytorch%E4%B8%AD%E7%9A%84torchvision.transforms/"/>
    <id>http://noahsnail.com/2020/06/12/2020-06-12-玩转pytorch中的torchvision.transforms/</id>
    <published>2020-06-12T01:54:25.000Z</published>
    <updated>2020-06-15T08:55:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-运行环境"><a href="#0-运行环境" class="headerlink" title="0. 运行环境"></a>0. 运行环境</h2><p>python 3.6.8, pytorch 1.5.0</p>
<h2 id="1-torchvision-transforms"><a href="#1-torchvision-transforms" class="headerlink" title="1. torchvision.transforms"></a>1. torchvision.transforms</h2><p>在深度学习中，计算机视觉(CV)是其中的一大方向，而在CV任务中，图像变换(Image Transform)通常是必不可少的一环，其可以用来对图像进行预处理，数据增强等。本文主要整理PyTorch中<code>torchvision.transforms</code>提供的一些功能(代码加示例)。具体定义及参数可参考<a href="https://pytorch.org/docs/stable/torchvision/transforms.html" target="_blank" rel="external">PyTorch文档</a>。</p>
<h3 id="1-1-torchvision-transforms-Compose"><a href="#1-1-torchvision-transforms-Compose" class="headerlink" title="1.1 torchvision.transforms.Compose"></a>1.1 torchvision.transforms.Compose</h3><p><code>Compose</code>的主要作用是将多个变换组合在一起，具体用法可参考2.5。下面的示例结果左边为原图，右边为保存的结果。</p>
<h2 id="2-Transforms-on-PIL-Image"><a href="#2-Transforms-on-PIL-Image" class="headerlink" title="2. Transforms on PIL Image"></a>2. Transforms on PIL Image</h2><p>这部分主要是对Python最常用的图像处理库Pillow中Image的处理。基本环境及图像如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> torchvision.transforms <span class="keyword">as</span> transforms</div><div class="line"></div><div class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">img = Image.open(<span class="string">'tina.jpg'</span>)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="comment"># Save image</span></div><div class="line">img.save(<span class="string">'image.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/tina.jpg" alt="Demo"></p>
<h3 id="2-1-torchvision-transforms-CenterCrop-size"><a href="#2-1-torchvision-transforms-CenterCrop-size" class="headerlink" title="2.1 torchvision.transforms.CenterCrop(size)"></a>2.1 torchvision.transforms.CenterCrop(size)</h3><p><code>CenterCrop</code>的作用是从图像的中心位置裁剪指定大小的图像。例如一些神经网络的输入图像大小为<code>224*224</code>，而训练图像的大小为<code>256*256</code>，此时就需要对训练图像进行裁剪。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.CenterCrop(size)</div><div class="line">center_crop = transform(img)</div><div class="line">center_crop.save(<span class="string">'center_crop.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/center_crop.jpg" alt="CenterCrop"></p>
<h3 id="2-2-torchvision-transforms-ColorJitter-brightness-0-contrast-0-saturation-0-hue-0"><a href="#2-2-torchvision-transforms-ColorJitter-brightness-0-contrast-0-saturation-0-hue-0" class="headerlink" title="2.2 torchvision.transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)"></a>2.2 torchvision.transforms.ColorJitter(brightness=0, contrast=0, saturation=0, hue=0)</h3><p><code>ColorJitter</code>的作用是随机修改图片的亮度、对比度和饱和度，常用来进行数据增强，尤其是训练图像类别不均衡或图像数量较少时。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">brightness = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">contrast = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">saturation = (<span class="number">1</span>, <span class="number">10</span>)</div><div class="line">hue = (<span class="number">0.2</span>, <span class="number">0.4</span>)</div><div class="line">transform = transforms.ColorJitter(brightness, contrast, saturation, hue)</div><div class="line">color_jitter = transform(img)</div><div class="line">color_jitter.save(<span class="string">'color_jitter.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/color_jitter.jpg" alt="ColorJitter"></p>
<h3 id="2-3-torchvision-transforms-FiveCrop-size"><a href="#2-3-torchvision-transforms-FiveCrop-size" class="headerlink" title="2.3 torchvision.transforms.FiveCrop(size)"></a>2.3 torchvision.transforms.FiveCrop(size)</h3><p><code>FiveCrop</code>的作用是分别从图像的四个角以及中心进行五次裁剪，图像分类评估时分为<code>Singl Crop Evaluation/Test</code>和<code>Multi Crop Evaluation/Test</code>，<code>FiveCrop</code>可以用在<code>Multi Crop Evaluation/Test</code>中。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.FiveCrop(size)</div><div class="line">five_crop = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/five_crop.jpg" alt="FiveCrop"></p>
<h3 id="2-4-torchvision-transforms-Grayscale-num-output-channels-1"><a href="#2-4-torchvision-transforms-Grayscale-num-output-channels-1" class="headerlink" title="2.4 torchvision.transforms.Grayscale(num_output_channels=1)"></a>2.4 torchvision.transforms.Grayscale(num_output_channels=1)</h3><p><code>Grayscale</code>的作用是将图像转换为灰度图像，默认通道数为1，通道数为3时，RGB三个通道的值相等。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">transform = transforms.Grayscale()</div><div class="line">grayscale = transform(img)</div><div class="line">grayscale.save(<span class="string">'grayscale.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/grayscale.jpg" alt="Grayscale"></p>
<h3 id="2-5-torchvision-transforms-Pad-padding-fill-0-padding-mode-’constant’"><a href="#2-5-torchvision-transforms-Pad-padding-fill-0-padding-mode-’constant’" class="headerlink" title="2.5 torchvision.transforms.Pad(padding, fill=0, padding_mode=’constant’)"></a>2.5 torchvision.transforms.Pad(padding, fill=0, padding_mode=’constant’)</h3><p><code>Pad</code>的作用是对图像进行填充，可以设置要填充的值及填充的大小，默认是图像四边都填充。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.Compose([</div><div class="line">        transforms.CenterCrop(size),</div><div class="line">        transforms.Pad(padding, fill)</div><div class="line">])</div><div class="line">pad = transform(img)</div><div class="line">pad.save(<span class="string">'pad.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/pad.jpg" alt="Pad"></p>
<h3 id="2-6-torchvision-transforms-RandomAffine-degrees-translate-None-scale-None-shear-None-resample-False-fillcolor-0"><a href="#2-6-torchvision-transforms-RandomAffine-degrees-translate-None-scale-None-shear-None-resample-False-fillcolor-0" class="headerlink" title="2.6 torchvision.transforms.RandomAffine(degrees, translate=None, scale=None, shear=None, resample=False, fillcolor=0)"></a>2.6 torchvision.transforms.RandomAffine(degrees, translate=None, scale=None, shear=None, resample=False, fillcolor=0)</h3><p><code>RandomAffine</code>的作用是保持图像中心不变的情况下对图像进行随机的仿射变换。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">translate=(<span class="number">0</span>, <span class="number">0.2</span>)</div><div class="line">scale=(<span class="number">0.8</span>, <span class="number">1</span>)</div><div class="line">fillcolor = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomAffine(degrees=degrees, translate=translate, scale=scale, fillcolor=fillcolor)</div><div class="line">random_affine = transform(img)</div><div class="line">random_affine.save(<span class="string">'random_affine.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_affine.jpg" alt="RandomAffine"></p>
<h3 id="2-7-torchvision-transforms-RandomApply-transforms-p-0-5"><a href="#2-7-torchvision-transforms-RandomApply-transforms-p-0-5" class="headerlink" title="2.7 torchvision.transforms.RandomApply(transforms, p=0.5)"></a>2.7 torchvision.transforms.RandomApply(transforms, p=0.5)</h3><p><code>RandomApply</code>的作用是以一定的概率执行提供的<code>transforms</code>操作，即可能执行，也可能不执行。<code>transforms</code>可以是一个，也可以是一系列。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomApply([transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_apply = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_apply.jpg" alt="RandomApply"></p>
<h3 id="2-8-torchvision-transforms-RandomChoice-transforms"><a href="#2-8-torchvision-transforms-RandomChoice-transforms" class="headerlink" title="2.8 torchvision.transforms.RandomChoice(transforms)"></a>2.8 torchvision.transforms.RandomChoice(transforms)</h3><p><code>RandomChoice</code>的作用是从提供的<code>transforms</code>操作中随机选择一个执行。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">transform = transforms.RandomChoice([transforms.RandomAffine(degrees), transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_choice = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_choice.jpg" alt="RandomChoice"></p>
<h3 id="2-9-torchvision-transforms-RandomCrop-size-padding-None-pad-if-needed-False-fill-0-padding-mode-’constant’"><a href="#2-9-torchvision-transforms-RandomCrop-size-padding-None-pad-if-needed-False-fill-0-padding-mode-’constant’" class="headerlink" title="2.9 torchvision.transforms.RandomCrop(size, padding=None, pad_if_needed=False, fill=0, padding_mode=’constant’)"></a>2.9 torchvision.transforms.RandomCrop(size, padding=None, pad_if_needed=False, fill=0, padding_mode=’constant’)</h3><p><code>RandomCrop</code>的作用是在一个随机位置上对图像进行裁剪。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.RandomCrop(size)</div><div class="line">random_crop = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_crop.jpg" alt="RandomCrop"></p>
<h3 id="2-10-torchvision-transforms-RandomGrayscale-p-0-1"><a href="#2-10-torchvision-transforms-RandomGrayscale-p-0-1" class="headerlink" title="2.10 torchvision.transforms.RandomGrayscale(p=0.1)"></a>2.10 torchvision.transforms.RandomGrayscale(p=0.1)</h3><p><code>RandomGrayscale</code>的作用是以一定的概率将图像变为灰度图像。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">0.5</span></div><div class="line">transform = transforms.RandomGrayscale(p)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_grayscale = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_grayscale.jpg" alt="RandomGrayscale"></p>
<h3 id="2-11-torchvision-transforms-RandomHorizontalFlip-p-0-5"><a href="#2-11-torchvision-transforms-RandomHorizontalFlip-p-0-5" class="headerlink" title="2.11 torchvision.transforms.RandomHorizontalFlip(p=0.5)"></a>2.11 torchvision.transforms.RandomHorizontalFlip(p=0.5)</h3><p><code>RandomHorizontalFlip</code>的作用是以一定的概率对图像进行水平翻转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">0.5</span></div><div class="line">transform = transforms.RandomHorizontalFlip(p)</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_horizontal_filp = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_horizontal_filp.jpg" alt="RandomHorizontalFlip"></p>
<h3 id="2-12-torchvision-transforms-RandomOrder-transforms"><a href="#2-12-torchvision-transforms-RandomOrder-transforms" class="headerlink" title="2.12 torchvision.transforms.RandomOrder(transforms)"></a>2.12 torchvision.transforms.RandomOrder(transforms)</h3><p><code>RandomOrder</code>的作用是以随机顺序执行提供的<code>transforms</code>操作。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">padding = <span class="number">16</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">transform = transforms.RandomOrder([transforms.RandomAffine(degrees), transforms.CenterCrop(size), transforms.Pad(padding, fill)])</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</div><div class="line">    random_order = transform(img)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_order.jpg" alt="RandomOrder"></p>
<h3 id="2-13-torchvision-transforms-RandomPerspective-distortion-scale-0-5-p-0-5-interpolation-3-fill-0"><a href="#2-13-torchvision-transforms-RandomPerspective-distortion-scale-0-5-p-0-5-interpolation-3-fill-0" class="headerlink" title="2.13 torchvision.transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3, fill=0)"></a>2.13 torchvision.transforms.RandomPerspective(distortion_scale=0.5, p=0.5, interpolation=3, fill=0)</h3><p><code>RandomPerspective</code>的作用是以一定的概率对图像进行随机的透视变换。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">distortion_scale = <span class="number">0.5</span></div><div class="line">p = <span class="number">1</span></div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomPerspective(distortion_scale=distortion_scale, p=p, fill=fill)</div><div class="line">random_perspective = transform(img)</div><div class="line">random_perspective.save(<span class="string">'random_perspective.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_perspective.jpg" alt="RandomPerspective"></p>
<h3 id="2-14-torchvision-transforms-RandomResizedCrop-size-scale-0-08-1-0-ratio-0-75-1-3333333333333333-interpolation-2"><a href="#2-14-torchvision-transforms-RandomResizedCrop-size-scale-0-08-1-0-ratio-0-75-1-3333333333333333-interpolation-2" class="headerlink" title="2.14 torchvision.transforms.RandomResizedCrop(size, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=2)"></a>2.14 torchvision.transforms.RandomResizedCrop(size, scale=(0.08, 1.0), ratio=(0.75, 1.3333333333333333), interpolation=2)</h3><p><code>RandomResizedCrop</code>的作用是以随机大小和随机长宽比裁剪图像并缩放到指定的大小。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">256</span>, <span class="number">256</span>)</div><div class="line">scale=(<span class="number">0.8</span>, <span class="number">1.0</span>)</div><div class="line">ratio=(<span class="number">0.75</span>, <span class="number">1.0</span>)</div><div class="line">transform = transforms.RandomResizedCrop(size=size, scale=scale, ratio=ratio)</div><div class="line">random_resized_crop = transform(img)</div><div class="line">random_resized_crop.save(<span class="string">'random_resized_crop.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_resized_crop.jpg" alt="RandomResizedCrop"></p>
<h3 id="2-15-torchvision-transforms-RandomRotation-degrees-resample-False-expand-False-center-None-fill-None"><a href="#2-15-torchvision-transforms-RandomRotation-degrees-resample-False-expand-False-center-None-fill-None" class="headerlink" title="2.15 torchvision.transforms.RandomRotation(degrees, resample=False, expand=False, center=None, fill=None)"></a>2.15 torchvision.transforms.RandomRotation(degrees, resample=False, expand=False, center=None, fill=None)</h3><p><code>RandomRotation</code>的作用是对图像进行随机旋转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">degrees = (<span class="number">15</span>, <span class="number">30</span>)</div><div class="line">fill = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line">transform = transforms.RandomRotation(degrees=degrees, fill=fill)</div><div class="line">random_rotation = transform(img)</div><div class="line">random_rotation.save(<span class="string">'random_rotation.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_rotation.jpg" alt="RandomRotation"></p>
<h3 id="2-16-torchvision-transforms-RandomSizedCrop-args-kwargs"><a href="#2-16-torchvision-transforms-RandomSizedCrop-args-kwargs" class="headerlink" title="2.16 torchvision.transforms.RandomSizedCrop(args, *kwargs)"></a>2.16 torchvision.transforms.RandomSizedCrop(<em>args, *</em>kwargs)</h3><p>已废弃，参见<code>RandomResizedCrop</code>。</p>
<h3 id="2-17-torchvision-transforms-RandomVerticalFlip-p-0-5"><a href="#2-17-torchvision-transforms-RandomVerticalFlip-p-0-5" class="headerlink" title="2.17 torchvision.transforms.RandomVerticalFlip(p=0.5)"></a>2.17 torchvision.transforms.RandomVerticalFlip(p=0.5)</h3><p><code>RandomVerticalFlip</code>的作用是以一定的概率对图像进行垂直翻转。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">1</span></div><div class="line">transform = transforms.RandomVerticalFlip(p)</div><div class="line">random_vertical_filp = transform(img)</div><div class="line">random_vertical_filp.save(<span class="string">'random_vertical_filp.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_vertical_filp.jpg" alt="RandomVerticalFlip"></p>
<h3 id="2-18-torchvision-transforms-Resize-size-interpolation-2"><a href="#2-18-torchvision-transforms-Resize-size-interpolation-2" class="headerlink" title="2.18 torchvision.transforms.Resize(size, interpolation=2)"></a>2.18 torchvision.transforms.Resize(size, interpolation=2)</h3><p><code>Resize</code>的作用是对图像进行缩放。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">size = (<span class="number">224</span>, <span class="number">224</span>)</div><div class="line">transform = transforms.Resize(size)</div><div class="line">resize_img = transform(img)</div><div class="line">resize_img.save(<span class="string">'resize_img.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/resize_img.jpg" alt="Resize"></p>
<h3 id="2-19-torchvision-transforms-Scale-args-kwargs"><a href="#2-19-torchvision-transforms-Scale-args-kwargs" class="headerlink" title="2.19 torchvision.transforms.Scale(args, *kwargs)"></a>2.19 torchvision.transforms.Scale(<em>args, *</em>kwargs)</h3><p>已废弃，参加<code>Resize</code>。</p>
<h3 id="2-20-torchvision-transforms-TenCrop-size-vertical-flip-False"><a href="#2-20-torchvision-transforms-TenCrop-size-vertical-flip-False" class="headerlink" title="2.20 torchvision.transforms.TenCrop(size, vertical_flip=False)"></a>2.20 torchvision.transforms.TenCrop(size, vertical_flip=False)</h3><p><code>TenCrop</code>与2.3类似，除了对原图裁剪5个图像之外，还对其翻转图像裁剪了5个图像。</p>
<h2 id="3-Transforms-on-torch-Tensor"><a href="#3-Transforms-on-torch-Tensor" class="headerlink" title="3. Transforms on torch.*Tensor"></a>3. Transforms on torch.*Tensor</h2><h3 id="3-1-torchvision-transforms-LinearTransformation-transformation-matrix-mean-vector"><a href="#3-1-torchvision-transforms-LinearTransformation-transformation-matrix-mean-vector" class="headerlink" title="3.1 torchvision.transforms.LinearTransformation(transformation_matrix, mean_vector)"></a>3.1 torchvision.transforms.LinearTransformation(transformation_matrix, mean_vector)</h3><p><code>LinearTransformation</code>的作用是使用变换矩阵和离线计算的均值向量对图像张量进行变换，可以用在白化变换中，白化变换用来去除输入数据的冗余信息。常用在数据预处理中。</p>
<h3 id="3-2-torchvision-transforms-Normalize-mean-std-inplace-False"><a href="#3-2-torchvision-transforms-Normalize-mean-std-inplace-False" class="headerlink" title="3.2 torchvision.transforms.Normalize(mean, std, inplace=False)"></a>3.2 torchvision.transforms.Normalize(mean, std, inplace=False)</h3><p><code>Normalize</code>的作用是用均值和标准差对<code>Tensor</code>进行归一化处理。常用在对输入图像的预处理中，例如Imagenet竞赛的许多分类网络都对输入图像进行了归一化操作。</p>
<h3 id="3-3-torchvision-transforms-RandomErasing-p-0-5-scale-0-02-0-33-ratio-0-3-3-3-value-0-inplace-False"><a href="#3-3-torchvision-transforms-RandomErasing-p-0-5-scale-0-02-0-33-ratio-0-3-3-3-value-0-inplace-False" class="headerlink" title="3.3 torchvision.transforms.RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)"></a>3.3 torchvision.transforms.RandomErasing(p=0.5, scale=(0.02, 0.33), ratio=(0.3, 3.3), value=0, inplace=False)</h3><p><code>RandomErasing</code>的作用是随机选择图像中的一块区域，擦除其像素，主要用来进行数据增强。示例代码及结果如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">p = <span class="number">1.0</span></div><div class="line">scale = (<span class="number">0.2</span>, <span class="number">0.3</span>)</div><div class="line">ratio = (<span class="number">0.5</span>, <span class="number">1.0</span>)</div><div class="line">value = (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>)</div><div class="line"></div><div class="line">transform = transforms.Compose([</div><div class="line">                transforms.ToTensor(),</div><div class="line">                transforms.RandomErasing(p=p, scale=scale, ratio=ratio, value=value),</div><div class="line">                transforms.ToPILImage()</div><div class="line">            ])</div><div class="line">random_erasing = transform(img)</div><div class="line">random_erasing.save(<span class="string">'random_erasing.jpg'</span>)</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/random_erasing.jpg" alt="RandomErasing"></p>
<h2 id="4-Conversion-Transforms"><a href="#4-Conversion-Transforms" class="headerlink" title="4 Conversion Transforms"></a>4 Conversion Transforms</h2><h3 id="4-1-torchvision-transforms-ToPILImage-mode-None"><a href="#4-1-torchvision-transforms-ToPILImage-mode-None" class="headerlink" title="4.1 torchvision.transforms.ToPILImage(mode=None)"></a>4.1 torchvision.transforms.ToPILImage(mode=None)</h3><p><code>ToPILImage</code>的作用是将pytorch的<code>Tensor</code>或<code>numpy.ndarray</code>转为PIL的Image。示例代码及结果如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">img = Image.open('tina.jpg')</div><div class="line">transform = transforms.ToTensor()</div><div class="line">img = transform(img)</div><div class="line">print(img.size())</div><div class="line">img_r = img[0, :, :]</div><div class="line">img_g = img[1, :, :]</div><div class="line">img_b = img[2, :, :]</div><div class="line">print(type(img_r))</div><div class="line">print(img_r.size())</div><div class="line">transform = transforms.ToPILImage()</div><div class="line">img_r = transform(img_r)</div><div class="line">img_g = transform(img_g)</div><div class="line">img_b = transform(img_b)</div><div class="line">print(type(img_r))</div><div class="line">img_r.save('img_r.jpg')</div><div class="line">img_g.save('img_g.jpg')</div><div class="line">img_b.save('img_b.jpg')</div><div class="line"></div><div class="line"># output</div><div class="line">torch.Size([3, 256, 256])</div><div class="line">&lt;class 'torch.Tensor'&gt;</div><div class="line">torch.Size([256, 256])</div><div class="line">&lt;class 'PIL.Image.Image'&gt;</div></pre></td></tr></table></figure>
<p><img src="http://noahsnail.com/images/transform/pil_img.jpg" alt="ToPILImage"></p>
<h3 id="4-2-torchvision-transforms-ToTensor"><a href="#4-2-torchvision-transforms-ToTensor" class="headerlink" title="4.2 torchvision.transforms.ToTensor"></a>4.2 torchvision.transforms.ToTensor</h3><p><code>ToTensor</code>的作用是将<code>PIL Image</code>或<code>numpy.ndarray</code>转为pytorch的<code>Tensor</code>，并会将像素值由<code>[0, 255]</code>变为<code>[0, 1]</code>之间。通常是在神经网络训练中读取输入图像之后使用。示例代码如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">img = Image.open('tina.jpg')</div><div class="line">print(type(img))</div><div class="line">print(img.size)</div><div class="line">transform = transforms.ToTensor()</div><div class="line">img = transform(img)</div><div class="line">print(type(img))</div><div class="line">print(img.size())</div><div class="line"></div><div class="line"># output</div><div class="line">&lt;class 'PIL.JpegImagePlugin.JpegImageFile'&gt;</div><div class="line">(256, 256)</div><div class="line">&lt;class 'torch.Tensor'&gt;</div><div class="line">torch.Size([3, 256, 256])</div></pre></td></tr></table></figure>
<h2 id="5-Code"><a href="#5-Code" class="headerlink" title="5. Code"></a>5. Code</h2><p>代码参见<a href="https://github.com/SnailTyan/deep-learning-tools/blob/master/transforms.py" target="_blank" rel="external">https://github.com/SnailTyan/deep-learning-tools/blob/master/transforms.py</a>。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://pytorch.org/docs/stable/torchvision/transforms.html" target="_blank" rel="external">https://pytorch.org/docs/stable/torchvision/transforms.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      玩转pytorch中的torchvision.transforms
    
    </summary>
    
      <category term="PyTorch" scheme="http://noahsnail.com/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://noahsnail.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Python中的list(), dict(), [], {}</title>
    <link href="http://noahsnail.com/2020/06/03/2020-06-03-Python%E4%B8%AD%E7%9A%84list(),%20dict(),%20%5B%5D,%20%7B%7D/"/>
    <id>http://noahsnail.com/2020/06/03/2020-06-03-Python中的list(), dict(), [], {}/</id>
    <published>2020-06-03T06:50:15.000Z</published>
    <updated>2020-06-03T09:17:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1. 引言"></a>1. 引言</h2><p>在Python中，<code>list</code>，<code>dict</code>作为Python的基础数据结构，经常会用到，其定义形式通常有下面两种：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">a = []</div><div class="line">b = list()</div><div class="line"></div><div class="line">c = &#123;&#125;</div><div class="line">d = dict()</div></pre></td></tr></table></figure>
<p>二者有什么区别呢？</p>
<h2 id="2-list-vs-，dict-vs"><a href="#2-list-vs-，dict-vs" class="headerlink" title="2. list() vs []，dict() vs {}"></a>2. <code>list()</code> vs <code>[]</code>，<code>dict()</code> vs <code>{}</code></h2><ul>
<li>运行时间</li>
</ul>
<p>首先比较一下二者的运行时间，<code>timeit</code>模块主要用来测量Python小段代码的执行时间，默认执行100万次。代码如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> timeit <span class="keyword">import</span> timeit</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'[]'</span>)</div><div class="line"><span class="number">0.05389202758669853</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'list()'</span>)</div><div class="line"><span class="number">0.1250211838632822</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'&#123;&#125;'</span>)</div><div class="line"><span class="number">0.06583642773330212</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>timeit(<span class="string">'dict()'</span>)</div><div class="line"><span class="number">0.1366278938949108</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>type(&#123;&#125;)</div><div class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt;</span></div></pre></td></tr></table></figure>
<p>从时间上来看，明显<code>[]</code>与<code>{}</code>的定义形式更快。</p>
<ul>
<li>数据类型转换</li>
</ul>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b = [a]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = list(a)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">[(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>s = <span class="string">'abc'</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x = [s]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y = list(s)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>x</div><div class="line">[<span class="string">'abc'</span>]</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>y</div><div class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，<code>list()</code>除了可以定义之外，还可以对将其它数据类型转换为<code>list</code>，而<code>[]</code>则没有数据类型转换的功能。</p>
<h2 id="3-为什么-比list-更快"><a href="#3-为什么-比list-更快" class="headerlink" title="3. 为什么[]比list()更快"></a>3. 为什么<code>[]</code>比<code>list()</code>更快</h2><p>dis库是Python自带的一个库，可以用来分析字节码，而字节码是CPython解释器的实现细节。<code>[]</code>，<code>list()</code>的字节码对比如下：</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> dis</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(<span class="keyword">lambda</span> : [])</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> BUILD_LIST               <span class="number">0</span></div><div class="line">              <span class="number">2</span> RETURN_VALUE</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>dis.dis(<span class="keyword">lambda</span> : list())</div><div class="line">  <span class="number">1</span>           <span class="number">0</span> LOAD_GLOBAL              <span class="number">0</span> (list)</div><div class="line">              <span class="number">2</span> CALL_FUNCTION            <span class="number">0</span></div><div class="line">              <span class="number">4</span> RETURN_VALUE</div></pre></td></tr></table></figure>
<p>从上面的代码可以看出，<code>list()</code>有符号查找和函数调用的开销，因此其速度更慢。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><code>[]</code>，<code>{}</code>定义数据类型速度更快，<code>list()</code>，<code>dict()</code>除了能定义数据类型之外，还可以对数据进行类型转换。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>1.<a href="https://stackoverflow.com/questions/5790860/and-vs-list-and-dict-which-is-better" target="_blank" rel="external">https://stackoverflow.com/questions/5790860/and-vs-list-and-dict-which-is-better</a></p>
<p>2.<a href="https://www.quora.com/In-Python-any-difference-between-using-and-list-or-between-and-dict" target="_blank" rel="external">https://www.quora.com/In-Python-any-difference-between-using-and-list-or-between-and-dict</a></p>
<p>3.<a href="https://docs.python.org/zh-cn/3/library/timeit.html" target="_blank" rel="external">https://docs.python.org/zh-cn/3/library/timeit.html</a></p>
<p>4.<a href="https://docs.python.org/zh-cn/3/library/dis.html" target="_blank" rel="external">https://docs.python.org/zh-cn/3/library/dis.html</a></p>
<p>5.<a href="https://stackoverflow.com/questions/30216000/why-is-faster-than-list" target="_blank" rel="external">https://stackoverflow.com/questions/30216000/why-is-faster-than-list</a></p>
]]></content>
    
    <summary type="html">
    
      Python中的list(), dict(), [], {}
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Pytorch中requires_grad_(), detach(), torch.no_grad()的区别</title>
    <link href="http://noahsnail.com/2020/05/29/2020-05-29-Pytorch%E4%B8%ADrequires_grad_(),%20detach(),%20torch.no_grad()%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://noahsnail.com/2020/05/29/2020-05-29-Pytorch中requires_grad_(), detach(), torch.no_grad()的区别/</id>
    <published>2020-05-29T02:44:02.000Z</published>
    <updated>2020-05-29T08:58:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="0-测试环境"><a href="#0-测试环境" class="headerlink" title="0. 测试环境"></a>0. 测试环境</h2><p>Python 3.6.9, Pytorch 1.5.0</p>
<h2 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h2><p><code>Tensor</code>是一个多维矩阵，其中包含所有的元素为同一数据类型。默认数据类型为<code>torch.float32</code>。</p>
<ul>
<li>示例一</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0])</div><div class="line">&gt;&gt;&gt; a.data</div><div class="line">tensor([1.])</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; a.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a.dtype</div><div class="line">torch.float32</div><div class="line">&gt;&gt;&gt; a.item()</div><div class="line">1.0</div><div class="line">&gt;&gt;&gt; type(a.item())</div><div class="line">&lt;class &apos;float&apos;&gt;</div></pre></td></tr></table></figure>
<p><code>Tensor</code>中只有一个数字时，使用<code>torch.Tensor.item()</code>可以得到一个Python数字。<code>requires_grad</code>为<code>True</code>时，表示需要计算<code>Tensor</code>的梯度。<code>requires_grad=False</code>可以用来冻结部分网络，只更新另一部分网络的参数。</p>
<ul>
<li>示例二</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0, 2.0])</div><div class="line">&gt;&gt;&gt; b = a.data</div><div class="line">&gt;&gt;&gt; id(b)</div><div class="line">139808984381768</div><div class="line">&gt;&gt;&gt; id(a)</div><div class="line">139811772112328</div><div class="line">&gt;&gt;&gt; b.grad</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; b[0] = 5.0</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([5., 2.])</div><div class="line">&gt;&gt;&gt; a</div><div class="line">tensor([5., 2.])</div></pre></td></tr></table></figure>
<p><code>a.data</code>返回的是一个新的<code>Tensor</code>对象<code>b</code>，<code>a, b</code>的<code>id</code>不同，说明二者不是同一个<code>Tensor</code>，但<code>b</code>与<code>a</code>共享数据的存储空间，即二者的数据部分指向同一块内存，因此修改<code>b</code>的元素时，<code>a</code>的元素也对应修改。</p>
<h2 id="2-requiresgrad-与detach"><a href="#2-requiresgrad-与detach" class="headerlink" title="2. requiresgrad()与detach()"></a>2. requires<em>grad</em>()与detach()</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = torch.tensor([1.0, 2.0])</div><div class="line">&gt;&gt;&gt; a.data</div><div class="line">tensor([1., 2.])</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">&gt;&gt;&gt; a.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a.requires_grad_()</div><div class="line">tensor([1., 2.], requires_grad=True)</div><div class="line">&gt;&gt;&gt; c = a.pow(2).sum()</div><div class="line">&gt;&gt;&gt; c.backward()</div><div class="line">&gt;&gt;&gt; a.grad</div><div class="line">tensor([2., 4.])</div><div class="line">&gt;&gt;&gt; b = a.detach()</div><div class="line">&gt;&gt;&gt; b.grad</div><div class="line">&gt;&gt;&gt; b.requires_grad</div><div class="line">False</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([1., 2.])</div><div class="line">&gt;&gt;&gt; b[0] = 6</div><div class="line">&gt;&gt;&gt; b</div><div class="line">tensor([6., 2.])</div><div class="line">&gt;&gt;&gt; a</div><div class="line">tensor([6., 2.], requires_grad=True)</div></pre></td></tr></table></figure>
<ul>
<li><code>requires_grad_()</code></li>
</ul>
<p><code>requires_grad_()</code>函数会改变<code>Tensor</code>的<code>requires_grad</code>属性并返回<code>Tensor</code>，修改<code>requires_grad</code>的操作是原位操作(in place)。其默认参数为<code>requires_grad=True</code>。<code>requires_grad=True</code>时，自动求导会记录对<code>Tensor</code>的操作，<code>requires_grad_()</code>的主要用途是告诉自动求导开始记录对<code>Tensor</code>的操作。</p>
<ul>
<li><code>detach()</code></li>
</ul>
<p><code>detach()</code>函数会返回一个新的<code>Tensor</code>对象<code>b</code>，并且新<code>Tensor</code>是与当前的计算图分离的，其<code>requires_grad</code>属性为<code>False</code>，反向传播时不会计算其梯度。<code>b</code>与<code>a</code>共享数据的存储空间，二者指向同一块内存。</p>
<p><strong>注</strong>：共享内存空间只是共享的数据部分，<code>a.grad</code>与<code>b.grad</code>是不同的。</p>
<h2 id="3-torch-no-grad"><a href="#3-torch-no-grad" class="headerlink" title="3. torch.no_grad()"></a>3. torch.no_grad()</h2><p><code>torch.no_grad()</code>是一个上下文管理器，用来禁止梯度的计算，通常用来网络推断中，它可以减少计算内存的使用量。</p>
<figure class="highlight python"><figcaption><span>3</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&gt;&gt;&gt; </span>a = torch.tensor([<span class="number">1.0</span>, <span class="number">2.0</span>], requires_grad=<span class="keyword">True</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">with</span> torch.no_grad():</div><div class="line"><span class="meta">... </span>    b = n.pow(<span class="number">2</span>).sum()</div><div class="line">...</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b</div><div class="line">tensor(<span class="number">5.</span>)</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>b.requires_grad</div><div class="line"><span class="keyword">False</span></div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c = a.pow(<span class="number">2</span>).sum()</div><div class="line"><span class="meta">&gt;&gt;&gt; </span>c.requires_grad</div><div class="line"><span class="keyword">True</span></div></pre></td></tr></table></figure>
<p>上面的例子中，当<code>a</code>的<code>requires_grad=True</code>时，不使用<code>torch.no_grad()</code>，<code>c.requires_grad</code>为<code>True</code>，使用<code>torch.no_grad()</code>时，<code>b.requires_grad</code>为<code>False</code>，当不需要进行反向传播时（推断）或不需要计算梯度（网络输入）时，<code>requires_grad=True</code>会占用更多的计算资源及存储资源。</p>
<h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4. 总结"></a>4. 总结</h2><p><code>requires_grad_()</code>会修改<code>Tensor</code>的<code>requires_grad</code>属性。</p>
<p><code>detach()</code>会返回一个与计算图分离的新<code>Tensor</code>，新<code>Tensor</code>不会在反向传播中计算梯度，会在特定场合使用。</p>
<p><code>torch.no_grad()</code>更节省计算资源和存储资源，其作用域范围内的操作不会构建计算图，常用在网络推断中。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><a href="https://pytorch.org/docs/stable/tensors.html" target="_blank" rel="external">https://pytorch.org/docs/stable/tensors.html</a></li>
<li><a href="https://pytorch.org/docs/stable/tensors.html#torch.Tensor.requires_grad_" target="_blank" rel="external">https://pytorch.org/docs/stable/tensors.html#torch.Tensor.requires<em>grad</em></a></li>
<li><a href="https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach" target="_blank" rel="external">https://pytorch.org/docs/stable/autograd.html#torch.Tensor.detach</a></li>
<li><a href="https://pytorch.org/docs/master/generated/torch.no_grad.html" target="_blank" rel="external">https://pytorch.org/docs/master/generated/torch.no_grad.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Pytorch中requires_grad_(), detach(), torch.no_grad()的区别
    
    </summary>
    
      <category term="PyTorch" scheme="http://noahsnail.com/categories/PyTorch/"/>
    
    
      <category term="PyTorch" scheme="http://noahsnail.com/tags/PyTorch/"/>
    
  </entry>
  
  <entry>
    <title>Python的&quot;is None&quot; vs &quot;==None&quot;</title>
    <link href="http://noahsnail.com/2020/05/25/2020-05-25-Python%E7%9A%84is%20None%20vs%20==None/"/>
    <id>http://noahsnail.com/2020/05/25/2020-05-25-Python的is None vs ==None/</id>
    <published>2020-05-25T08:21:15.000Z</published>
    <updated>2020-05-25T09:13:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<h2 id="1-is-vs"><a href="#1-is-vs" class="headerlink" title="1. is vs =="></a>1. <code>is</code> vs <code>==</code></h2><p>想要弄清楚<code>is None</code>和<code>==None</code>的区别，首先要清楚<code>==</code>和<code>is</code>的区别。<code>==</code>和<code>is</code>的区别如下：</p>
<ul>
<li><p><code>is</code><br>“is”运算符主要是用来比较两个操作对象的引用是否是同一个，指向的是否是同一块内存，比较的是对象的id。</p>
</li>
<li><p><code>==</code><br><code>==</code>运算符主要是用来比较两个操作对象之间是否相等，比较的是值(Value)相等，默认会调用对象的<code>__eq__()</code>方法。</p>
</li>
</ul>
<p>测试环境为Python 3.6.9，测试如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&gt;&gt;&gt; a = [1]</div><div class="line">&gt;&gt;&gt; b = [1]</div><div class="line">&gt;&gt;&gt; c = a</div><div class="line">&gt;&gt;&gt; id(a)</div><div class="line">140466547692424</div><div class="line">&gt;&gt;&gt; id(b)</div><div class="line">140466547695112</div><div class="line">&gt;&gt;&gt; id(c)</div><div class="line">140466547692424</div><div class="line">&gt;&gt;&gt; a == b</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a is b</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a == c</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a is c</div><div class="line">True</div></pre></td></tr></table></figure>
<p>注：id()函数返回对象的唯一标识符，用于获取对象的内存地址。</p>
<h2 id="2-is-None-vs-None"><a href="#2-is-None-vs-None" class="headerlink" title="2. is None vs == None"></a>2. <code>is None</code> vs <code>== None</code></h2><p>清楚了<code>==</code>与<code>is</code>的区别，就知道”==None”是<code>True</code>还是<code>False</code>是由对象的<code>__eq__()</code>方法决定的。测试代码如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">class Foo:</div><div class="line">    def __eq__(self, other):</div><div class="line">        return True</div><div class="line"></div><div class="line">&gt;&gt;&gt; a = Foo()</div><div class="line">&gt;&gt;&gt; b = None</div><div class="line">&gt;&gt;&gt; a == b</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a is None</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a == b</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a is b</div><div class="line">False</div><div class="line">&gt;&gt;&gt; a == None</div><div class="line">True</div><div class="line">&gt;&gt;&gt; a is None</div><div class="line">False</div><div class="line">&gt;&gt;&gt; b == None</div><div class="line">True</div><div class="line">&gt;&gt;&gt; b is None</div><div class="line">True</div><div class="line">&gt;&gt;&gt; id(a)</div><div class="line">140466547708592</div><div class="line">&gt;&gt;&gt; id(b)</div><div class="line">10306432</div><div class="line">&gt;&gt;&gt; id(None)</div><div class="line">10306432</div></pre></td></tr></table></figure>
<p>在上面的代码中，<code>a</code>与任何对象的<code>==</code>比较都为<code>True</code>。</p>
<p>注：理解<code>is None</code>和<code>== None</code>可以这样写代码测试，但根据PEP 8规范，比较单例时，例如<code>None</code>，应该使用<code>is</code>或<code>is not</code>，不能使用<code>==</code>。</p>
<h2 id="3-总结"><a href="#3-总结" class="headerlink" title="3. 总结"></a>3. 总结</h2><p>当进行值比较时，使用<code>==</code>，比较内存地址是否相同时使用<code>is</code>。比较<code>None</code>时使用<code>is</code>或<code>is not</code>。</p>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://www.geeksforgeeks.org/difference-operator-python/" target="_blank" rel="external">https://www.geeksforgeeks.org/difference-operator-python/</a></li>
<li><a href="http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html" target="_blank" rel="external">http://jaredgrubb.blogspot.com/2009/04/python-is-none-vs-none.html</a></li>
<li><a href="https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none" target="_blank" rel="external">https://stackoverflow.com/questions/3257919/what-is-the-difference-between-is-none-and-none</a></li>
<li><a href="https://juejin.im/entry/5a3b62446fb9a0451f311b5c" target="_blank" rel="external">https://juejin.im/entry/5a3b62446fb9a0451f311b5c</a></li>
<li><a href="https://www.cjavapy.com/article/198/" target="_blank" rel="external">https://www.cjavapy.com/article/198/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      Python的&quot;is None&quot; vs &quot;==None&quot;
    
    </summary>
    
      <category term="Python" scheme="http://noahsnail.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://noahsnail.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>ESRGAN - Enhanced Super-Resolution Generative Adversarial Networks论文翻译——中英文对照</title>
    <link href="http://noahsnail.com/2020/04/13/2020-04-13-ESRGAN%20-%20Enhanced%20Super-Resolution%20Generative%20Adversarial%20Networks%E8%AE%BA%E6%96%87%E7%BF%BB%E8%AF%91%E2%80%94%E2%80%94%E4%B8%AD%E8%8B%B1%E6%96%87%E5%AF%B9%E7%85%A7/"/>
    <id>http://noahsnail.com/2020/04/13/2020-04-13-ESRGAN - Enhanced Super-Resolution Generative Adversarial Networks论文翻译——中英文对照/</id>
    <published>2020-04-13T08:49:15.000Z</published>
    <updated>2020-05-22T03:33:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>文章作者：Tyan<br>博客：<a href="http://noahsnail.com">noahsnail.com</a> &nbsp;|&nbsp; <a href="http://blog.csdn.net/quincuntial" target="_blank" rel="external">CSDN</a> &nbsp;|&nbsp; <a href="http://www.jianshu.com/users/7731e83f3a4e/latest_articles" target="_blank" rel="external">简书</a></p>
<p><strong>声明：作者翻译论文仅为学习，如有侵权请联系作者删除博文，谢谢！</strong></p>
<p>翻译论文汇总：<a href="https://github.com/SnailTyan/deep-learning-papers-translation" target="_blank" rel="external">https://github.com/SnailTyan/deep-learning-papers-translation</a></p>
<h1 id="ESRGAN-Enhanced-Super-Resolution-Generative-Adversarial-Networks"><a href="#ESRGAN-Enhanced-Super-Resolution-Generative-Adversarial-Networks" class="headerlink" title="ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks"></a>ESRGAN: Enhanced Super-Resolution Generative Adversarial Networks</h1><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>The Super-Resolution Generative Adversarial Network (SR-GAN) [1] is a seminal work that is capable of generating realistic textures during single image super-resolution. However, the hallucinated details are often accompanied with unpleasant artifacts. To further enhance the visual quality, we thoroughly study three key components of SRGAN – network architecture, adversarial loss and perceptual loss, and improve each of them to derive an Enhanced SRGAN (ESRGAN). In particular, we introduce the Residual-in-Residual Dense Block (RRDB) without batch normalization as the basic network building unit. Moreover, we borrow the idea from relativistic GAN [2] to let the discriminator predict relative realness instead of the absolute value. Finally, we improve the perceptual loss by using the features before activation, which could provide stronger supervision for brightness consistency and texture recovery. Benefiting from these improvements, the proposed ESRGAN achieves consistently better visual quality with more realistic and natural textures than SRGAN and won the first place in the PIRM2018-SR Challenge [3]. The code is available at <a href="https://github.com/xinntao/ESRGAN" target="_blank" rel="external">https://github.com/xinntao/ESRGAN</a>.</p>
<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>超分辨率生成对抗网络(SR-GAN)[1]是一项开创性的工作，其能够在单图像超分辨率期间生成逼真的纹理。然而，虚幻的细节常常伴随讨厌的伪像。为了进一步增强视觉质量，我们充分研究了SRGAN的三个关键组成部分——网络架构、对抗损失和感知损失，并对每一个都进行了改进以取得增强的SRGAN(ESRGAN)。特别的是，我们引入了没有批归一化的Residual-in-Residual Dense Block(RRDB)作为基本的网络构架单元。此外，我们借鉴了相对GAN[2]中的思想，让判别器预测相对真实性而不是绝对值。最后，我们通过使用激活前的特征改进感知损失，这可以对亮度一致性和纹理复原提供更强的监督。得益于这些改进，相比于SRGAN，提出的ESRGAN一致地取得了更好的视觉质量、更多真实自然的纹理，并在PIRM2018-SR Challenge[3]中获得了第一名。源码地址：<a href="https://github.com/xinntao/ESRGAN" target="_blank" rel="external">https://github.com/xinntao/ESRGAN</a>。</p>
<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h2><p>Single image super-resolution (SISR), as a fundamental low-level vision problem, has attracted increasing attention in the research community and AI companies. SISR aims at recovering a high-resolution (HR) image from a single low-resolution (LR) one. Since the pioneer work of SRCNN proposed by Dong et al. [4], deep convolution neural network (CNN) approaches have brought prosperous development. Various network architecture designs and training strategies have continuously improved the SR performance, especially the Peak Signal-toNoise Ratio (PSNR) value [5,6,7,1,8,9,10,11,12]. However, these PSNR-oriented approaches tend to output over-smoothed results without sufficient high-frequency details, since the PSNR metric fundamentally disagrees with the subjective evaluation of human observers [1].</p>
<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1 引言"></a>1 引言</h2><p>作为一个基本的低级视觉问题，单图像超分辨率(SISR)在研究领域和AI公司中引起了越来越多的关注。SISR目标是从一张低分辨率(LR)图像复原出一张高分辨率(HR)图像。从Dong等[4]提出SRCNN的开创性工作以来，深度卷积神经网络(CNN)方法带来了繁荣的发展。各种网络架构设计和训练策略持续地改善SR性能，尤其是峰值信噪比(PSNR)的值[5,6,7,1,8,9,10,11,12]。然而，这些面向PSNR的方法趋向于输出过于平滑的结果，缺少足够的高频细节，因为PSNR度量从根本上与人类观察者的主观评价[1]不符。</p>
<p>Several perceptual-driven methods have been proposed to improve the visual quality of SR results. For instance, perceptual loss [13,14] is proposed to optimize super-resolution model in a feature space instead of pixel space. Generative adversarial network [15] is introduced to SR by [1,16] to encourage the network to favor solutions that look more like natural images. The semantic image prior is further incorporated to improve recovered texture details [17]. One of the milestones in the way pursuing visually pleasing results is SRGAN [1]. The basic model is built with residual blocks [18] and optimized using perceptual loss in a GAN framework. With all these techniques, SRGAN significantly improves the overall visual quality of reconstruction over PSNR-oriented methods.</p>
<p>已经提出了一些感知驱动的方法来改进SR结果的视觉质量。例如，提出感知损失[13,14]来优化在特征空间而不是像素空间中的超分辨率模型。[1,16]引入生成对抗网络[15]到SR中以鼓励网络支持看起来更像自然图像的解。语义图像先验被进一步合并以改善恢复的纹理细节[17]。追寻视觉愉悦效果的方法中的里程碑之一是SRGAN[1]。基本模型是用残差块构建的[18]，并在GAN框架中使用感知损失来进行优化。通过所有这些技术，与面向PSNR的方法相比，SRGAN显著改善了重建的整体视觉质量。</p>
<p>However, there still exists a clear gap between SRGAN results and the ground-truth (GT) images, as shown in Fig. 1. In this study, we revisit the key components of SRGAN and improve the model in three aspects. First, we improve the network structure by introducing the Residual-in-Residual Dense Block (RDDB), which is of higher capacity and easier to train. We also remove Batch Normalization (BN) [19] layers as in [20] and use residual scaling [21,20] and smaller initialization to facilitate training a very deep network. Second, we improve the discriminator using Relativistic average GAN (RaGAN) [2], which learns to judge “whether one image is more realistic than the other” rather than “whether one image is real or fake”. Our experiments show that this improvement helps the generator recover more realistic texture details. Third, we propose an improved perceptual loss by using the VGG features <em>before activation</em> instead of after activation as in SRGAN. We empirically find that the adjusted perceptual loss provides sharper edges and more visually pleasing results, as will be shown in Sec. 4.4. Extensive experiments show that the enhanced SRGAN, termed ESRGAN, consistently outperforms state-of-the-art methods in both sharpness and details (see Fig. 1 and Fig. 7).</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_1.jpeg" alt="Figure 1"></p>
<p>Fig.1: The super-resolution results of ×4 for SRGAN, the proposed ESRGAN and the ground-truth. ESRGAN outperforms SRGAN in sharpness and details.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_7.jpeg" alt="Figure 7"></p>
<p>Fig.7: Qualitative results of ESRGAN. ESRGAN produces more natural textures, e.g., animal fur, building structure and grass texture, and also less unpleasant artifacts, e.g., artifacts in the face by SRGAN.</p>
<p>然而，如图1所示，SRGAN结果与真实(GT)图像之间仍然存在明显的差距。在本研究中，我们重新审视SRGAN的关键组件，并在三个方面改进模型。首先，我们通过引入Residual-in-Residual Dense Block(RDDB)改进网络架构，该结构具有较高的能力且更容易训练。我们像[20]中一样也移除了批归一化(BN)[19]层，使用残差缩放[21,20]和更小的初始化来促进训练一个非常深的网络。其次，我们使用相对平均GAN(RaGAN)[2]来改进判别器，RaGAN学习判断“一张图像是否比另一张更真实”而不是“一张图像时真的还是假的”。我们的实验表明这个改进有助于生成器恢复更多的真实纹理细节。第三，我们提出了一种改进的感知损失，使用激活之前的VGG特征来代替SRGAN中激活之后的VGG特征。从经验上我们发现调整之后的感知损失提供了更清晰的边缘和视觉上更令人满意的结果，如4.4节所示。大量的实验表明增强SRGAN(称为ESRGAN)在清晰度和细节方面都始终优于最新的方法（见图1和图7）。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_1.jpeg" alt="Figure 1"></p>
<p>图1：SRGAN、提出的ESRGAN和实际的4倍超分辨率结果。ESRGAN在清晰度和细节方面优于SRGAN。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_7.jpeg" alt="Figure 7"></p>
<p>图7：ESRGAN的定性结果。ESRGAN生成了更自然的纹理，例如，动物皮毛，建筑物结构和草坪纹理，以及更少的令人不快的伪影，例如SRGAN中脸上的伪影。</p>
<p>We take a variant of ESRGAN to participate in the PIRM-SR Challenge [3]. This challenge is the first SR competition that evaluates the performance in a perceptual-quality aware manner based on [22], where the authors claim that distortion and perceptual quality are at odds with each other. The perceptual quality is judged by the non-reference measures of Ma’s score [23] and NIQE [24], i.e., perceptual index  $=\frac {1} {2}((10−Ma)+NIQE)$. A lower perceptual index represents a better perceptual quality.</p>
<p>我们采用ESRGAN的一个变种来参加PIRM-SR挑战赛[3]。这个挑战是第一个在[22]的基础上以察觉感知质量的方式评估性能的SR竞赛，[22]中作者声称失真和感知质量相互矛盾。感知质量是通过Ma分数[23]和NIQE[24]的非参考度量来判断的，即感知指数$=\frac {1} {2}((10−Ma)+NIQE)$。更低的感知指数表示更好的感知质量。</p>
<p>As shown in Fig. 2, the perception-distortion plane is divided into three regions defined by thresholds on the Root-Mean-Square Error (RMSE), and the algorithm that achieves the lowest perceptual index in each region becomes the regional champion. We mainly focus on region 3 as we aim to bring the perceptual quality to a new high. Thanks to the aforementioned improvements and some other adjustments as discussed in Sec. 4.6, our proposed ESRGAN won the first place in the PIRM-SR Challenge (region 3) with the best perceptual index.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_2.jpeg" alt="Figure 2"></p>
<p>Fig.2: Perception-distortion plane on PIRM self validation dataset. We show the baselines of EDSR [20], RCAN [12] and EnhanceNet [16], and the submitted ESRGAN model. The blue dots are produced by image interpolation.</p>
<p>如图2所示，通过均方根误差(RMSE)的阈值，将感知失真平面分成三个区域，每个区域中取得最低感知指数的算法为区域冠军。我们主要关注区域3，因为我们旨在将感知质量提升到新的高度。由于上述的改进和4.6节中讨论的一些其它调整，我们提出的ESRGAN在PIRM-SR挑战赛（区域3）中以最好的感知指数赢得了第一名。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_2.jpeg" alt="Figure 2"></p>
<p>图2：PIRM自验证集上的感知失真平面。我们展示了EDSR[20]，RCAN[12]，EnhanceNet[16]以及提交的ESRGAN模型的基准线。蓝色的点通过图像插值生成。</p>
<p>In order to balance the visual quality and RMSE/PSNR, we further propose the network interpolation strategy, which could continuously adjust the reconstruction style and smoothness. Another alternative is image interpolation, which directly interpolates images pixel by pixel. We employ this strategy to participate in region 1 and region 2. The network interpolation and image interpolation strategies and their differences are discussed in Sec. 3.4.</p>
<p>为了平衡视觉质量和RMSE/PSNR，我们进一步提出了网络插值策略，其可以持续地调整重建风格和平滑度。另一种替代方案是图像插值，其直接逐像素地插值图像。我们采用这个策略来参加区域1和区域2。网络插值和图像插值策略以及它们的差异在3.4节中讨论。</p>
<h2 id="2-Related-Work"><a href="#2-Related-Work" class="headerlink" title="2 Related Work"></a>2 Related Work</h2><p>We focus on deep neural network approaches to solve the SR problem. As a pioneer work, Dong et al. [4,25] propose SRCNN to learn the mapping from LR to HR images in an end-to-end manner, achieving superior performance against previous works. Later on, the field has witnessed a variety of network architectures, such as a deeper network with residual learning [5], Laplacian pyramid structure [6], residual blocks [1], recursive learning [7,8], densely connected network [9], deep back projection [10] and residual dense network [11]. Specifically, Lim et al. [20] propose EDSR model by removing unnecessary BN layers in the residual block and expanding the model size, which achieves significant improvement. Zhang et al. [11] propose to use effective residual dense block in SR, and they further explore a deeper network with channel attention [12], achieving the state-of-the-art PSNR performance. Besides supervised learning, other methods like reinforcement learning [26] and unsupervised learning [27] are also introduced to solve general image restoration problems.</p>
<h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2 相关工作"></a>2 相关工作</h2><p>我们专注于解决SR问题的深度神经网络方法。作为开创性工作，Dong等[4,25]提出了SRCNN以端到端的方式来学习从LR到SR图像的映射，取得了优于之前工作的性能。后来，这个领域见证了各种网络架构，例如具有残差学习的神经网络[5]，拉普拉斯金字塔结构[6]，残差块[1]，递归学习[7,8]，密集连接网络[9]，深度反向投影[10]和残差密集网络[11]。具体来说，Lim等[20]通过移除残差块中不必要的BN层以及扩展模型尺寸提出了EDSR模型，取得了显著的改善。Zhang等[11]在SR中提出了使用有效的残差密集块，并且他们进一步开发了一个使用通道注意力[12]的更深网络，取得了最佳的PSNR性能。除了监督学习之外，也引入了其它的方法像强化学习[26]以及无监督学习[27]来解决一般的图像复原问题。</p>
<p>Several methods have been proposed to stabilize training a very deep model. For instance, residual path is developed to stabilize the training and improve the performance [18,5,12]. Residual scaling is first employed by Szegedy et al. [21] and also used in EDSR. For general deep networks, He et al. [28] propose a robust initialization method for VGG-style networks without BN. To facilitate training a deeper network, we develop a compact and effective residual-in-residual dense block, which also helps to improve the perceptual quality.</p>
<p>已经提出了一些方法来稳定训练非常深的模型。例如，开发残差路径来稳定训练并改善性能[18,5,12]。Szegedy等[21]首次采用残差缩放，也在EDSR中使用。对于一般的深度网络，He等[28]为没有BN的VGG风格的网络提出了一个鲁棒的初始化方法。为了便于训练更深的网络，我们也开发了一个简洁有效的残差套残差密集块，这有助于改善感知质量。</p>
<p>Perceptual-driven approaches have also been proposed to improve the visual quality of SR results. Based on the idea of being closer to perceptual similarity [29,14] perceptual loss [13] is proposed to enhance the visual quality by minimizing the error in a feature space instead of pixel space. Contextual loss [30] is developed to generate images with natural image statistics by using an objective that focuses on the feature distribution rather than merely comparing the appearance. Ledig et al. [1] propose SRGAN model that uses perceptual loss and adversarial loss to favor outputs residing on the manifold of natural images. Sajjadi et al. [16] develop a similar approach and further explored the local texture matching loss. Based on these works, Wang et al. [17] propose spatial feature transform to effectively incorporate semantic prior in an image and improve the recovered textures.</p>
<p>感知驱动的方法已经被提出用来改善SR结果的视觉质量。基于更接近于感知相似度[29,14]的想法提出感知损失[13]，通过最小化特征空间而不是像素空间的误差来增强视觉质量。通过使用专注于特征分布而不是只比较外观的目标函数，开发上下文损失[30]来生成具有自然图像统计的图像。Ledig等[1]提出SRGAN模型，使用感知损失和对抗损失来支持位于自然图像流形的输出。Sajjadi等[16]开发了类似的方法并进一步探索了局部纹理匹配损失。基于这些工作，Wang等[17]提出空间特征变换来有效地将语义先验合并到图像中并改进恢复的纹理。</p>
<p>Throughout the literature, photo-realism is usually attained by adversarial training with GAN [15]. Recently there are a bunch of works that focus on developing more effective GAN frameworks. WGAN [31] proposes to minimize a reasonable and efficient approximation of Wasserstein distance and regularizes discriminator by weight clipping. Other improved regularization for discriminator includes gradient clipping [32] and spectral normalization [33]. Relativistic discriminator [2] is developed not only to increase the probability that generated data are real, but also to simultaneously decrease the probability that real data are real. In this work, we enhance SRGAN by employing a more effective relativistic average GAN.</p>
<p>在整个文献中，通常通过与GAN[15]的对抗训练来获得写实主义照片。最近有很多工作致力于开发更有效的GAN框架。WGAN[31]提出最小化Wasserstein距离的合理和有效近似，并通过权重修剪来正则化判别器。其它对判别器的正则化包括梯度修剪[32]和谱归一化[33]。开发的相对判别器[2]不仅提高了生成数据真实性的概率，而且同时降低了真实数据真实性的概率。在这项工作中，我们通过采用更有效的相对平均GAN来增强SRGAN。</p>
<p>SR algorithms are typically evaluated by several widely used distortion measures, e.g., PSNR and SSIM. However, these metrics fundamentally disagree with the subjective evaluation of human observers [1]. Non-reference measures are used for perceptual quality evaluation, including Ma’s score [23] and NIQE [24], both of which are used to calculate the perceptual index in the PIRM-SR Challenge [3]. In a recent study, Blau et al. [22] find that the distortion and perceptual quality are at odds with each other.</p>
<p>SR通常通过几种广泛使用的失真测量方式来进行评估，例如PSNR和SSIM。然而，这些度量从根本上与人类观察者的主观评估不一致[1]。非参考度量通常用于感知质量评估，包括Ma的分数[23]和NIQE[24]，两者都用于PIRM-SR挑战赛中[3]计算感知指数。在最近的一项研究中，Blau等[22]发现失真和感知质量相互矛盾。</p>
<h2 id="3-Proposed-Methods"><a href="#3-Proposed-Methods" class="headerlink" title="3 Proposed Methods"></a>3 Proposed Methods</h2><p>Our main aim is to improve the overall perceptual quality for SR. In this section, we first describe our proposed network architecture and then discuss the improvements from the discriminator and perceptual loss. At last, we describe the network interpolation strategy for balancing perceptual quality and PSNR.</p>
<h2 id="3-提出的方法"><a href="#3-提出的方法" class="headerlink" title="3 提出的方法"></a>3 提出的方法</h2><p>我们的主要目标是提高SR的整体感知质量。在本节中，我们首先描述我们提出的网络架构，然后讨论判别器和感知损失的改进。最后，我们描述用于平衡感知质量和PSNR的网络插值策略。</p>
<h3 id="3-1-Network-Architecture"><a href="#3-1-Network-Architecture" class="headerlink" title="3.1 Network Architecture"></a>3.1 Network Architecture</h3><p>In order to further improve the recovered image quality of SRGAN, we mainly make two modifications to the structure of generator G: 1) remove all BN layers; 2) replace the original basic block with the proposed Residual-in-Residual Dense Block (RRDB), which combines multi-level residual network and dense connections as depicted in Fig. 4.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_4.jpeg" alt="Figure 4"></p>
<p>Fig.4: Left: We remove the BN layers in residual block in SRGAN. Right: RRDB block is used in our deeper model and $\beta$ is the residual scaling parameter.</p>
<h3 id="3-1-网络架构"><a href="#3-1-网络架构" class="headerlink" title="3.1 网络架构"></a>3.1 网络架构</h3><p>为了进一步改进SRGAN复原的图像质量，我们主要对生成器G的架构进行了两个修改：1）移除所有的BN层；2）用提出的残差套残差密集块(RRDB)替换原始的基本块，它结合了多层残差网络和密集连接，如图4所示。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_4.jpeg" alt="Figure 4"></p>
<p>图4：左：我们移除了SRGAN残差块中的BN层。右：RRDB块用在我们的更深模型中，$\beta$是残差尺度参数。</p>
<p>Removing BN layers has proven to increase performance and reduce computational complexity in different PSNR-oriented tasks including SR [20] and deblurring [35]. BN layers normalize the features using mean and variance in a batch during training and use estimated mean and variance of the whole training dataset during testing. When the statistics of training and testing datasets differ a lot, BN layers tend to introduce unpleasant artifacts and limit the generalization ability. We empirically observe that BN layers are more likely to bring artifacts when the network is deeper and trained under a GAN framework. These artifacts occasionally appear among iterations and different settings, violating the needs for a stable performance over training. We therefore remove BN layers for stable training and consistent performance. Furthermore, removing BN layers helps to improve generalization ability and to reduce computational complexity and memory usage.</p>
<p>在不同的面向PSNR的任务（包括SR[20]和去模糊[35]）中，已经证实了移除BN层可以提高性能并降低计算复杂度。BN层在训练中使用一批数据的均值和方差对特征进行归一化，并在测试中使用整个训练集估计的均值和方差。当训练集和测试集的统计差别很大时，BN层趋向于引入令人不快的伪影并限制泛化能力。我们凭经验观察到，当网络较深且在GAN架构下训练时，BN层更可能带来伪影。这些伪影有时会在迭代中间和不同的设置下出现，违背了训练过程中对于稳定性能的需求。因此，我们为了稳定的训练和一致的性能移除了BN层。此外，移除BN层有助于提高泛化能力并降低计算复杂度及内存使用。</p>
<p>We keep the high-level architecture design of SRGAN (see Fig. 3), and use a novel basic block namely RRDB as depicted in Fig. 4. Based on the observation that more layers and connections could always boost performance [20,11,12], the proposed RRDB employs a deeper and more complex structure than the original residual block in SRGAN. Specifically, as shown in Fig. 4, the proposed RRDB has a residual-in-residual structure, where residual learning is used in different levels. A similar network structure is proposed in [36] that also applies a multilevel residual network. However, our RRDB differs from [36] in that we use dense block [34] in the main path as [11], where the network capacity becomes higher benefiting from the dense connections.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_3.jpeg" alt="Figure 3"></p>
<p>Fig. 3: We employ the basic architecture of SRResNet [1], where most computation is done in the LR feature space. We could select or design “basic blocks” (e.g., residual block [18], dense block [34], RRDB) for better performance.</p>
<p>我们保留了SRGAN的高级架构设计（见图3），并使用了一个新颖的名为RRDB的基本块，如图4所示。基于观测，更多的层和连接总是可以提升性能[20,11,12]，与SRGAN中的原始残差块相比，提出的RRDB采用了更深更复杂的架构。具体地说，如图4所示，提出了的RRDB有残差套残差的结构，其中残差学习用在不同的级别中。[36]中提出的类似结构也适用于多级残差网络。然而，我们的RRDB与[36]的不同在于我们在主路径中使用了如[11]的密集块[34]，受益于密集连接其网络容量变得更高。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_3.jpeg" alt="Figure 3"></p>
<p>图3：我们采用SRResNet[1]的基本架构，大多数计算都在LR特征空间进行。我们可以为了更佳的性能选择或设计“基础块”（例如，残差块[18]，密集块[34]，RRDB）。</p>
<p>In addition to the improved architecture, we also exploit several techniques to facilitate training a very deep network: 1) residual scaling [21,20], i.e., scaling down the residuals by multiplying a constant between 0 and 1 before adding them to the main path to prevent instability; 2) smaller initialization, as we empirically find residual architecture is easier to train when the initial parameter variance becomes smaller. More discussion can be found in the <em>supplementary material</em>.</p>
<p>除了改进架构之外，我们也利用几种技术来促进训练非常深的网络：1）残差缩放[21,20]，例如在将残差加到主路径上之前，通过将其乘以一个0-1之间的常量来缩小残差以防止不稳定性；2）更小的初始化，因为我们凭经验发现当初始参数方差变得更小时，残差结构更容易训练。更多讨论可在<em>补充材料</em>中找到。</p>
<p>The training details and the effectiveness of the proposed network will be presented in Sec. 4.</p>
<p>训练细节和提出网络的有效性将在第4节中介绍。</p>
<h3 id="3-2-Relativistic-Discriminator"><a href="#3-2-Relativistic-Discriminator" class="headerlink" title="3.2 Relativistic Discriminator"></a>3.2 Relativistic Discriminator</h3><p>Besides the improved structure of generator, we also enhance the discriminator based on the Relativistic GAN [2]. Different from the standard discriminator $D$<br>in SRGAN, which estimates the probability that one input image $x$ is real and natural, a relativistic discriminator tries to predict the probability that a real<br>image $x_r$ is relatively more realistic than a fake one $x_f$ , as shown in Fig. 5.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_5.jpeg" alt="Figure 5"></p>
<p>Fig. 5: Difference between standard discriminator and relativistic discriminator.</p>
<h3 id="3-2-相对判别器"><a href="#3-2-相对判别器" class="headerlink" title="3.2 相对判别器"></a>3.2 相对判别器</h3><p>除了改进生成器架构之外，我们还在相对GAN[2]的基础上增强了判断器。不同于SRGAN中的标注判别器$D$，$D$估算输入图像$x$是真实自然的概率，相对判别器尝试预测真实图像$x_r$比假图像$x_f$相对更真实的概率，如图5所示。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_5.jpeg" alt="Figure 5"></p>
<p>图5：标准判别器和相对判别器的差异。</p>
<p>Specifically, we replace the standard discriminator with the Relativistic average Discriminator RaD [2], denoted as $D_{Ra}$. The standard discriminator in SRGAN can be expressed as $D(x) = \sigma(C(x))$, where $\sigma$ is the sigmoid function and $C(x)$ is the non-transformed discriminator output. Then the RaD is formulated as $D_{Ra}(x_r, x_f) = \sigma(C(x_r) − \mathbb{E}_{x_f}[C(x_f)])$, where $\mathbb{E}_{x_f}[\bullet]$ represents the operation of taking average for all fake data in the mini-batch. The discriminator loss is then defined as: $$L^{Ra}_{D} =−\mathbb{E}_{x_r}[log(D_{Ra}(x_r, x_f))]−\mathbb{E}_{x_f}[1 - log(D_{Ra}(x_f, x_r))]. \tag{1}$$</p>
<p>The adversarial loss for generator is in a symmetrical form: $$L^{Ra}_{G} =−\mathbb{E}_{x_r}[1-log(D_{Ra}(x_r, x_f))]−\mathbb{E}_{x_f}[log(D_{Ra}(x_f, x_r))], \tag{2}$$</p>
<p>where $x_f = G(x_i)$ and $x_i$ stands for the input LR image. It is observed that the adversarial loss for generator contains both $x_r$ and $x_f$. Therefore, our generator benefits from the gradients from both generated data and real data in adversarial training, while in SRGAN only generated part takes effect. In Sec. 4.4, we will show that this modification of discriminator helps to learn sharper edges and more detailed textures.</p>
<p>具体来说，我们用相对平均判别器RaD[2]代替标准判别器，记为$D_{Ra}$。SRGAN中的标准判别器可表示为$D(x) = \sigma(C(x))$，其中$\sigma$是sigmoid函数，$C(x)$是非变换判别器输出。然后RaD用公式表示为$D_{Ra}(x_r, x_f) = \sigma(C(x_r) − \mathbb{E}_{x_f}[C(x_f)])$，其中$\mathbb{E}_{x_f}[\bullet]$表示对小批次中所有假数据取平均值的操作。然后判别器损失定义为：$$L^{Ra}_{D} =−\mathbb{E}_{x_r}[log(D_{Ra}(x_r, x_f))]−\mathbb{E}_{x_f}[1 - log(D_{Ra}(x_f, x_r))]. \tag{1}$$</p>
<p>生成器的对抗损失呈对称形式：$$L^{Ra}_{G} =−\mathbb{E}_{x_r}[1-log(D_{Ra}(x_r, x_f))]−\mathbb{E}_{x_f}[log(D_{Ra}(x_f, x_r))], \tag{2}$$</p>
<p>其中$x_f=G(x_i)$和$x_i$代表输入LR图像。可以看出，生成器的对抗损失包含$x_r$和$x_f$。因此，在对抗训练中，我们的生成器受益于生成数据和真实数据的梯度，而在SRGAN中仅生成部分起作用。在4.4节中，我们将展示判别器的这种修改有助于学习更清晰的边缘和更细致的纹理。</p>
<h3 id="3-3-Perceptual-Loss"><a href="#3-3-Perceptual-Loss" class="headerlink" title="3.3 Perceptual Loss"></a>3.3 Perceptual Loss</h3><p>We also develop a more effective perceptual loss $L_{percep}$ by constraining on features before activation rather than after activation as practiced in SRGAN.</p>
<h3 id="3-3-感知损失"><a href="#3-3-感知损失" class="headerlink" title="3.3 感知损失"></a>3.3 感知损失</h3><p>通过约束激活之前的特征而不是SRGAN中实践的激活之后的特征，我们还开发了一种更有效的感知损失$L_{percep}$。</p>
<p>Based on the idea of being closer to perceptual similarity [29,14], Johnson et al. [13] propose perceptual loss and it is extended in SRGAN [1]. Perceptual loss is previously defined on the activation layers of a pre-trained deep network, where the distance between two activated features is minimized. Contrary to the convention, we propose to use features before the activation layers, which will overcome two drawbacks of the original design. First, the activated features are very sparse, especially after a very deep network, as depicted in Fig. 6. For example, the average percentage of activated neurons for image ‘baboon’ after VGG19-54 layer is merely $11.17\%$. The sparse activation provides weak supervision and thus leads to inferior performance. Second, using features after activation also causes inconsistent reconstructed brightness compared with the ground-truth image, which we will show in Sec. 4.4.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_6.jpeg" alt="Figure 6"></p>
<p>Fig.6: Representative feature maps before and after activation for image ‘baboon’. With the network going deeper, most of the features after activation become inactive while features before activation contains more information.</p>
<p>基于更接近感知相似[29,14]的想法，Johnson等[13]提出了感知损失并在SRGAN[1]中得到了扩展。之前的感知损失定义在预训练深度网络的激活层上，最小化两个激活特征之间的距离。与常规用法相反，我们提出使用激活层之前的特征，这将克服原始设计的两个缺点。首先，激活特征非常稀疏，尤其是在非常深的网络之后，如图6所示。例如，图像“狒狒”在VGG19-54层之后激活神经元的平均百分比只有$11.17\%$。稀疏的激活提供了弱监督，因此导致性能较差。其次，与真实图像相比，使用激活之后的特征也会导致重建亮度不一致，这将在4.4节中展示。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_6.jpeg" alt="Figure 6"></p>
<p>图6：图像“狒狒”激活之前和激活之后代表性的特征映射。随着网络加深，大多数激活之后的特征变得不活跃而激活之前的特征包含更多的信息。</p>
<p>Therefore, the total loss for the generator is: $$L_G = L_{percep} + \lambda L^{Ra}_G + \eta L_1 \tag{3}$$ where $L_1 = \mathbb{E}_{x_i} || G(x_i) − y||_1$ is the content loss that evaluate the 1-norm distance between recovered image $G(x_i)$ and the ground-truth $y$, and $\lambda, \eta$ are the coefficients to balance different loss terms.</p>
<p>因此，生成器的全部损失为：$$L_G = L_{percep} + \lambda L^{Ra}_G + \eta L_1 \tag{3}$$，其中$L_1 = \mathbb{E}_{x_i} || G(x_i) − y||_1$是内容损失，用来评估恢复图像$G(x_i)$和真实图像$y$之间的1范数距离，$\lambda, \eta$是平衡不同损失项的系数。</p>
<p>We also explore a variant of perceptual loss in the PIRM-SR Challenge. In contrast to the commonly used perceptual loss that adopts a VGG network trained for image classification, we develop a more suitable perceptual loss for SR–MINC loss. It is based on a fine-tuned VGG network for material recognition [38], which focuses on textures rather than object. Although the gain of perceptual index brought by MINC loss is marginal, we still believe that exploring perceptual loss that focuses on texture is critical for SR.</p>
<p>我们在PIRM-SR挑战赛中也探索了感知损失的变种。与采用图像分类训练的VGG网络的常用感知损失相比，我们为SR–MINC损失开发了一种更合适的感知损失。它是基于材料识别[38]的微调VGG网络，该网络注重于纹理而不是目标。尽管MINC损失带来的感知指数收益是微不足道的，但我们仍然认为，采用注重纹理的感知损失对于SR至关重要。</p>
<h3 id="3-4-Network-Interpolation"><a href="#3-4-Network-Interpolation" class="headerlink" title="3.4 Network Interpolation"></a>3.4 Network Interpolation</h3><p>To remove unpleasant noise in GAN-based methods while maintain a good perceptual quality, we propose a flexible and effective strategy – network interpolation. Specifically, we first train a PSNR-oriented network $G_{PSNR}$ and then obtain a GAN-based network $G_{GAN}$ by fine-tuning. We interpolate all the corresponding parameters of these two networks to derive an interpolated model $G_{INTERP}$, whose parameters are: $$\theta^{INTERP}_{G} = (1 − \alpha) \theta^{PSNR}_{G} + \alpha \theta^{GAN}_{G} \tag{4}$$ where $G_{INTERP}$, $G_{PSNR}$ and $G_{GAN}$ are the parameters of $\theta^{INTERP}_{G}$, $\theta^{PSNR}_{G}$ and $\theta^{GAN}_{G}$, respectively, and $\alpha \in [0, 1]$ is the interpolation parameter.</p>
<h3 id="3-4-网络插值"><a href="#3-4-网络插值" class="headerlink" title="3.4 网络插值"></a>3.4 网络插值</h3><p>为了去除基于GAN方法中讨厌的噪声同时保持好的感知质量，我们提出了一种弹性有效的策略——网络插值。具体来说，我们首先训练一个面向PSNR的网络$G_{PSNR}$，然后通过微调获得一个基于GAN的网络$G_{GAN}$。我们插值这两个网络的所有对应参数来取得插值模型$G_{INTERP}$，其参数为：$$\theta^{INTERP}_{G} = (1 − \alpha) \theta^{PSNR}_{G} + \alpha \theta^{GAN}_{G} \tag{4}$$ 其中$G_{INTERP}$, $G_{PSNR}$和$G_{GAN}$分别是$\theta^{INTERP}_{G}$, $\theta^{PSNR}_{G}$和$\theta^{GAN}_{G}$的参数，$\alpha \in [0, 1]$为插值参数。</p>
<p>The proposed network interpolation enjoys two merits. First, the interpolated model is able to produce meaningful results for any feasible $\alpha$ without introducing artifacts. Second, we can continuously balance perceptual quality and fidelity without re-training the model.</p>
<p>提出的网络插值有两个优点。首先，插值模型对于任何合理的$\alpha$都能产生有意义的结果而不会产生伪影。其次，我们可以持续平衡感知质量和保真度都不必重新训练模型。</p>
<p>We also explore alternative methods to balance the effects of PSNR-oriented and GAN-based methods. For instance, one can directly interpolate their output images (pixel by pixel) rather than the network parameters. However, such an approach fails to achieve a good trade-off between noise and blur, i.e., the interpolated image is either too blurry or noisy with artifacts (see Sec. 4.5). Another method is to tune the weights of content loss and adversarial loss, i.e., the parameter $\lambda$ and $\eta$ in Eq. (3). But this approach requires tuning loss weights and fine-tuning the network, and thus it is too costly to achieve continuous control of the image style.</p>
<p>我们也探索了替代方法来平衡面向PSNR方法和基于GAN方法的影响。例如，可以直接插值它们的输出图像（逐像素）而不是网络参数。然而，这种方法不会在噪声和模糊之间取得良好的权衡，即插值图像或太模糊或带有伪影的噪声太大（见4.5节）。另一种方法是调整内容损失和对抗损失的权重，即方程3中的参数$\lambda$和$\eta$。但这种方法要求调整损失权重并微调网络，因此实现图像风格的连续控制代价很高。</p>
<h2 id="4-Experiments"><a href="#4-Experiments" class="headerlink" title="4 Experiments"></a>4 Experiments</h2><h3 id="4-1-Training-Details"><a href="#4-1-Training-Details" class="headerlink" title="4.1 Training Details"></a>4.1 Training Details</h3><p>Following SRGAN [1], all experiments are performed with a scaling factor of ×4 between LR and HR images. We obtain LR images by down-sampling HR images using the MATLAB bicubic kernel function. The mini-batch size is set to 16. The spatial size of cropped HR patch is 128 × 128. We observe that training a deeper network benefits from a larger patch size, since an enlarged receptive field helps to capture more semantic information. However, it costs more training time and consumes more computing resources. This phenomenon is also observed in PSNR-oriented methods (see supplementary material).</p>
<h2 id="4-实验"><a href="#4-实验" class="headerlink" title="4 实验"></a>4 实验</h2><h3 id="4-1-训练细节"><a href="#4-1-训练细节" class="headerlink" title="4.1 训练细节"></a>4.1 训练细节</h3><p>按照SRGAN[1]，所有实验在LR和HR图像间均以4倍的尺度系数进行。我们通过使用MATLAB双三次核函数对HR图像进行下采样来获得LR图像。最小批次大小设置为16。裁剪的HR图像块的空间大小为128×128。我们观察到，训练更深的网络可以从更大的批次大小中获益，因为扩大的感受野有助于捕获更多的语义信息。但是，这会花费更多的训练时间并消耗更多的计算资源。这种现象也可以在面向PSNR的方法中观察到（见补充材料）。</p>
<p>The training process is divided into two stages. First, we train a PSNR-oriented model with the L1 loss. The learning rate is initialized as $2 × 10^{−4}$ and decayed by a factor of 2 every $2 × 10^5$ of mini-batch updates. We then employ the trained PSNR-oriented model as an initialization for the generator. The generator is trained using the loss function in Eq. (3) with $\lambda = 5×10^{−3}$ and $\eta = 1×10^{−2}$. The learning rate is set to $1×10^{−4}$ and halved at [50k, 100k, 200k, 300k] iterations. Pre-training with pixel-wise loss helps GAN-based methods to obtain more visually pleasing results. The reasons are that 1) it can avoid undesired local optima for the generator; 2) after pre-training, the discriminator receives relatively good super-resolved images instead of extreme fake ones (black or noisy images) at the very beginning, which helps it to focus more on texture discrimination.</p>
<p>训练过程分为两个阶段。首先，我们训练一个具有L1损失的面向PSNR的模型。学习率初始化为$2 × 10^{−4}$，每$2 × 10^5$个小批次更新的衰减因子为2。然后，我们采用训练的面向PSNR的模型作为生成器的初始化。生成器训练使用等式3中的损失函数，$\lambda = 5×10^{−3}$，$\eta = 1×10^{−2}$。学习率设置为$1×10^{−4}$，在[50k, 100k, 200k, 300k]次迭代之后减半。使用逐像素损失进行预训练有助于基于GAN的方法获得视觉上更好的结果。原因是：1）它可以避免生成器不希望的局部最优；2）在预训练之后，最初判别器可以收到相对好的超分辨率图像而不是极端假的图像（黑色或噪声图像），这有助于其更关注纹理判别。</p>
<p>For optimization, we use Adam [39] with $\beta_1 = 0.9, \beta_2 = 0.999$. We alternately update the generator and discriminator network until the model converges. We use two settings for our generator – one of them contains 16 residual blocks, with a capacity similar to that of SRGAN and the other is a deeper model with 23 RRDB blocks. We implement our models with the PyTorch framework and train them using NVIDIA Titan Xp GPUs.</p>
<p>为了优化，我们使用Adam[39]，其中$\beta_1 = 0.9， \beta_2 = 0.999$。我们交替更新生成器和判别器网络，直到模型收敛。我们为生成器使用了两种设置——其中一种包含16个残差块，能力类似于SRGAN，另一种是具有23个RRDB块的更深的模型。我们使用PyTorch框架实现我们的模型，并使用NVIDIA Titan Xp GPU对其进行训练。</p>
<h3 id="4-2-Data"><a href="#4-2-Data" class="headerlink" title="4.2 Data"></a>4.2 Data</h3><p>For training, we mainly use the DIV2K dataset [40], which is a high-quality (2K resolution) dataset for image restoration tasks. Beyond the training set of DIV2K that contains 800 images, we also seek for other datasets with rich and diverse textures for our training. To this end, we further use the Flickr2K dataset [41] consisting of 2650 2K high-resolution images collected on the Flickr website, and the OutdoorSceneTraining (OST) [17] dataset to enrich our training set. We empirically find that using this large dataset with richer textures helps the generator to produce more natural results, as shown in Fig. 8.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_8.jpeg" alt="Figure 8"></p>
<p>Fig. 8: Overall visual comparisons for showing the effects of each component in ESRGAN. Each column represents a model with its configurations in the top. The red sign indicates the main improvement compared with the previous model.</p>
<h3 id="4-2-数据"><a href="#4-2-数据" class="headerlink" title="4.2 数据"></a>4.2 数据</h3><p>对于训练，我们主要使用DIV2K数据集[40]，它是用于图像复原任务的高质量（2K分辨率）数据集。除了包含800张图像的DIV2K训练集外，我们也搜寻了其它具有丰富多样纹理的数据集进行训练。为此，我们进一步使用Flickr2K数据集[41]，包含Flickr网站上收集的2650张2K高分辨率图像，OutdoorSceneTraining(OST)[17]数据集来丰富我们的训练集。我们凭经验发现，使用具有丰富纹理的大型数据集有助于生成器产生更自然的结果，如图8所示。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_8.jpeg" alt="Figure 8"></p>
<p>图8：展示ESRGAN中每个组件效果的整体视觉比较。每一列表示一个模型，其配置在顶部。红色符号表示与前面模型相比的主要改进。</p>
<p>We train our models in RGB channels and augment the training dataset with random horizontal flips and 90 degree rotations. We evaluate our models on widely used benchmark datasets – Set5 [42], Set14 [43], BSD100 [44], Urban100 [45], and the PIRM self-validation dataset that is provided in the PIRM-SR Challenge.</p>
<p>我们在RGB通道训练模型，并通过随机水平翻转和90度旋转来增强训练集。我们在广泛使用的基准数据集——Set5[42]，Set14[43]，BSD100[44]，Urban100[45]以及PIRM-SR挑战赛提供的PIRM自验证数据上评估我们的模型。</p>
<h3 id="4-3-Qualitative-Results"><a href="#4-3-Qualitative-Results" class="headerlink" title="4.3 Qualitative Results"></a>4.3 Qualitative Results</h3><p>We compare our final models on several public benchmark datasets with state-ofthe-art PSNR-oriented methods including SRCNN [4], EDSR [20] and RCAN [12], and also with perceptual-driven approaches including SRGAN [1] and EnhanceNet [16]. Since there is no effective and standard metric for perceptual quality, we present some representative qualitative results in Fig. 7. PSNR (evaluated on the luminance channel in YCbCr color space) and the perceptual index used in the PIRM-SR Challenge are also provided for reference.</p>
<h3 id="4-3-定性结果"><a href="#4-3-定性结果" class="headerlink" title="4.3 定性结果"></a>4.3 定性结果</h3><p>我们将最终的模型与最新的面向PSNR的方法包括SRCNN[4]，EDSR[20]和RCAN[12]，以及感知驱动的方法包括在SRGAN[1]和EnhanceNet[16]在一些公开基准数据集上进行了比较。由于对于感知质量没有有效标准的度量标准，我们在图7中展示了一些具有代表性的结果，也提供了PSNR（在YCbCr颜色空间的亮度通道上评估）和PIRM-SR挑战赛中的感知指数供参考。</p>
<p>It can be observed from Fig. 7 that our proposed ESRGAN outperforms previous approaches in both sharpness and details. For instance, ESRGAN can produce sharper and more natural baboon’s whiskers and grass textures (see image 43074) than PSNR-oriented methods, which tend to generate blurry results, and than previous GAN-based methods, whose textures are unnatural and contain unpleasing noise. ESRGAN is capable of generating more detailed structures in building (see image 102061) while other methods either fail to produce enough details (SRGAN) or add undesired textures (EnhanceNet). Moreover, previous GAN-based methods sometimes introduce unpleasant artifacts, e.g., SRGAN adds wrinkles to the face. Our ESRGAN gets rid of these artifacts and produces natural results.</p>
<p>从图7可以看出，我们提出的ESRGAN在清晰度和细节方面都优于之前的方法。例如，与面向PSNR的方法（更趋向于产生模糊的结果）和以前的基于GAN的方法（纹理不自然并包含令人不快的噪声）相比，ESRGAN可以产生更清晰更自然的狒狒胡须和草的纹理（见图43074）。在建筑物中（见图102061），ESRGAN能够产生更详细的结构而其它的方法要么不能产生足够的细节(SRGAN)，要么添加不必要的纹理(EnhanceNet)。此外，以前基于GAN的方法有时会引入令人不快的伪影，例如SRGAN会在脸上添加皱纹。我们的ESRGAN除去了这些伪影并产生了自然的结果。</p>
<h3 id="4-4-Ablation-Study"><a href="#4-4-Ablation-Study" class="headerlink" title="4.4 Ablation Study"></a>4.4 Ablation Study</h3><p>In order to study the effects of each component in the proposed ESRGAN, we gradually modify the baseline SRGAN model and compare their differences. The overall visual comparison is illustrated in Fig. 8. Each column represents a model with its configurations shown in the top. The red sign indicates the main improvement compared with the previous model. A detailed discussion is provided as follows.</p>
<h3 id="4-4-消融研究"><a href="#4-4-消融研究" class="headerlink" title="4.4 消融研究"></a>4.4 消融研究</h3><p>为了研究提出的ESRGAN中每个组件的效果，我们逐渐修改基准的SRGAN模型并比较它们的差异。完整的视觉比较如图8所示。每一列表示一个模型，其配置在顶部。红色符号表明与前面模型相比的主要改进。详细讨论提供如下。</p>
<p><strong>BN removal</strong>. We first remove all BN layers for stable and consistent performance without artifacts. It does not decrease the performance but saves the computational resources and memory usage. For some cases, a slight improvement can be observed from the 2nd and 3rd columns in Fig. 8 (e.g., image 39). Furthermore, we observe that when a network is deeper and more complicated, the model with BN layers is more likely to introduce unpleasant artifacts. The examples can be found in the supplementary material.</p>
<p><strong>移除BN</strong>。为了稳定和没有伪影的一致性能，我们首先移除了所有的BN层。它不会降低性能但会节省计算资源和内存使用。在某些情况下，从图8中的第2列和第3列可以观察到轻微的改进（例如，图39）。此外，我们观察到当网络更深更复杂时，具有BN层的模型更可能引入令人不快的伪影。可以在补充材料中找到示例。</p>
<p><strong>Before activation in perceptual loss</strong>. We first demonstrate that using features before activation can result in more accurate brightness of reconstructed images. To eliminate the influences of textures and color, we filter the image with a Gaussian kernel and plot the histogram of its gray-scale counterpart. Fig. 9a shows the distribution of each brightness value. Using activated features skews the distribution to the left, resulting in a dimmer output while using features before activation leads to a more accurate brightness distribution closer to that of the ground-truth.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_9.jpeg" alt="Figure 9"></p>
<p>Fig. 9: Comparison between before activation and after activation.</p>
<p><strong>感知损失在激活之前</strong>。我们首先证实了使用激活之前的特征可以使重建图像的亮度更准确。为了消除纹理和颜色的影响，我们使用高斯核对图像进行了滤波并绘制了其对应灰度图像的直方图。图9a展示了每一个亮度值的分布。使用激活的特征会使分布偏向左，导致了较暗的输出，而使用激活之前的特征会得到更精确的亮度分布，更接近于真实图像的亮度分布。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_9.jpeg" alt="Figure 9"></p>
<p>图9：激活之前和激活之后的比较。</p>
<p>We can further observe that using features before activation helps to produce sharper edges and richer textures as shown in Fig. 9b (see bird feather) and Fig. 8 (see the 3rd and 4th columns), since the dense features before activation offer a stronger supervision than that a sparse activation could provide.</p>
<p>我们可以进一步观察到，使用激活之前的特征有助于产生更清晰的边缘和更丰富的纹理，如图9b（见鸟羽）和图8（见第三列和第四列）所示，因为与稀疏激活提供的特征相比，激活之前的密集特征能提供更强的监督。</p>
<p><strong>RaGAN</strong>. RaGAN uses an improved relativistic discriminator, which is shown to benefit learning sharper edges and more detailed textures. For example, in the 5th column of Fig. 8, the generated images are sharper with richer textures than those on their left (see the baboon, image 39 and image 43074).</p>
<p><strong>RaGAN</strong>。RaGAN使用改进的相对判别器，证明了其有利于学习更清晰的边缘和更细致的纹理。例如，在图8的第5列中，生成的图像比其左侧的图像更清晰，具有更丰富的纹理（见狒狒，图39和图43074）。</p>
<p><strong>Deeper network with RRDB</strong>. Deeper model with the proposed RRDB can further improve the recovered textures, especially for the regular structures like the roof of image 6 in Fig. 8, since the deep model has a strong representation capacity to capture semantic information. Also, we find that a deeper model can reduce unpleasing noises like image 20 in Fig. 8.</p>
<p><strong>具有RRDB的更深网络</strong>。具有提出的RRDB的更深模型可以进一步改善恢复的纹理，尤其是像图8中图像6的屋顶这样的常规结构，因为深度模型具有强大的表示能力来捕获语义信息。 我们也发现更深的模型可以减少像图8中图像20这样的令人不快的噪声。</p>
<p>In contrast to SRGAN, which claimed that deeper models are increasingly difficult to train, our deeper model shows its superior performance with easy training, thanks to the improvements mentioned above especially the proposed RRDB without BN layers.</p>
<p>与SRGAN声称的更深的模型越来越难训练相比，由于上述提供的改进尤其是提出的没有BN层的RRDB，我们更深的模型展示了它容易训练且优越性能。</p>
<h3 id="4-5-Network-Interpolation"><a href="#4-5-Network-Interpolation" class="headerlink" title="4.5 Network Interpolation"></a>4.5 Network Interpolation</h3><p>We compare the effects of network interpolation and image interpolation strategies in balancing the results of a PSNR-oriented model and GAN-based method. We apply simple linear interpolation on both the schemes. The interpolation parameter $\alpha$ is chosen from 0 to 1 with an interval of 0.2.</p>
<h3 id="4-5-网络插值"><a href="#4-5-网络插值" class="headerlink" title="4.5 网络插值"></a>4.5 网络插值</h3><p>我们比较了网络插值和图像插值策略在平衡面向PSNR模型与基于GAN方法的结果方面的作用。我们在这个两个方案中应用了简单的线性插值。插值参数$\alpha$从间隔为0.2的0-1之间选取。</p>
<p>As depicted in Fig. 10, the pure GAN-based method produces sharp edges and richer textures but with some unpleasant artifacts, while the pure PSNRoriented method outputs cartoon-style blurry images. By employing network interpolation, unpleasing artifacts are reduced while the textures are maintained. By contrast, image interpolation fails to remove these artifacts effectively.</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_10.jpeg" alt="Figure 10"></p>
<p>Fig. 10: The comparison between network interpolation and image interpolation.</p>
<p>如图10所示，单纯的基于GAN的方法会产生清晰的边缘和更丰富的纹理，但带有一些令人不快的伪影，而单纯的面向PSNR方法会输出卡通风格的模糊图像。通过采用网络插值，在减少令人不快的伪影的同时保持了纹理。相比之下，图像插值不能有效消除这些伪影。</p>
<p><img src="http://noahsnail.com/images/esrgan/Figure_10.jpeg" alt="Figure 10"></p>
<p>图10：网络插值和图像插值的比较。</p>
<p>Interestingly, it is observed that the network interpolation strategy provides a smooth control of balancing perceptual quality and fidelity in Fig. 10.</p>
<p>有趣的是，在图10中观察到网络插值策略提供了对平衡感知质量和保真度的平滑控制。</p>
<h3 id="4-6-The-PIRM-SR-Challenge"><a href="#4-6-The-PIRM-SR-Challenge" class="headerlink" title="4.6 The PIRM-SR Challenge"></a>4.6 The PIRM-SR Challenge</h3><p>We take a variant of ESRGAN to participate in the PIRM-SR Challenge [3]. Specifically, we use the proposed ESRGAN with 16 residual blocks and also empirically make some modifications to cater to the perceptual index. 1) The MINC loss is used as a variant of perceptual loss, as discussed in Sec. 3.3. Despite the marginal gain on the perceptual index, we still believe that exploring perceptual loss that focuses on texture is crucial for SR. 2) Pristine dataset [24], which is used for learning the perceptual index, is also employed in our training; 3) a high weight of loss $L_1$ up to $\eta = 10$ is used due to the PSNR constraints; 4) we also use back projection [46] as post-processing, which can improve PSNR and sometimes lower the perceptual index.</p>
<h3 id="4-6-PIRM-SR挑战赛"><a href="#4-6-PIRM-SR挑战赛" class="headerlink" title="4.6 PIRM-SR挑战赛"></a>4.6 PIRM-SR挑战赛</h3><p>我们采用ESRGAN的一个变种来参加PIRM-SR挑战赛[3]。具体来说，我们使用提出的具有16个残差块的ESRGAN，并根据经验进行了一些修改来迎合感知指数。1）使用MINC损失作为感知损失的一个变种，如3.3节所述。尽管在感知指数上有边际收益，但我们仍认为采用专注于纹理的感知损失对于SR至关重要；2）我们的训练中也使用了Pristine数据集[24]来学习感知指数；3）由于PSNR约束，$L_1$损失的权重高达$\eta = 10$；4）我们也使用反向投射[46]作为后处理，其可以改善PSNR，有时会降低感知指数。</p>
<p>For other regions 1 and 2 that require a higher PSNR, we use image interpolation between the results of our ESRGAN and those of a PSNR-oriented method RCAN [12]. The image interpolation scheme achieves a lower perceptual index (lower is better) although we observed more visually pleasing results by using the network interpolation scheme. Our proposed ESRGAN model won the first place in the PIRM-SR Challenge (region 3) with the best perceptual index.</p>
<p>对于其它需要较高PSNR的区域1和2，我们在ESRGAN的结果和面向PSNR方法RCAN[12]的结果之间使用图像插值。尽管通过使用网络插值方案我们观察到了视觉上更令人满意的效果，但图像插值方案取得了较低的感知指数（越低越好）。我们提出的ESRGAN模型以最好的感知指数赢得了PIRM-SR挑战赛（区域3）的第一名。</p>
<h2 id="5-Conclusion"><a href="#5-Conclusion" class="headerlink" title="5 Conclusion"></a>5 Conclusion</h2><p>We have presented an ESRGAN model that achieves consistently better perceptual quality than previous SR methods. The method won the first place in the PIRM-SR Challenge in terms of the perceptual index. We have formulated a novel architecture containing several RDDB blocks without BN layers. In addition, useful techniques including residual scaling and smaller initialization are employed to facilitate the training of the proposed deep model. We have also introduced the use of relativistic GAN as the discriminator, which learns to judge whether one image is more realistic than another, guiding the generator to recover more detailed textures. Moreover, we have enhanced the perceptual loss by using the features before activation, which offer stronger supervision and thus restore more accurate brightness and realistic textures.</p>
<h2 id="5-结论"><a href="#5-结论" class="headerlink" title="5 结论"></a>5 结论</h2><p>我们提出了一种ESRGAN模型，它比以前的SR方法始终取得更好的感知质量。就感知指数而言，该方法在PIRM-SR挑战赛中获得了第一名。我们构建了一种包含一些没有BN层的RDDB块的新颖架构。此外，采用了包括残差缩放和较小初始化的有用技术，以促进提出的深度模型的训练。我们还介绍了使用相对GAN作为判别器，其学习判断一张图像是否比另一张更真实，引导生成器恢复更详细的纹理。此外，我们通过使用激活之前的特征增强了感知损失，它提供了更强的监督，从而恢复了更精确的亮度和真实纹理。</p>
<p><strong>Acknowledgement</strong>. This work is supported by SenseTime Group Limited, the General Research Fund sponsored by the Research Grants Council of the Hong Kong SAR (CUHK 14241716, 14224316. 14209217), National Natural Science Foundation of China (U1613211) and Shenzhen Research Program (JCYJ20170818164704758, JCYJ20150925163005055).</p>
<p><strong>致谢</strong>。这项工作由商汤科技支持，香港特别行政区研究资助局（CUHK 14241716、14224316、14209217），中国国家自然科学基金（U1613211）和深圳研究计划（JCYJ20170818164704758，JCYJ20150925163005055）赞助。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ol>
<li><p>Ledig,C.,Theis,L.,Husza ́r,F.,Caballero,J.,Cunningham,A.,Acosta,A.,Aitken, A., Tejani, A., Totz, J., Wang, Z., et al.: Photo-realistic single image super-resolution using a generative adversarial network. In: CVPR. (2017)</p>
</li>
<li><p>Jolicoeur-Martineau, A.: The relativistic discriminator: a key element missing from standard gan. arXiv preprint arXiv:1807.00734 (2018)</p>
</li>
<li><p>Blau, Y., Mechrez, R., Timofte, R., Michaeli, T., Zelnik-Manor, L.: The pirm challenge on perceptual super resolution. <a href="https://www.pirm2018.org/PIRM-SR" target="_blank" rel="external">https://www.pirm2018.org/PIRM-SR</a>. html (2018)</p>
</li>
<li><p>Dong, C., Loy, C.C., He, K., Tang, X.: Learning a deep convolutional network for image super-resolution. In: ECCV. (2014)</p>
</li>
<li><p>Kim, J., Kwon Lee, J., Mu Lee, K.: Accurate image super-resolution using very deep convolutional networks. In: CVPR. (2016)</p>
</li>
<li><p>Lai, W.S., Huang, J.B., Ahuja, N., Yang, M.H.: Deep laplacian pyramid networks for fast and accurate super-resolution. In: CVPR. (2017)</p>
</li>
<li><p>Kim, J., Kwon Lee, J., Mu Lee, K.: Deeply-recursive convolutional network for image super-resolution. In: CVPR. (2016)</p>
</li>
<li><p>Tai, Y., Yang, J., Liu, X.: Image super-resolution via deep recursive residual network. In: CVPR. (2017)</p>
</li>
<li><p>Tai, Y., Yang, J., Liu, X., Xu, C.: Memnet: A persistent memory network for image restoration. In: ICCV. (2017)</p>
</li>
<li><p>Haris, M., Shakhnarovich, G., Ukita, N.: Deep backprojection networks for super- resolution. In: CVPR. (2018)</p>
</li>
<li><p>Zhang, Y., Tian, Y., Kong, Y., Zhong, B., Fu, Y.: Residual dense network for image super-resolution. In: CVPR. (2018)</p>
</li>
<li><p>Zhang, Y., Li, K., Li, K., Wang, L., Zhong, B., Fu, Y.: Image super-resolution using very deep residual channel attention networks. In: ECCV. (2018)</p>
</li>
<li><p>Johnson, J., Alahi, A., Fei-Fei, L.: Perceptual losses for real-time style transfer and super-resolution. In: ECCV. (2016)</p>
</li>
<li><p>Bruna, J., Sprechmann, P., LeCun, Y.: Super-resolution with deep convolutional sufficient statistics. In: ICLR. (2015)</p>
</li>
<li><p>Goodfellow, I., Pouget-Abadie, J., Mirza, M., Xu, B., Warde-Farley, D., Ozair, S., Courville, A., Bengio, Y.: Generative adversarial nets. In: NIPS. (2014)</p>
</li>
<li><p>Sajjadi, M.S., Scho ̈lkopf, B., Hirsch, M.: Enhancenet: Single image super-resolution through automated texture synthesis. In: ICCV. (2017)</p>
</li>
<li><p>Wang, X., Yu, K., Dong, C., Loy, C.C.: Recovering realistic texture in image super-resolution by deep spatial feature transform. In: CVPR. (2018)</p>
</li>
<li><p>He, K., Zhang, X., Ren, S., Sun, J.: Deep residual learning for image recognition. In: CVPR. (2016)</p>
</li>
<li><p>Ioffe, S., Szegedy, C.: Batch normalization: Accelerating deep network training by reducing internal covariate shift. In: ICMR. (2015)</p>
</li>
<li><p>Lim, B., Son, S., Kim, H., Nah, S., Lee, K.M.: Enhanced deep residual networks for single image super-resolution. In: CVPRW. (2017)</p>
</li>
<li><p>Szegedy, C., Ioffe, S., Vanhoucke, V.: Inception-v4, inception-resnet and the impact of residual connections on learning. arXiv preprint arXiv:1602.07261 (2016)</p>
</li>
<li><p>Blau, Y., Michaeli, T.: The perception-distortion tradeoff. In: CVPR. (2017)</p>
</li>
<li><p>Ma, C., Yang, C.Y., Yang, X., Yang, M.H.: Learning a no-reference quality metric for single-image super-resolution. CVIU 158 (2017) 1–16</p>
</li>
<li><p>Mittal, A., Soundararajan, R., Bovik, A.C.: Making a completely blind image quality analyzer. IEEE Signal Process. Lett. 20(3) (2013) 209–212</p>
</li>
<li><p>Dong, C., Loy, C.C., He, K., Tang, X.: Image super-resolution using deep convolutional networks. TPAMI 38(2) (2016) 295–307</p>
</li>
<li><p>Yu, K., Dong, C., Lin, L., Loy, C.C.: Crafting a toolchain for image restoration by deep reinforcement learning. In: CVPR. (2018)</p>
</li>
<li><p>Yuan, Y., Liu, S., Zhang, J., Zhang, Y., Dong, C., Lin, L.: Unsupervised image super-resolution using cycle-in-cycle generative adversarial networks. In: CVPRW. (2018)</p>
</li>
<li><p>He, K., Zhang, X., Ren, S., Sun, J.: Delving deep into rectifiers: Surpassing human-level performance on imagenet classification. In: ICCV. (2015)</p>
</li>
<li><p>Gatys, L., Ecker, A.S., Bethge, M.: Texture synthesis using convolutional neural networks. In: NIPS. (2015)</p>
</li>
<li><p>Mechrez, R., Talmi, I., Shama, F., Zelnik-Manor, L.: Maintaining natural image statistics with the contextual loss. arXiv preprint arXiv:1803.04626 (2018)</p>
</li>
<li><p>Arjovsky, M., Chintala, S., Bottou, L.: Wasserstein gan. arXiv preprint arXiv:1701.07875 (2017)</p>
</li>
<li><p>Gulrajani, I., Ahmed, F., Arjovsky, M., Dumoulin, V., Courville, A.C.: Improved training of wasserstein gans. In: NIPS. (2017)</p>
</li>
<li><p>Miyato, T., Kataoka, T., Koyama, M., Yoshida, Y.: Spectral normalization for generative adversarial networks. arXiv preprint arXiv:1802.05957 (2018)</p>
</li>
<li><p>Huang, G., Liu, Z., Weinberger, K.Q., van der Maaten, L.: Densely connected convolutional networks. In: CVPR. (2017)</p>
</li>
<li><p>Nah, S., Kim, T.H., Lee, K.M.: Deep multi-scale convolutional neural network for dynamic scene deblurring. In: CVPR. (2017)</p>
</li>
<li><p>Zhang, K., Sun, M., Han, X., Yuan, X., Guo, L., Liu, T.: Residual networks of residual networks: Multilevel residual networks. IEEE Transactions on Circuits and Systems for Video Technology (2017)</p>
</li>
<li><p>Simonyan, K., Zisserman, A.: Very deep convolutional networks for large-scale image recognition. arXiv preprint arXiv:1409.1556 (2014)</p>
</li>
<li><p>Bell, S., Upchurch, P., Snavely, N., Bala, K.: Material recognition in the wild with the materials in context database. In: CVPR. (2015)</p>
</li>
<li><p>Kingma, D., Ba, J.: Adam: A method for stochastic optimization. In: ICLR. (2015)</p>
</li>
<li><p>Agustsson, E., Timofte, R.: Ntire 2017 challenge on single image super-resolution: Dataset and study. In: CVPRW. (2017)</p>
</li>
<li><p>Timofte, R., Agustsson, E., Van Gool, L., Yang, M.H., Zhang, L., Lim, B., Son, S., Kim, H., Nah, S., Lee, K.M., et al.: Ntire 2017 challenge on single image super-resolution: Methods and results. In: CVPRW. (2017)</p>
</li>
<li><p>Bevilacqua, M., Roumy, A., Guillemot, C., Alberi-Morel, M.L.: Low-complexity single-image super-resolution based on nonnegative neighbor embedding. In: BMVC, BMVA press (2012)</p>
</li>
<li><p>Zeyde, R., Elad, M., Protter, M.: On single image scale-up using sparse-representations. In: International Conference on Curves and Surfaces, Springer (2010)</p>
</li>
<li><p>Martin, D., Fowlkes, C., Tal, D., Malik, J.: A database of human segmented natural images and its application to evaluating segmentation algorithms and measuring ecological statistics. In: ICCV. (2001)</p>
</li>
<li><p>Huang, J.B., Singh, A., Ahuja, N.: Single image super-resolution from transformed self-exemplars. In: CVPR. (2015)</p>
</li>
<li><p>Timofte, R., Rothe, R., Van Gool, L.: Seven ways to improve example-based single image super resolution. In: CVPR. (2016)</p>
</li>
<li><p>Glorot, X., Bengio, Y.: Understanding the difficulty of training deep feedforward neural networks. In: International Conference on Artificial Intelligence and Statistics. (2010)</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      ESRGAN - Enhanced Super-Resolution Generative Adversarial Networks论文翻译——中英文对照
    
    </summary>
    
      <category term="深度学习" scheme="http://noahsnail.com/categories/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Deep Learning" scheme="http://noahsnail.com/tags/Deep-Learning/"/>
    
  </entry>
  
</feed>
